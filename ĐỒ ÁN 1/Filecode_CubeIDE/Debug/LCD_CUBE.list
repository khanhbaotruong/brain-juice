
LCD_CUBE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000820c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  08008320  08008320  00018320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087c0  080087c0  0002021c  2**0
                  CONTENTS
  4 .ARM          00000000  080087c0  080087c0  0002021c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087c0  080087c0  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087c0  080087c0  000187c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087c4  080087c4  000187c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  080087c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000220  080089e4  00020220  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  080089e4  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b464  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dcb  00000000  00000000  0002b6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  0002d478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  0002e128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d0e  00000000  00000000  0002ece0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d697  00000000  00000000  000479ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c27f  00000000  00000000  00055085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1304  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a18  00000000  00000000  000e1354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000220 	.word	0x20000220
 800012c:	00000000 	.word	0x00000000
 8000130:	08008304 	.word	0x08008304

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000224 	.word	0x20000224
 800014c:	08008304 	.word	0x08008304

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <MAX31865_Init>:
//P.S. Максимальная скорость spi 5 МГц.
//Также обратите внимание, что Clock Polarity(CLPOL) = Low. Clock Phase(CPHA) = 2 Edge.
/*-------------------------------------------Для работы по spi-----------------------------------------------*/

/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/
void MAX31865_Init(uint8_t num_wires) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	///Не вижу особого смысла выводить полную настройку модуля, поэтому сделаем
	///небольшое упрощение для конечного пользователя
	///все, что может настроить пользователь - это выбрать тип подключения
	///2,3 или 4 проводное
	/// \param num_wires - тип подключения датчика 2,3 или 4 проводное
	uint8_t MAX31865_Reinitialization_cnt = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]
	MAX31865_Sensor_Error = 0;
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <MAX31865_Init+0x9c>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
	uint8_t MAX31865_Configuration_register_write[] = { 0x80, 0x00 };
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	81bb      	strh	r3, [r7, #12]
	if (num_wires == 2 || num_wires == 4) {
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d002      	beq.n	8001140 <MAX31865_Init+0x24>
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b04      	cmp	r3, #4
 800113e:	d102      	bne.n	8001146 <MAX31865_Init+0x2a>
		MAX31865_Configuration_register_write[1] = 0xC3; //0xC3
 8001140:	23c3      	movs	r3, #195	; 0xc3
 8001142:	737b      	strb	r3, [r7, #13]
 8001144:	e004      	b.n	8001150 <MAX31865_Init+0x34>
	} else if (num_wires == 3) {
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d101      	bne.n	8001150 <MAX31865_Init+0x34>
		MAX31865_Configuration_register_write[1] = 0xD3; //0xD3
 800114c:	23d3      	movs	r3, #211	; 0xd3
 800114e:	737b      	strb	r3, [r7, #13]
	}
	cs_set();
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MAX31865_Init+0xa0>)
 8001152:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001156:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, MAX31865_Configuration_register_write, 2, 100);
 8001158:	f107 010c 	add.w	r1, r7, #12
 800115c:	2364      	movs	r3, #100	; 0x64
 800115e:	2202      	movs	r2, #2
 8001160:	4817      	ldr	r0, [pc, #92]	; (80011c0 <MAX31865_Init+0xa4>)
 8001162:	f002 fb01 	bl	8003768 <HAL_SPI_Transmit>
	cs_reset();
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MAX31865_Init+0xa0>)
 8001168:	2201      	movs	r2, #1
 800116a:	611a      	str	r2, [r3, #16]
	//Дабы достучаться до датчика после подачи питания, т.к. с первого раза инициализация может и не пройти, заведем цикл.
	while (MAX31865_Configuration_info() != 0xD1 || MAX31865_Configuration_info() != 0xC1) {
 800116c:	e013      	b.n	8001196 <MAX31865_Init+0x7a>
		MAX31865_Reinitialization_cnt++;
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]

		cs_set();
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MAX31865_Init+0xa0>)
 8001176:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800117a:	611a      	str	r2, [r3, #16]
		HAL_SPI_Transmit(&hspi1, MAX31865_Configuration_register_write, 2, 100);
 800117c:	f107 010c 	add.w	r1, r7, #12
 8001180:	2364      	movs	r3, #100	; 0x64
 8001182:	2202      	movs	r2, #2
 8001184:	480e      	ldr	r0, [pc, #56]	; (80011c0 <MAX31865_Init+0xa4>)
 8001186:	f002 faef 	bl	8003768 <HAL_SPI_Transmit>
		cs_reset();
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MAX31865_Init+0xa0>)
 800118c:	2201      	movs	r2, #1
 800118e:	611a      	str	r2, [r3, #16]

		if (MAX31865_Reinitialization_cnt == 100) {
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	2b64      	cmp	r3, #100	; 0x64
 8001194:	d00a      	beq.n	80011ac <MAX31865_Init+0x90>
	while (MAX31865_Configuration_info() != 0xD1 || MAX31865_Configuration_info() != 0xC1) {
 8001196:	f000 f815 	bl	80011c4 <MAX31865_Configuration_info>
 800119a:	4603      	mov	r3, r0
 800119c:	2bd1      	cmp	r3, #209	; 0xd1
 800119e:	d1e6      	bne.n	800116e <MAX31865_Init+0x52>
 80011a0:	f000 f810 	bl	80011c4 <MAX31865_Configuration_info>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2bc1      	cmp	r3, #193	; 0xc1
 80011a8:	d1e1      	bne.n	800116e <MAX31865_Init+0x52>
			break;
		}

	}

}
 80011aa:	e000      	b.n	80011ae <MAX31865_Init+0x92>
			break;
 80011ac:	bf00      	nop
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000248 	.word	0x20000248
 80011bc:	40010800 	.word	0x40010800
 80011c0:	2000029c 	.word	0x2000029c

080011c4 <MAX31865_Configuration_info>:
/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/

/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/
uint8_t MAX31865_Configuration_info(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	///Функция получения информации о конфигурации модуля MAX31865
	///Возвращает значение конфигурации.
	///Не удивляйтесь, если отправите при инициализации 0xC3, а получите 0xC1
	///(см. datasheet MAX31865 стр.14 "The fault status clear bit D1, self-clears to 0.")
	uint8_t read_data = 0x00;
 80011ca:	2300      	movs	r3, #0
 80011cc:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_Configuration = 0x00;
 80011ce:	2300      	movs	r3, #0
 80011d0:	71bb      	strb	r3, [r7, #6]
	cs_set();
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MAX31865_Configuration_info+0x40>)
 80011d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011d8:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, &read_data, 1, 100);
 80011da:	1df9      	adds	r1, r7, #7
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	2201      	movs	r2, #1
 80011e0:	4809      	ldr	r0, [pc, #36]	; (8001208 <MAX31865_Configuration_info+0x44>)
 80011e2:	f002 fac1 	bl	8003768 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &MAX31865_Configuration, 1, 100);
 80011e6:	1db9      	adds	r1, r7, #6
 80011e8:	2364      	movs	r3, #100	; 0x64
 80011ea:	2201      	movs	r2, #1
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <MAX31865_Configuration_info+0x44>)
 80011ee:	f002 fbfe 	bl	80039ee <HAL_SPI_Receive>
	cs_reset();
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <MAX31865_Configuration_info+0x40>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	611a      	str	r2, [r3, #16]
	return MAX31865_Configuration;
 80011f8:	79bb      	ldrb	r3, [r7, #6]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40010800 	.word	0x40010800
 8001208:	2000029c 	.word	0x2000029c
 800120c:	00000000 	.word	0x00000000

08001210 <MAX31865_Get_Temperature>:
/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/

/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/
double MAX31865_Get_Temperature(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
		uint8_t Fault_Status; //Статус неисправности
	};

	struct rx_data_MAX31865 MAX31865_receieve_data;

	uint8_t MAX31865_start_address_of_the_poll = 0x01; //Адрес регистра, с которого начнем чтение данных
 8001216:	2301      	movs	r3, #1
 8001218:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_rx_buffer[7]; //буфер, куда будем складывать приходящие данные
	cs_set();
 800121a:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <MAX31865_Get_Temperature+0xc8>)
 800121c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001220:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, &MAX31865_start_address_of_the_poll, 1, 100);
 8001222:	1df9      	adds	r1, r7, #7
 8001224:	2364      	movs	r3, #100	; 0x64
 8001226:	2201      	movs	r2, #1
 8001228:	482c      	ldr	r0, [pc, #176]	; (80012dc <MAX31865_Get_Temperature+0xcc>)
 800122a:	f002 fa9d 	bl	8003768 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, MAX31865_rx_buffer, 7, 100);
 800122e:	4639      	mov	r1, r7
 8001230:	2364      	movs	r3, #100	; 0x64
 8001232:	2207      	movs	r2, #7
 8001234:	4829      	ldr	r0, [pc, #164]	; (80012dc <MAX31865_Get_Temperature+0xcc>)
 8001236:	f002 fbda 	bl	80039ee <HAL_SPI_Receive>
	cs_reset();
 800123a:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <MAX31865_Get_Temperature+0xc8>)
 800123c:	2201      	movs	r2, #1
 800123e:	611a      	str	r2, [r3, #16]
	MAX31865_receieve_data.RTD_Resistance_Registers = ((MAX31865_rx_buffer[0] << 8) | MAX31865_rx_buffer[1]) >> 1; //Данные регистров сопротивления
 8001240:	783b      	ldrb	r3, [r7, #0]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	787a      	ldrb	r2, [r7, #1]
 8001246:	4313      	orrs	r3, r2
 8001248:	105b      	asrs	r3, r3, #1
 800124a:	b29b      	uxth	r3, r3
 800124c:	813b      	strh	r3, [r7, #8]
	MAX31865_receieve_data.High_Fault_Threshold = ((MAX31865_rx_buffer[2] << 8) | MAX31865_rx_buffer[3]) >> 1; //Данные верхнего порого неисправности
 800124e:	78bb      	ldrb	r3, [r7, #2]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	78fa      	ldrb	r2, [r7, #3]
 8001254:	4313      	orrs	r3, r2
 8001256:	105b      	asrs	r3, r3, #1
 8001258:	b29b      	uxth	r3, r3
 800125a:	817b      	strh	r3, [r7, #10]
	MAX31865_receieve_data.Low_Fault_Threshold = (MAX31865_rx_buffer[4] << 8) | MAX31865_rx_buffer[5]; //Данные нижнего порога неисправности
 800125c:	793b      	ldrb	r3, [r7, #4]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	797b      	ldrb	r3, [r7, #5]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21b      	sxth	r3, r3
 800126a:	b29b      	uxth	r3, r3
 800126c:	81bb      	strh	r3, [r7, #12]
	MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6]; //Статус неисправности
 800126e:	79bb      	ldrb	r3, [r7, #6]
 8001270:	73bb      	strb	r3, [r7, #14]
	if (MAX31865_receieve_data.Fault_Status > 0x00) {
 8001272:	7bbb      	ldrb	r3, [r7, #14]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d008      	beq.n	800128a <MAX31865_Get_Temperature+0x7a>

		/*--------------Здесь Ваши действия по реагированию на ошибку датчика---------------*/
		MAX31865_Sensor_Error = 1;
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MAX31865_Get_Temperature+0xd0>)
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
		//printf("Sensor Error!\r\n");

		/*----Автоматический сброс ошибки----*/
		MAX31865_Init(3);
 800127e:	2003      	movs	r0, #3
 8001280:	f7ff ff4c 	bl	800111c <MAX31865_Init>
		MAX31865_Sensor_Error = 0;
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MAX31865_Get_Temperature+0xd0>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]

	//printf("RTD Resistance Registers = %X\r\n", MAX31865_receieve_data.RTD_Resistance_Registers);
	//printf("Hight Fault Treshold = %X\r\n", MAX31865_receieve_data.High_Fault_Threshold);
	//printf("Low Fault Treshold = %X\r\n", MAX31865_receieve_data.Low_Fault_Threshold);
	//printf("Fault status = %X\r\n", MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6]);
	data = ((double) MAX31865_receieve_data.RTD_Resistance_Registers * MAX31865_Rref ) / (double) 32768.0; // Replace 4000 by 400 for PT100
 800128a:	893b      	ldrh	r3, [r7, #8]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f8a9 	bl	80003e4 <__aeabi_ui2d>
 8001292:	a30f      	add	r3, pc, #60	; (adr r3, 80012d0 <MAX31865_Get_Temperature+0xc0>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f91e 	bl	80004d8 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MAX31865_Get_Temperature+0xd4>)
 80012aa:	f7ff fa3f 	bl	800072c <__aeabi_ddiv>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//printf("Rrtd = %lf\n", data);
	return MAX31865_Get_Temperature_math(data);
 80012b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012ba:	f000 f815 	bl	80012e8 <MAX31865_Get_Temperature_math>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
}
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	f3af 8000 	nop.w
 80012d0:	00000000 	.word	0x00000000
 80012d4:	407a2800 	.word	0x407a2800
 80012d8:	40010800 	.word	0x40010800
 80012dc:	2000029c 	.word	0x2000029c
 80012e0:	20000248 	.word	0x20000248
 80012e4:	40e00000 	.word	0x40e00000

080012e8 <MAX31865_Get_Temperature_math>:
/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/

/*===============================================ПРЕОБРАЗОВАНИЕ СОПРОТИВЛЕНИЯ В ТЕМПЕРАТУРУ, СОГЛАСНО ГОСТ 6651-2009===============================================*/
double MAX31865_Get_Temperature_math(double PT100_Resistance) {
 80012e8:	b5b0      	push	{r4, r5, r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	e9c7 0100 	strd	r0, r1, [r7]
	if (PT100_Resistance >= (double) 100.0) {
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	4b72      	ldr	r3, [pc, #456]	; (80014c0 <MAX31865_Get_Temperature_math+0x1d8>)
 80012f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012fc:	f7ff fb72 	bl	80009e4 <__aeabi_dcmpge>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d03b      	beq.n	800137e <MAX31865_Get_Temperature_math+0x96>
		double MAX31865_math_Discriminant = (double) 0.00001527480889 - ((double) -0.00000231 * (1 - (PT100_Resistance / MAX31865_PT100_R0 )));
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b6d      	ldr	r3, [pc, #436]	; (80014c0 <MAX31865_Get_Temperature_math+0x1d8>)
 800130c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001310:	f7ff fa0c 	bl	800072c <__aeabi_ddiv>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	f04f 0000 	mov.w	r0, #0
 800131c:	4969      	ldr	r1, [pc, #420]	; (80014c4 <MAX31865_Get_Temperature_math+0x1dc>)
 800131e:	f7fe ff23 	bl	8000168 <__aeabi_dsub>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	a351      	add	r3, pc, #324	; (adr r3, 8001470 <MAX31865_Get_Temperature_math+0x188>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f8d2 	bl	80004d8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	a34e      	add	r3, pc, #312	; (adr r3, 8001478 <MAX31865_Get_Temperature_math+0x190>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7fe ff13 	bl	800016c <__adddf3>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		MAX31865_PT100_T = ((double) -0.0039083 + sqrt(MAX31865_math_Discriminant)) / (double) -0.000001155;
 800134e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001352:	f006 f939 	bl	80075c8 <sqrt>
 8001356:	a34a      	add	r3, pc, #296	; (adr r3, 8001480 <MAX31865_Get_Temperature_math+0x198>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7fe ff04 	bl	8000168 <__aeabi_dsub>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	a347      	add	r3, pc, #284	; (adr r3, 8001488 <MAX31865_Get_Temperature_math+0x1a0>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	f7ff f9dd 	bl	800072c <__aeabi_ddiv>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4954      	ldr	r1, [pc, #336]	; (80014c8 <MAX31865_Get_Temperature_math+0x1e0>)
 8001378:	e9c1 2300 	strd	r2, r3, [r1]
 800137c:	e06d      	b.n	800145a <MAX31865_Get_Temperature_math+0x172>
	} else {
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b52      	ldr	r3, [pc, #328]	; (80014cc <MAX31865_Get_Temperature_math+0x1e4>)
 8001384:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001388:	f006 f8b6 	bl	80074f8 <pow>
 800138c:	a340      	add	r3, pc, #256	; (adr r3, 8001490 <MAX31865_Get_Temperature_math+0x1a8>)
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	f7ff f8a1 	bl	80004d8 <__aeabi_dmul>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4614      	mov	r4, r2
 800139c:	461d      	mov	r5, r3
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b4b      	ldr	r3, [pc, #300]	; (80014d0 <MAX31865_Get_Temperature_math+0x1e8>)
 80013a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013a8:	f006 f8a6 	bl	80074f8 <pow>
 80013ac:	a33a      	add	r3, pc, #232	; (adr r3, 8001498 <MAX31865_Get_Temperature_math+0x1b0>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7ff f891 	bl	80004d8 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4620      	mov	r0, r4
 80013bc:	4629      	mov	r1, r5
 80013be:	f7fe fed3 	bl	8000168 <__aeabi_dsub>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4614      	mov	r4, r2
 80013c8:	461d      	mov	r5, r3
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <MAX31865_Get_Temperature_math+0x1ec>)
 80013d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013d4:	f006 f890 	bl	80074f8 <pow>
 80013d8:	a331      	add	r3, pc, #196	; (adr r3, 80014a0 <MAX31865_Get_Temperature_math+0x1b8>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7ff f87b 	bl	80004d8 <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4620      	mov	r0, r4
 80013e8:	4629      	mov	r1, r5
 80013ea:	f7fe febd 	bl	8000168 <__aeabi_dsub>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4614      	mov	r4, r2
 80013f4:	461d      	mov	r5, r3
				+ (double) 0.002320232987 * pow(PT100_Resistance, 2) + (double) 2.229927824035 * PT100_Resistance - (double) 242.090854986215;
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001402:	f006 f879 	bl	80074f8 <pow>
 8001406:	a328      	add	r3, pc, #160	; (adr r3, 80014a8 <MAX31865_Get_Temperature_math+0x1c0>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7ff f864 	bl	80004d8 <__aeabi_dmul>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4620      	mov	r0, r4
 8001416:	4629      	mov	r1, r5
 8001418:	f7fe fea8 	bl	800016c <__adddf3>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4614      	mov	r4, r2
 8001422:	461d      	mov	r5, r3
 8001424:	a322      	add	r3, pc, #136	; (adr r3, 80014b0 <MAX31865_Get_Temperature_math+0x1c8>)
 8001426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800142e:	f7ff f853 	bl	80004d8 <__aeabi_dmul>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f7fe fe97 	bl	800016c <__adddf3>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	a31c      	add	r3, pc, #112	; (adr r3, 80014b8 <MAX31865_Get_Temperature_math+0x1d0>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7fe fe8c 	bl	8000168 <__aeabi_dsub>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 8001454:	491c      	ldr	r1, [pc, #112]	; (80014c8 <MAX31865_Get_Temperature_math+0x1e0>)
 8001456:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return MAX31865_PT100_T;
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MAX31865_Get_Temperature_math+0x1e0>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bdb0      	pop	{r4, r5, r7, pc}
 800146a:	bf00      	nop
 800146c:	f3af 8000 	nop.w
 8001470:	ee19ce88 	.word	0xee19ce88
 8001474:	3ec360af 	.word	0x3ec360af
 8001478:	dfc928d8 	.word	0xdfc928d8
 800147c:	3ef0044c 	.word	0x3ef0044c
 8001480:	4aed641c 	.word	0x4aed641c
 8001484:	3f700226 	.word	0x3f700226
 8001488:	ee19ce88 	.word	0xee19ce88
 800148c:	beb360af 	.word	0xbeb360af
 8001490:	e63e6cde 	.word	0xe63e6cde
 8001494:	3df28de3 	.word	0x3df28de3
 8001498:	5d50ae3a 	.word	0x5d50ae3a
 800149c:	3e71c852 	.word	0x3e71c852
 80014a0:	6e664b7f 	.word	0x6e664b7f
 80014a4:	3e88c80b 	.word	0x3e88c80b
 80014a8:	998b63de 	.word	0x998b63de
 80014ac:	3f6301e1 	.word	0x3f6301e1
 80014b0:	66255dbb 	.word	0x66255dbb
 80014b4:	4001d6e4 	.word	0x4001d6e4
 80014b8:	48b74f1a 	.word	0x48b74f1a
 80014bc:	406e42e8 	.word	0x406e42e8
 80014c0:	40590000 	.word	0x40590000
 80014c4:	3ff00000 	.word	0x3ff00000
 80014c8:	20000240 	.word	0x20000240
 80014cc:	40140000 	.word	0x40140000
 80014d0:	40100000 	.word	0x40100000
 80014d4:	40080000 	.word	0x40080000

080014d8 <Lcd_Init>:
 
 /**
 ** Initialization LCD 16x2
 **/
void Lcd_Init(void) 
{  
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	    Lcd_configure();
 80014dc:	f000 f8b0 	bl	8001640 <Lcd_configure>
			lcd_write_command(0x33);
 80014e0:	2033      	movs	r0, #51	; 0x33
 80014e2:	f000 f955 	bl	8001790 <lcd_write_command>
			lcd_write_command(0x32);
 80014e6:	2032      	movs	r0, #50	; 0x32
 80014e8:	f000 f952 	bl	8001790 <lcd_write_command>
			lcd_write_command(FUNCTION_SET | OPT_N);				// 4-bit mode
 80014ec:	2028      	movs	r0, #40	; 0x28
 80014ee:	f000 f94f 	bl	8001790 <lcd_write_command>
	    lcd_write_command(CLEAR_DISPLAY);						          // Clear screen
 80014f2:	2001      	movs	r0, #1
 80014f4:	f000 f94c 	bl	8001790 <lcd_write_command>
	    lcd_write_command(DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80014f8:	200c      	movs	r0, #12
 80014fa:	f000 f949 	bl	8001790 <lcd_write_command>
    	lcd_write_command(ENTRY_MODE_SET | OPT_INC);			    // Increment cursor
 80014fe:	2006      	movs	r0, #6
 8001500:	f000 f946 	bl	8001790 <lcd_write_command>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <Lcd_write_int>:

/**
 * Write a interger variable on the LCD
 */
void Lcd_write_int(int number)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4906      	ldr	r1, [pc, #24]	; (8001530 <Lcd_write_int+0x28>)
 8001518:	4618      	mov	r0, r3
 800151a:	f003 fd73 	bl	8005004 <siprintf>
	Lcd_write_string(buffer);
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f806 	bl	8001534 <Lcd_write_string>
}
 8001528:	bf00      	nop
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	08008320 	.word	0x08008320

08001534 <Lcd_write_string>:

/**
 * Write a string on the LCD
 */
void Lcd_write_string(char * string)
{
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++)
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	e009      	b.n	8001556 <Lcd_write_string+0x22>
	{
		lcd_write_data( string[i]);
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f940 	bl	80017d0 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	3301      	adds	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	7bfc      	ldrb	r4, [r7, #15]
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7fe fdf9 	bl	8000150 <strlen>
 800155e:	4603      	mov	r3, r0
 8001560:	429c      	cmp	r4, r3
 8001562:	d3ee      	bcc.n	8001542 <Lcd_write_string+0xe>
	}
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}

0800156e <Lcd_clear_display>:

/**
 * Clear the screen
 */
void Lcd_clear_display(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	af00      	add	r7, sp, #0
	lcd_write_command(CLEAR_DISPLAY);
 8001572:	2001      	movs	r0, #1
 8001574:	f000 f90c 	bl	8001790 <lcd_write_command>
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <Lcd_create_custom_char>:

/****
** create a custom char to location
****/
void Lcd_create_custom_char(uint8_t location, uint8_t* data_bytes)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	// We only have 8 locations 0-7 for custom chars
	location &= 0x07; 
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	71fb      	strb	r3, [r7, #7]
	// Set CGRAM address
	lcd_write_command(SET_CGRAM_ADDRESS | (location << 3));
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	b25b      	sxtb	r3, r3
 8001596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800159a:	b25b      	sxtb	r3, r3
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f8f6 	bl	8001790 <lcd_write_command>
	
	// Write 8 bytes custom char pattern
	for (i = 0; i < 8; i++) 
 80015a4:	2300      	movs	r3, #0
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	e009      	b.n	80015be <Lcd_create_custom_char+0x42>
	{
		lcd_write_data(data_bytes[i]);
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f90c 	bl	80017d0 <lcd_write_data>
	for (i = 0; i < 8; i++) 
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	3301      	adds	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	2b07      	cmp	r3, #7
 80015c2:	d9f2      	bls.n	80015aa <Lcd_create_custom_char+0x2e>
	}
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <Lcd_gotoxy>:
/*****
 **go to x,y
 *****/

void Lcd_gotoxy( uint8_t x, uint8_t y)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	460a      	mov	r2, r1
 80015d8:	71fb      	strb	r3, [r7, #7]
 80015da:	4613      	mov	r3, r2
 80015dc:	71bb      	strb	r3, [r7, #6]
#if LINES == 1 
	lcdwrite_command(LCDSET_DDRAM_ADDRESS |
		(START_LINE_1 + x));
#elif LINES == 2
	if (y == 0)
 80015de:	79bb      	ldrb	r3, [r7, #6]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d107      	bne.n	80015f4 <Lcd_gotoxy+0x26>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_1 + x));
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 f8cf 	bl	8001790 <lcd_write_command>
	else
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
#endif
}
 80015f2:	e00a      	b.n	800160a <Lcd_gotoxy+0x3c>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	3340      	adds	r3, #64	; 0x40
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001600:	b25b      	sxtb	r3, r3
 8001602:	b2db      	uxtb	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f8c3 	bl	8001790 <lcd_write_command>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <Lcd_write_custom_char>:

/****
** write custom char to x,y on the LCD
*****/
void Lcd_write_custom_char( uint8_t x, uint8_t y, uint8_t location)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	71fb      	strb	r3, [r7, #7]
 800161c:	460b      	mov	r3, r1
 800161e:	71bb      	strb	r3, [r7, #6]
 8001620:	4613      	mov	r3, r2
 8001622:	717b      	strb	r3, [r7, #5]
	Lcd_gotoxy( x,y);
 8001624:	79ba      	ldrb	r2, [r7, #6]
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ffcf 	bl	80015ce <Lcd_gotoxy>
	lcd_write_data(location);
 8001630:	797b      	ldrb	r3, [r7, #5]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f8cc 	bl	80017d0 <lcd_write_data>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <Lcd_configure>:
* * *                                  Static function definition                                * * *
* * *                                           NO USE                                           * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

 void Lcd_configure(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
	// GPIO clock for control and data lines
	
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	4b4b      	ldr	r3, [pc, #300]	; (8001784 <Lcd_configure+0x144>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a4a      	ldr	r2, [pc, #296]	; (8001784 <Lcd_configure+0x144>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b48      	ldr	r3, [pc, #288]	; (8001784 <Lcd_configure+0x144>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800166c:	4b45      	ldr	r3, [pc, #276]	; (8001784 <Lcd_configure+0x144>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a44      	ldr	r2, [pc, #272]	; (8001784 <Lcd_configure+0x144>)
 8001672:	f043 0308 	orr.w	r3, r3, #8
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b42      	ldr	r3, [pc, #264]	; (8001784 <Lcd_configure+0x144>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001684:	4b3f      	ldr	r3, [pc, #252]	; (8001784 <Lcd_configure+0x144>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a3e      	ldr	r2, [pc, #248]	; (8001784 <Lcd_configure+0x144>)
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b3c      	ldr	r3, [pc, #240]	; (8001784 <Lcd_configure+0x144>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
	
	// Configure RS_PIN
	GPIO_InitStruct.Pin = RS_Pin;
 800169c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	4619      	mov	r1, r3
 80016b4:	4834      	ldr	r0, [pc, #208]	; (8001788 <Lcd_configure+0x148>)
 80016b6:	f001 fa1f 	bl	8002af8 <HAL_GPIO_Init>
	
		// Configure EN_PIN
	GPIO_InitStruct.Pin = EN_Pin;
 80016ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	4619      	mov	r1, r3
 80016d2:	482d      	ldr	r0, [pc, #180]	; (8001788 <Lcd_configure+0x148>)
 80016d4:	f001 fa10 	bl	8002af8 <HAL_GPIO_Init>
	
	
	 //Configure RW_PIN
	
	GPIO_InitStruct.Pin = RW_Pin;
 80016d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RW_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 0310 	add.w	r3, r7, #16
 80016ee:	4619      	mov	r1, r3
 80016f0:	4825      	ldr	r0, [pc, #148]	; (8001788 <Lcd_configure+0x148>)
 80016f2:	f001 fa01 	bl	8002af8 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(RW_GPIO_Port,RW_Pin,GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016fc:	4822      	ldr	r0, [pc, #136]	; (8001788 <Lcd_configure+0x148>)
 80016fe:	f001 fb96 	bl	8002e2e <HAL_GPIO_WritePin>
 
 
	// Configure D4_PIN
	GPIO_InitStruct.Pin = D4_Pin;
 8001702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001706:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	481c      	ldr	r0, [pc, #112]	; (800178c <Lcd_configure+0x14c>)
 800171c:	f001 f9ec 	bl	8002af8 <HAL_GPIO_Init>
	
	// Configure D5_PIN
	GPIO_InitStruct.Pin = D5_Pin;
 8001720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001724:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 0310 	add.w	r3, r7, #16
 8001736:	4619      	mov	r1, r3
 8001738:	4814      	ldr	r0, [pc, #80]	; (800178c <Lcd_configure+0x14c>)
 800173a:	f001 f9dd 	bl	8002af8 <HAL_GPIO_Init>
	
	// Configure D6_PIN
	GPIO_InitStruct.Pin = D6_Pin;
 800173e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001742:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	4619      	mov	r1, r3
 8001756:	480d      	ldr	r0, [pc, #52]	; (800178c <Lcd_configure+0x14c>)
 8001758:	f001 f9ce 	bl	8002af8 <HAL_GPIO_Init>
	
	// Configure D7_PIN
	GPIO_InitStruct.Pin = D7_Pin;
 800175c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001760:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 0310 	add.w	r3, r7, #16
 8001772:	4619      	mov	r1, r3
 8001774:	4805      	ldr	r0, [pc, #20]	; (800178c <Lcd_configure+0x14c>)
 8001776:	f001 f9bf 	bl	8002af8 <HAL_GPIO_Init>
	
}
 800177a:	bf00      	nop
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	40011000 	.word	0x40011000
 800178c:	40010c00 	.word	0x40010c00

08001790 <lcd_write_command>:


void lcd_write_command(uint8_t command)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_COMMAND_REG);		// Write to command register
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a0:	480a      	ldr	r0, [pc, #40]	; (80017cc <lcd_write_command+0x3c>)
 80017a2:	f001 fb44 	bl	8002e2e <HAL_GPIO_WritePin>

		lcd_write((command >> 4), LCD_NIB);
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2104      	movs	r1, #4
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f82e 	bl	8001810 <lcd_write>
		lcd_write(command & 0x0F, LCD_NIB);
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2104      	movs	r1, #4
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f826 	bl	8001810 <lcd_write>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40011000 	.word	0x40011000

080017d0 <lcd_write_data>:


void lcd_write_data( uint8_t data)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_DATA_REG);			// Write to data register
 80017da:	2201      	movs	r2, #1
 80017dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e0:	480a      	ldr	r0, [pc, #40]	; (800180c <lcd_write_data+0x3c>)
 80017e2:	f001 fb24 	bl	8002e2e <HAL_GPIO_WritePin>
		
	  lcd_write(data >> 4, LCD_NIB);
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2104      	movs	r1, #4
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f80e 	bl	8001810 <lcd_write>
		lcd_write(data & 0x0F, LCD_NIB);
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2104      	movs	r1, #4
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f806 	bl	8001810 <lcd_write>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40011000 	.word	0x40011000

08001810 <lcd_write>:


void lcd_write( uint8_t data, uint8_t LENG)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	460a      	mov	r2, r1
 800181a:	71fb      	strb	r3, [r7, #7]
 800181c:	4613      	mov	r3, r2
 800181e:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < LENG; i++)
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]
 8001824:	e023      	b.n	800186e <lcd_write+0x5e>
	{
		if( ((data >> i) & 0x01) == 0)
 8001826:	79fa      	ldrb	r2, [r7, #7]
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	fa42 f303 	asr.w	r3, r2, r3
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10c      	bne.n	8001850 <lcd_write+0x40>
	   	HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	4a18      	ldr	r2, [pc, #96]	; (800189c <lcd_write+0x8c>)
 800183a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <lcd_write+0x90>)
 8001842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001846:	2200      	movs	r2, #0
 8001848:	4619      	mov	r1, r3
 800184a:	f001 faf0 	bl	8002e2e <HAL_GPIO_WritePin>
 800184e:	e00b      	b.n	8001868 <lcd_write+0x58>
		else
			HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);	
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <lcd_write+0x8c>)
 8001854:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <lcd_write+0x90>)
 800185c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001860:	2201      	movs	r2, #1
 8001862:	4619      	mov	r1, r3
 8001864:	f001 fae3 	bl	8002e2e <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LENG; i++)
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	3301      	adds	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	79bb      	ldrb	r3, [r7, #6]
 8001872:	429a      	cmp	r2, r3
 8001874:	d3d7      	bcc.n	8001826 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8001876:	2201      	movs	r2, #1
 8001878:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800187c:	4809      	ldr	r0, [pc, #36]	; (80018a4 <lcd_write+0x94>)
 800187e:	f001 fad6 	bl	8002e2e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001882:	2001      	movs	r0, #1
 8001884:	f000 ffda 	bl	800283c <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET); 		// Data receive on falling edge
 8001888:	2200      	movs	r2, #0
 800188a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <lcd_write+0x94>)
 8001890:	f001 facd 	bl	8002e2e <HAL_GPIO_WritePin>
}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000010 	.word	0x20000010
 80018a4:	40011000 	.word	0x40011000

080018a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80018ac:	f000 ff64 	bl	8002778 <HAL_Init>

  /* USER CODE BEGIN Init */
  Lcd_Init();
 80018b0:	f7ff fe12 	bl	80014d8 <Lcd_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b4:	f000 fa06 	bl	8001cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b8:	f000 facc 	bl	8001e54 <MX_GPIO_Init>
  MX_SPI1_Init();
 80018bc:	f000 fa48 	bl	8001d50 <MX_SPI1_Init>
  MX_TIM2_Init();
 80018c0:	f000 fa7c 	bl	8001dbc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
Lcd_clear_display();
 80018c4:	f7ff fe53 	bl	800156e <Lcd_clear_display>
//Lcd_write_string("Khanh dep trai");
//HAL_Delay(500);
MAX31865_Init(3);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f7ff fc27 	bl	800111c <MAX31865_Init>
Lcd_create_custom_char(0, doC);
 80018ce:	49a9      	ldr	r1, [pc, #676]	; (8001b74 <main+0x2cc>)
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7ff fe53 	bl	800157c <Lcd_create_custom_char>
Lcd_create_custom_char(1, pixeltemp);
 80018d6:	49a8      	ldr	r1, [pc, #672]	; (8001b78 <main+0x2d0>)
 80018d8:	2001      	movs	r0, #1
 80018da:	f7ff fe4f 	bl	800157c <Lcd_create_custom_char>
HAL_TIM_Base_Start(&htim2);
 80018de:	48a7      	ldr	r0, [pc, #668]	; (8001b7c <main+0x2d4>)
 80018e0:	f002 fc96 	bl	8004210 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Lcd_gotoxy(1, 0);
 80018e4:	2100      	movs	r1, #0
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff fe71 	bl	80015ce <Lcd_gotoxy>
	  Lcd_write_string("BUONG AP TRUNG");
 80018ec:	48a4      	ldr	r0, [pc, #656]	; (8001b80 <main+0x2d8>)
 80018ee:	f7ff fe21 	bl	8001534 <Lcd_write_string>
	  Lcd_gotoxy(1, 1);
 80018f2:	2101      	movs	r1, #1
 80018f4:	2001      	movs	r0, #1
 80018f6:	f7ff fe6a 	bl	80015ce <Lcd_gotoxy>
	  Lcd_write_string("TUAN AP");
 80018fa:	48a2      	ldr	r0, [pc, #648]	; (8001b84 <main+0x2dc>)
 80018fc:	f7ff fe1a 	bl	8001534 <Lcd_write_string>
	  Lcd_gotoxy(9, 1);
 8001900:	2101      	movs	r1, #1
 8001902:	2009      	movs	r0, #9
 8001904:	f7ff fe63 	bl	80015ce <Lcd_gotoxy>
	  Lcd_write_string("|");
 8001908:	489f      	ldr	r0, [pc, #636]	; (8001b88 <main+0x2e0>)
 800190a:	f7ff fe13 	bl	8001534 <Lcd_write_string>
	  Lcd_gotoxy(11, 1);
 800190e:	2101      	movs	r1, #1
 8001910:	200b      	movs	r0, #11
 8001912:	f7ff fe5c 	bl	80015ce <Lcd_gotoxy>
	  Lcd_write_string("MODE");
 8001916:	489d      	ldr	r0, [pc, #628]	; (8001b8c <main+0x2e4>)
 8001918:	f7ff fe0c 	bl	8001534 <Lcd_write_string>
		  if(TUANAP == 0)
 800191c:	2102      	movs	r1, #2
 800191e:	489c      	ldr	r0, [pc, #624]	; (8001b90 <main+0x2e8>)
 8001920:	f001 fa6e 	bl	8002e00 <HAL_GPIO_ReadPin>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10c      	bne.n	8001944 <main+0x9c>
			  {
				  while(TUANAP==0);
 800192a:	bf00      	nop
 800192c:	2102      	movs	r1, #2
 800192e:	4898      	ldr	r0, [pc, #608]	; (8001b90 <main+0x2e8>)
 8001930:	f001 fa66 	bl	8002e00 <HAL_GPIO_ReadPin>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f8      	beq.n	800192c <main+0x84>
				  Lcd_clear_display();
 800193a:	f7ff fe18 	bl	800156e <Lcd_clear_display>
				  tuanap = 1;
 800193e:	4b95      	ldr	r3, [pc, #596]	; (8001b94 <main+0x2ec>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
			  }
		  if(MODE == 0)
 8001944:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001948:	4891      	ldr	r0, [pc, #580]	; (8001b90 <main+0x2e8>)
 800194a:	f001 fa59 	bl	8002e00 <HAL_GPIO_ReadPin>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d17c      	bne.n	8001a4e <main+0x1a6>
		  {
			  while(MODE ==0);
 8001954:	bf00      	nop
 8001956:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800195a:	488d      	ldr	r0, [pc, #564]	; (8001b90 <main+0x2e8>)
 800195c:	f001 fa50 	bl	8002e00 <HAL_GPIO_ReadPin>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f7      	beq.n	8001956 <main+0xae>
			  Lcd_clear_display();
 8001966:	f7ff fe02 	bl	800156e <Lcd_clear_display>
			  mode = 1;
 800196a:	4b8b      	ldr	r3, [pc, #556]	; (8001b98 <main+0x2f0>)
 800196c:	2201      	movs	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]
			  Lcd_gotoxy(1,0);
 8001970:	2100      	movs	r1, #0
 8001972:	2001      	movs	r0, #1
 8001974:	f7ff fe2b 	bl	80015ce <Lcd_gotoxy>
			  Lcd_write_string("CAI DAT: ");
 8001978:	4888      	ldr	r0, [pc, #544]	; (8001b9c <main+0x2f4>)
 800197a:	f7ff fddb 	bl	8001534 <Lcd_write_string>
			  Lcd_gotoxy(11,0);
 800197e:	2100      	movs	r1, #0
 8001980:	200b      	movs	r0, #11
 8001982:	f7ff fe24 	bl	80015ce <Lcd_gotoxy>
			  Lcd_write_int(setpoint);
 8001986:	4b86      	ldr	r3, [pc, #536]	; (8001ba0 <main+0x2f8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fba0 	bl	80010d0 <__aeabi_f2iz>
 8001990:	4603      	mov	r3, r0
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fdb8 	bl	8001508 <Lcd_write_int>
			  Lcd_write_custom_char(13, 0, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	200d      	movs	r0, #13
 800199e:	f7ff fe38 	bl	8001612 <Lcd_write_custom_char>
			  Lcd_gotoxy(14,0);
 80019a2:	2100      	movs	r1, #0
 80019a4:	200e      	movs	r0, #14
 80019a6:	f7ff fe12 	bl	80015ce <Lcd_gotoxy>
			  Lcd_write_string("C");
 80019aa:	487e      	ldr	r0, [pc, #504]	; (8001ba4 <main+0x2fc>)
 80019ac:	f7ff fdc2 	bl	8001534 <Lcd_write_string>
		  }
		  while(mode == 1)
 80019b0:	e04d      	b.n	8001a4e <main+0x1a6>
		  {
			  Lcd_gotoxy(11,0);
 80019b2:	2100      	movs	r1, #0
 80019b4:	200b      	movs	r0, #11
 80019b6:	f7ff fe0a 	bl	80015ce <Lcd_gotoxy>
			  Lcd_write_int(setpoint);
 80019ba:	4b79      	ldr	r3, [pc, #484]	; (8001ba0 <main+0x2f8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fb86 	bl	80010d0 <__aeabi_f2iz>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fd9e 	bl	8001508 <Lcd_write_int>
			  Lcd_gotoxy(3,1);
 80019cc:	2101      	movs	r1, #1
 80019ce:	2003      	movs	r0, #3
 80019d0:	f7ff fdfd 	bl	80015ce <Lcd_gotoxy>
			  Lcd_write_string("START = OKE");
 80019d4:	4874      	ldr	r0, [pc, #464]	; (8001ba8 <main+0x300>)
 80019d6:	f7ff fdad 	bl	8001534 <Lcd_write_string>
			  if(OKE == 0)
 80019da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019de:	486c      	ldr	r0, [pc, #432]	; (8001b90 <main+0x2e8>)
 80019e0:	f001 fa0e 	bl	8002e00 <HAL_GPIO_ReadPin>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d131      	bne.n	8001a4e <main+0x1a6>
			  			  {
			  				  while(OKE ==0);
 80019ea:	bf00      	nop
 80019ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f0:	4867      	ldr	r0, [pc, #412]	; (8001b90 <main+0x2e8>)
 80019f2:	f001 fa05 	bl	8002e00 <HAL_GPIO_ReadPin>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f7      	beq.n	80019ec <main+0x144>
			  				  Lcd_clear_display();
 80019fc:	f7ff fdb7 	bl	800156e <Lcd_clear_display>
			  				  mode = 0;
 8001a00:	4b65      	ldr	r3, [pc, #404]	; (8001b98 <main+0x2f0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
			  				Lcd_gotoxy(1,1);
 8001a06:	2101      	movs	r1, #1
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f7ff fde0 	bl	80015ce <Lcd_gotoxy>
			  				Lcd_write_string("CAI DAT: ");
 8001a0e:	4863      	ldr	r0, [pc, #396]	; (8001b9c <main+0x2f4>)
 8001a10:	f7ff fd90 	bl	8001534 <Lcd_write_string>
			  				Lcd_gotoxy(10,1);
 8001a14:	2101      	movs	r1, #1
 8001a16:	200a      	movs	r0, #10
 8001a18:	f7ff fdd9 	bl	80015ce <Lcd_gotoxy>
			  				Lcd_write_int(setpoint);
 8001a1c:	4b60      	ldr	r3, [pc, #384]	; (8001ba0 <main+0x2f8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fb55 	bl	80010d0 <__aeabi_f2iz>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fd6d 	bl	8001508 <Lcd_write_int>
			  				Lcd_write_custom_char(13, 1, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2101      	movs	r1, #1
 8001a32:	200d      	movs	r0, #13
 8001a34:	f7ff fded 	bl	8001612 <Lcd_write_custom_char>
			  				Lcd_gotoxy(14,1);
 8001a38:	2101      	movs	r1, #1
 8001a3a:	200e      	movs	r0, #14
 8001a3c:	f7ff fdc7 	bl	80015ce <Lcd_gotoxy>
			  				Lcd_write_string("C");
 8001a40:	4858      	ldr	r0, [pc, #352]	; (8001ba4 <main+0x2fc>)
 8001a42:	f7ff fd77 	bl	8001534 <Lcd_write_string>
			  				  oke1 = 1;
 8001a46:	4b59      	ldr	r3, [pc, #356]	; (8001bac <main+0x304>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
			  				  break;
 8001a4c:	e003      	b.n	8001a56 <main+0x1ae>
		  while(mode == 1)
 8001a4e:	4b52      	ldr	r3, [pc, #328]	; (8001b98 <main+0x2f0>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1ad      	bne.n	80019b2 <main+0x10a>
			  			  }
		  }
		  while(oke1 ==1)
 8001a56:	e00e      	b.n	8001a76 <main+0x1ce>
		  {
			  PID_Temp();
 8001a58:	f000 fa8a 	bl	8001f70 <PID_Temp>
			  Lcd_gotoxy(10,1);
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	200a      	movs	r0, #10
 8001a60:	f7ff fdb5 	bl	80015ce <Lcd_gotoxy>
			  Lcd_write_int(setpoint);
 8001a64:	4b4e      	ldr	r3, [pc, #312]	; (8001ba0 <main+0x2f8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fb31 	bl	80010d0 <__aeabi_f2iz>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fd49 	bl	8001508 <Lcd_write_int>
		  while(oke1 ==1)
 8001a76:	4b4d      	ldr	r3, [pc, #308]	; (8001bac <main+0x304>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ec      	bne.n	8001a58 <main+0x1b0>
		  }
		  while(tuanap == 1)
 8001a7e:	e0fd      	b.n	8001c7c <main+0x3d4>
		  {
			  Lcd_gotoxy(0,0);
 8001a80:	2100      	movs	r1, #0
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7ff fda3 	bl	80015ce <Lcd_gotoxy>
			  Lcd_write_string("TUAN AP=");
 8001a88:	4849      	ldr	r0, [pc, #292]	; (8001bb0 <main+0x308>)
 8001a8a:	f7ff fd53 	bl	8001534 <Lcd_write_string>
			  Lcd_gotoxy(8,0);
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2008      	movs	r0, #8
 8001a92:	f7ff fd9c 	bl	80015ce <Lcd_gotoxy>
			  Lcd_write_int(sotuan);
 8001a96:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <main+0x30c>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fd34 	bl	8001508 <Lcd_write_int>
			  Lcd_gotoxy(9,0);
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2009      	movs	r0, #9
 8001aa4:	f7ff fd93 	bl	80015ce <Lcd_gotoxy>
			  Lcd_write_string("|");
 8001aa8:	4837      	ldr	r0, [pc, #220]	; (8001b88 <main+0x2e0>)
 8001aaa:	f7ff fd43 	bl	8001534 <Lcd_write_string>
			  Lcd_write_custom_char(10,0, 1);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	200a      	movs	r0, #10
 8001ab4:	f7ff fdad 	bl	8001612 <Lcd_write_custom_char>
			  Lcd_gotoxy(11,0);
 8001ab8:	2100      	movs	r1, #0
 8001aba:	200b      	movs	r0, #11
 8001abc:	f7ff fd87 	bl	80015ce <Lcd_gotoxy>
			  Lcd_write_string("=");
 8001ac0:	483d      	ldr	r0, [pc, #244]	; (8001bb8 <main+0x310>)
 8001ac2:	f7ff fd37 	bl	8001534 <Lcd_write_string>

			  Lcd_gotoxy(3,1);
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f7ff fd80 	bl	80015ce <Lcd_gotoxy>
			  Lcd_write_string("START = OKE");
 8001ace:	4836      	ldr	r0, [pc, #216]	; (8001ba8 <main+0x300>)
 8001ad0:	f7ff fd30 	bl	8001534 <Lcd_write_string>
			  if(TUANAP == 0)
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	482e      	ldr	r0, [pc, #184]	; (8001b90 <main+0x2e8>)
 8001ad8:	f001 f992 	bl	8002e00 <HAL_GPIO_ReadPin>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d114      	bne.n	8001b0c <main+0x264>
			  {
				  while(TUANAP==0);
 8001ae2:	bf00      	nop
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	482a      	ldr	r0, [pc, #168]	; (8001b90 <main+0x2e8>)
 8001ae8:	f001 f98a 	bl	8002e00 <HAL_GPIO_ReadPin>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f8      	beq.n	8001ae4 <main+0x23c>
				  sotuan++;
 8001af2:	4b30      	ldr	r3, [pc, #192]	; (8001bb4 <main+0x30c>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	3301      	adds	r3, #1
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <main+0x30c>)
 8001afc:	701a      	strb	r2, [r3, #0]
				  if(sotuan >3)
 8001afe:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <main+0x30c>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d902      	bls.n	8001b0c <main+0x264>
				  {
				  	sotuan = 1;
 8001b06:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <main+0x30c>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]

				  }


			  }
			  if(sotuan ==1)
 8001b0c:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <main+0x30c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d115      	bne.n	8001b40 <main+0x298>
			  {
			 	setpoint = 37.8;
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <main+0x2f8>)
 8001b16:	4a29      	ldr	r2, [pc, #164]	; (8001bbc <main+0x314>)
 8001b18:	601a      	str	r2, [r3, #0]
			 	Lcd_gotoxy(12,0);
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	200c      	movs	r0, #12
 8001b1e:	f7ff fd56 	bl	80015ce <Lcd_gotoxy>
			 	sprintf(chuoi1,"%.2f",setpoint);
 8001b22:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <main+0x2f8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fc7e 	bl	8000428 <__aeabi_f2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4923      	ldr	r1, [pc, #140]	; (8001bc0 <main+0x318>)
 8001b32:	4824      	ldr	r0, [pc, #144]	; (8001bc4 <main+0x31c>)
 8001b34:	f003 fa66 	bl	8005004 <siprintf>
			 	Lcd_write_string(chuoi1);
 8001b38:	4822      	ldr	r0, [pc, #136]	; (8001bc4 <main+0x31c>)
 8001b3a:	f7ff fcfb 	bl	8001534 <Lcd_write_string>
 8001b3e:	e05e      	b.n	8001bfe <main+0x356>
			 	}
			  else if(sotuan == 2)
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <main+0x30c>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d141      	bne.n	8001bcc <main+0x324>
			 	{
			 		setpoint = 37.5;
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <main+0x2f8>)
 8001b4a:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <main+0x320>)
 8001b4c:	601a      	str	r2, [r3, #0]
			 		Lcd_gotoxy(12,0);
 8001b4e:	2100      	movs	r1, #0
 8001b50:	200c      	movs	r0, #12
 8001b52:	f7ff fd3c 	bl	80015ce <Lcd_gotoxy>
			 		sprintf(chuoi1,"%.2f",setpoint);
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <main+0x2f8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fc64 	bl	8000428 <__aeabi_f2d>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4916      	ldr	r1, [pc, #88]	; (8001bc0 <main+0x318>)
 8001b66:	4817      	ldr	r0, [pc, #92]	; (8001bc4 <main+0x31c>)
 8001b68:	f003 fa4c 	bl	8005004 <siprintf>
			 		Lcd_write_string(chuoi1);
 8001b6c:	4815      	ldr	r0, [pc, #84]	; (8001bc4 <main+0x31c>)
 8001b6e:	f7ff fce1 	bl	8001534 <Lcd_write_string>
 8001b72:	e044      	b.n	8001bfe <main+0x356>
 8001b74:	20000030 	.word	0x20000030
 8001b78:	20000038 	.word	0x20000038
 8001b7c:	200002f4 	.word	0x200002f4
 8001b80:	08008324 	.word	0x08008324
 8001b84:	08008334 	.word	0x08008334
 8001b88:	0800833c 	.word	0x0800833c
 8001b8c:	08008340 	.word	0x08008340
 8001b90:	40010c00 	.word	0x40010c00
 8001b94:	20000271 	.word	0x20000271
 8001b98:	20000272 	.word	0x20000272
 8001b9c:	08008348 	.word	0x08008348
 8001ba0:	20000020 	.word	0x20000020
 8001ba4:	08008354 	.word	0x08008354
 8001ba8:	08008358 	.word	0x08008358
 8001bac:	20000274 	.word	0x20000274
 8001bb0:	08008364 	.word	0x08008364
 8001bb4:	2000001c 	.word	0x2000001c
 8001bb8:	08008370 	.word	0x08008370
 8001bbc:	42173333 	.word	0x42173333
 8001bc0:	08008374 	.word	0x08008374
 8001bc4:	20000260 	.word	0x20000260
 8001bc8:	42160000 	.word	0x42160000
			 	}
			 else if(sotuan == 3)
 8001bcc:	4b32      	ldr	r3, [pc, #200]	; (8001c98 <main+0x3f0>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d114      	bne.n	8001bfe <main+0x356>
			 	{
			 	setpoint = 37.2;
 8001bd4:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <main+0x3f4>)
 8001bd6:	4a32      	ldr	r2, [pc, #200]	; (8001ca0 <main+0x3f8>)
 8001bd8:	601a      	str	r2, [r3, #0]
			 	Lcd_gotoxy(12,0);
 8001bda:	2100      	movs	r1, #0
 8001bdc:	200c      	movs	r0, #12
 8001bde:	f7ff fcf6 	bl	80015ce <Lcd_gotoxy>
			 	sprintf(chuoi1,"%.2f",setpoint);
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <main+0x3f4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fc1e 	bl	8000428 <__aeabi_f2d>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	492c      	ldr	r1, [pc, #176]	; (8001ca4 <main+0x3fc>)
 8001bf2:	482d      	ldr	r0, [pc, #180]	; (8001ca8 <main+0x400>)
 8001bf4:	f003 fa06 	bl	8005004 <siprintf>
			 	Lcd_write_string(chuoi1);
 8001bf8:	482b      	ldr	r0, [pc, #172]	; (8001ca8 <main+0x400>)
 8001bfa:	f7ff fc9b 	bl	8001534 <Lcd_write_string>
			 	}
			  if(OKE == 0)
 8001bfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c02:	482a      	ldr	r0, [pc, #168]	; (8001cac <main+0x404>)
 8001c04:	f001 f8fc 	bl	8002e00 <HAL_GPIO_ReadPin>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d136      	bne.n	8001c7c <main+0x3d4>
			  {
				  while(OKE ==0);
 8001c0e:	bf00      	nop
 8001c10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c14:	4825      	ldr	r0, [pc, #148]	; (8001cac <main+0x404>)
 8001c16:	f001 f8f3 	bl	8002e00 <HAL_GPIO_ReadPin>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f7      	beq.n	8001c10 <main+0x368>
				  Lcd_clear_display();
 8001c20:	f7ff fca5 	bl	800156e <Lcd_clear_display>
				  tuanap = 0;
 8001c24:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <main+0x408>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
				  oke = 1;
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <main+0x40c>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
				  Lcd_gotoxy(0, 1);
 8001c30:	2101      	movs	r1, #1
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7ff fccb 	bl	80015ce <Lcd_gotoxy>
				  Lcd_write_string("SET_TEMP: ");
 8001c38:	481f      	ldr	r0, [pc, #124]	; (8001cb8 <main+0x410>)
 8001c3a:	f7ff fc7b 	bl	8001534 <Lcd_write_string>
				  Lcd_gotoxy(10,1);
 8001c3e:	2101      	movs	r1, #1
 8001c40:	200a      	movs	r0, #10
 8001c42:	f7ff fcc4 	bl	80015ce <Lcd_gotoxy>
				  sprintf(chuoi1,"%.1f",setpoint);
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <main+0x3f4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fbec 	bl	8000428 <__aeabi_f2d>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4919      	ldr	r1, [pc, #100]	; (8001cbc <main+0x414>)
 8001c56:	4814      	ldr	r0, [pc, #80]	; (8001ca8 <main+0x400>)
 8001c58:	f003 f9d4 	bl	8005004 <siprintf>
				  Lcd_write_string(chuoi1);
 8001c5c:	4812      	ldr	r0, [pc, #72]	; (8001ca8 <main+0x400>)
 8001c5e:	f7ff fc69 	bl	8001534 <Lcd_write_string>
				  Lcd_write_custom_char(14, 1, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2101      	movs	r1, #1
 8001c66:	200e      	movs	r0, #14
 8001c68:	f7ff fcd3 	bl	8001612 <Lcd_write_custom_char>
				  	Lcd_gotoxy(15,1);
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	200f      	movs	r0, #15
 8001c70:	f7ff fcad 	bl	80015ce <Lcd_gotoxy>
				  	Lcd_write_string("C");
 8001c74:	4812      	ldr	r0, [pc, #72]	; (8001cc0 <main+0x418>)
 8001c76:	f7ff fc5d 	bl	8001534 <Lcd_write_string>
				  break;
 8001c7a:	e004      	b.n	8001c86 <main+0x3de>
		  while(tuanap == 1)
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <main+0x408>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f47f aefd 	bne.w	8001a80 <main+0x1d8>
			  }
		  }
		  while(oke == 1)
 8001c86:	e001      	b.n	8001c8c <main+0x3e4>
		  {

			  PID_Temp();
 8001c88:	f000 f972 	bl	8001f70 <PID_Temp>
		  while(oke == 1)
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <main+0x40c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f9      	bne.n	8001c88 <main+0x3e0>
	  Lcd_gotoxy(1, 0);
 8001c94:	e626      	b.n	80018e4 <main+0x3c>
 8001c96:	bf00      	nop
 8001c98:	2000001c 	.word	0x2000001c
 8001c9c:	20000020 	.word	0x20000020
 8001ca0:	4214cccd 	.word	0x4214cccd
 8001ca4:	08008374 	.word	0x08008374
 8001ca8:	20000260 	.word	0x20000260
 8001cac:	40010c00 	.word	0x40010c00
 8001cb0:	20000271 	.word	0x20000271
 8001cb4:	20000273 	.word	0x20000273
 8001cb8:	0800837c 	.word	0x0800837c
 8001cbc:	08008388 	.word	0x08008388
 8001cc0:	08008354 	.word	0x08008354

08001cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b090      	sub	sp, #64	; 0x40
 8001cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cca:	f107 0318 	add.w	r3, r7, #24
 8001cce:	2228      	movs	r2, #40	; 0x28
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f002 fd2e 	bl	8004734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d02:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d08:	f107 0318 	add.w	r3, r7, #24
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f001 f8c9 	bl	8002ea4 <HAL_RCC_OscConfig>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001d18:	f000 fb7c 	bl	8002414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d1c:	230f      	movs	r3, #15
 8001d1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d20:	2302      	movs	r3, #2
 8001d22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	2102      	movs	r1, #2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 fb36 	bl	80033a8 <HAL_RCC_ClockConfig>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001d42:	f000 fb67 	bl	8002414 <Error_Handler>
  }
}
 8001d46:	bf00      	nop
 8001d48:	3740      	adds	r7, #64	; 0x40
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d56:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <MX_SPI1_Init+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d62:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d84:	2218      	movs	r2, #24
 8001d86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d9c:	220a      	movs	r2, #10
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001da2:	f001 fc5d 	bl	8003660 <HAL_SPI_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dac:	f000 fb32 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000029c 	.word	0x2000029c
 8001db8:	40013000 	.word	0x40013000

08001dbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc2:	f107 0308 	add.w	r3, r7, #8
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd0:	463b      	mov	r3, r7
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001dda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001de2:	2247      	movs	r2, #71	; 0x47
 8001de4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001dec:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001dee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001df2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e00:	4813      	ldr	r0, [pc, #76]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001e02:	f002 f9b5 	bl	8004170 <HAL_TIM_Base_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e0c:	f000 fb02 	bl	8002414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e16:	f107 0308 	add.w	r3, r7, #8
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	480c      	ldr	r0, [pc, #48]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001e1e:	f002 fa41 	bl	80042a4 <HAL_TIM_ConfigClockSource>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e28:	f000 faf4 	bl	8002414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e34:	463b      	mov	r3, r7
 8001e36:	4619      	mov	r1, r3
 8001e38:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001e3a:	f002 fbf3 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e44:	f000 fae6 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	200002f4 	.word	0x200002f4

08001e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e68:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <MX_GPIO_Init+0x108>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4a3b      	ldr	r2, [pc, #236]	; (8001f5c <MX_GPIO_Init+0x108>)
 8001e6e:	f043 0320 	orr.w	r3, r3, #32
 8001e72:	6193      	str	r3, [r2, #24]
 8001e74:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <MX_GPIO_Init+0x108>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0320 	and.w	r3, r3, #32
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e80:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <MX_GPIO_Init+0x108>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	4a35      	ldr	r2, [pc, #212]	; (8001f5c <MX_GPIO_Init+0x108>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	6193      	str	r3, [r2, #24]
 8001e8c:	4b33      	ldr	r3, [pc, #204]	; (8001f5c <MX_GPIO_Init+0x108>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e98:	4b30      	ldr	r3, [pc, #192]	; (8001f5c <MX_GPIO_Init+0x108>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a2f      	ldr	r2, [pc, #188]	; (8001f5c <MX_GPIO_Init+0x108>)
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <MX_GPIO_Init+0x108>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|firing_pin_Pin, GPIO_PIN_RESET);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f240 1101 	movw	r1, #257	; 0x101
 8001eb6:	482a      	ldr	r0, [pc, #168]	; (8001f60 <MX_GPIO_Init+0x10c>)
 8001eb8:	f000 ffb9 	bl	8002e2e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin firing_pin_Pin */
  GPIO_InitStruct.Pin = CS_Pin|firing_pin_Pin;
 8001ebc:	f240 1301 	movw	r3, #257	; 0x101
 8001ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ece:	f107 0310 	add.w	r3, r7, #16
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4822      	ldr	r0, [pc, #136]	; (8001f60 <MX_GPIO_Init+0x10c>)
 8001ed6:	f000 fe0f 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TANG_Pin GIAM_Pin */
  GPIO_InitStruct.Pin = TANG_Pin|GIAM_Pin;
 8001eda:	2318      	movs	r3, #24
 8001edc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ede:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <MX_GPIO_Init+0x110>)
 8001ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 0310 	add.w	r3, r7, #16
 8001eea:	4619      	mov	r1, r3
 8001eec:	481c      	ldr	r0, [pc, #112]	; (8001f60 <MX_GPIO_Init+0x10c>)
 8001eee:	f000 fe03 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : zero_coss_Pin */
  GPIO_InitStruct.Pin = zero_coss_Pin;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <MX_GPIO_Init+0x110>)
 8001ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(zero_coss_GPIO_Port, &GPIO_InitStruct);
 8001efe:	f107 0310 	add.w	r3, r7, #16
 8001f02:	4619      	mov	r1, r3
 8001f04:	4818      	ldr	r0, [pc, #96]	; (8001f68 <MX_GPIO_Init+0x114>)
 8001f06:	f000 fdf7 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Tuanap_Pin OKE_Pin MODE_Pin */
  GPIO_InitStruct.Pin = Tuanap_Pin|OKE_Pin|MODE_Pin;
 8001f0a:	f640 4302 	movw	r3, #3074	; 0xc02
 8001f0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f14:	2301      	movs	r3, #1
 8001f16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4812      	ldr	r0, [pc, #72]	; (8001f68 <MX_GPIO_Init+0x114>)
 8001f20:	f000 fdea 	bl	8002af8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2101      	movs	r1, #1
 8001f28:	2006      	movs	r0, #6
 8001f2a:	f000 fda0 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f2e:	2006      	movs	r0, #6
 8001f30:	f000 fdb9 	bl	8002aa6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2100      	movs	r1, #0
 8001f38:	2009      	movs	r0, #9
 8001f3a:	f000 fd98 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001f3e:	2009      	movs	r0, #9
 8001f40:	f000 fdb1 	bl	8002aa6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001f44:	2200      	movs	r2, #0
 8001f46:	2100      	movs	r1, #0
 8001f48:	200a      	movs	r0, #10
 8001f4a:	f000 fd90 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001f4e:	200a      	movs	r0, #10
 8001f50:	f000 fda9 	bl	8002aa6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f54:	bf00      	nop
 8001f56:	3720      	adds	r7, #32
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40010800 	.word	0x40010800
 8001f64:	10210000 	.word	0x10210000
 8001f68:	40010c00 	.word	0x40010c00
 8001f6c:	00000000 	.word	0x00000000

08001f70 <PID_Temp>:

/* USER CODE BEGIN 4 */
// ham PID nhietdo
void PID_Temp()
{
 8001f70:	b5b0      	push	{r4, r5, r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - thoigian >= 500) {
 8001f74:	f000 fc58 	bl	8002828 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b99      	ldr	r3, [pc, #612]	; (80021e0 <PID_Temp+0x270>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f84:	f0c0 80bc 	bcc.w	8002100 <PID_Temp+0x190>
			  timePrev = Time;
 8001f88:	4b96      	ldr	r3, [pc, #600]	; (80021e4 <PID_Temp+0x274>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a96      	ldr	r2, [pc, #600]	; (80021e8 <PID_Temp+0x278>)
 8001f8e:	6013      	str	r3, [r2, #0]
			  thoigian = HAL_GetTick();
 8001f90:	f000 fc4a 	bl	8002828 <HAL_GetTick>
 8001f94:	4603      	mov	r3, r0
 8001f96:	4a92      	ldr	r2, [pc, #584]	; (80021e0 <PID_Temp+0x270>)
 8001f98:	6013      	str	r3, [r2, #0]
		  			PT100_Temperature = MAX31865_Get_Temperature();
 8001f9a:	f7ff f939 	bl	8001210 <MAX31865_Get_Temperature>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fd6f 	bl	8000a88 <__aeabi_d2f>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4a8f      	ldr	r2, [pc, #572]	; (80021ec <PID_Temp+0x27c>)
 8001fae:	6013      	str	r3, [r2, #0]

		  			PID_error = setpoint - PT100_Temperature ;  //Calculate the pid ERROR
 8001fb0:	4b8f      	ldr	r3, [pc, #572]	; (80021f0 <PID_Temp+0x280>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a8d      	ldr	r2, [pc, #564]	; (80021ec <PID_Temp+0x27c>)
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fdb8 	bl	8000b30 <__aeabi_fsub>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b8b      	ldr	r3, [pc, #556]	; (80021f4 <PID_Temp+0x284>)
 8001fc6:	601a      	str	r2, [r3, #0]

		  			    if (PID_error > 3.1)  //integral constant will only affect errors below 30ºC
 8001fc8:	4b8a      	ldr	r3, [pc, #552]	; (80021f4 <PID_Temp+0x284>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fa2b 	bl	8000428 <__aeabi_f2d>
 8001fd2:	a37f      	add	r3, pc, #508	; (adr r3, 80021d0 <PID_Temp+0x260>)
 8001fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd8:	f7fe fd0e 	bl	80009f8 <__aeabi_dcmpgt>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <PID_Temp+0x7a>
		  			    { PID_i = 0; }
 8001fe2:	4b85      	ldr	r3, [pc, #532]	; (80021f8 <PID_Temp+0x288>)
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]

		  			    PID_p = kp * PID_error;            //Calculate the P value
 8001fea:	4b84      	ldr	r3, [pc, #528]	; (80021fc <PID_Temp+0x28c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fe54 	bl	8000c9c <__aeabi_i2f>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4b7f      	ldr	r3, [pc, #508]	; (80021f4 <PID_Temp+0x284>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	f7fe fea1 	bl	8000d44 <__aeabi_fmul>
 8002002:	4603      	mov	r3, r0
 8002004:	461a      	mov	r2, r3
 8002006:	4b7e      	ldr	r3, [pc, #504]	; (8002200 <PID_Temp+0x290>)
 8002008:	601a      	str	r2, [r3, #0]
		  			    PID_i = PID_i + (ki * PID_error);  //Calculate the I value
 800200a:	4b7e      	ldr	r3, [pc, #504]	; (8002204 <PID_Temp+0x294>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a79      	ldr	r2, [pc, #484]	; (80021f4 <PID_Temp+0x284>)
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fe95 	bl	8000d44 <__aeabi_fmul>
 800201a:	4603      	mov	r3, r0
 800201c:	461a      	mov	r2, r3
 800201e:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <PID_Temp+0x288>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4619      	mov	r1, r3
 8002024:	4610      	mov	r0, r2
 8002026:	f7fe fd85 	bl	8000b34 <__addsf3>
 800202a:	4603      	mov	r3, r0
 800202c:	461a      	mov	r2, r3
 800202e:	4b72      	ldr	r3, [pc, #456]	; (80021f8 <PID_Temp+0x288>)
 8002030:	601a      	str	r2, [r3, #0]
		  			   // timePrev = Time;                   // the previous time is stored before the actual time read
		  			    Time = HAL_GetTick();                   // actual time read
 8002032:	f000 fbf9 	bl	8002828 <HAL_GetTick>
 8002036:	4603      	mov	r3, r0
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fe2b 	bl	8000c94 <__aeabi_ui2f>
 800203e:	4603      	mov	r3, r0
 8002040:	4a68      	ldr	r2, [pc, #416]	; (80021e4 <PID_Temp+0x274>)
 8002042:	6013      	str	r3, [r2, #0]
		  			    elapsedTime = (Time - timePrev) / 1000;
 8002044:	4b67      	ldr	r3, [pc, #412]	; (80021e4 <PID_Temp+0x274>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a67      	ldr	r2, [pc, #412]	; (80021e8 <PID_Temp+0x278>)
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	4611      	mov	r1, r2
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fd6e 	bl	8000b30 <__aeabi_fsub>
 8002054:	4603      	mov	r3, r0
 8002056:	496c      	ldr	r1, [pc, #432]	; (8002208 <PID_Temp+0x298>)
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe ff27 	bl	8000eac <__aeabi_fdiv>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	4b6a      	ldr	r3, [pc, #424]	; (800220c <PID_Temp+0x29c>)
 8002064:	601a      	str	r2, [r3, #0]
		  			    PID_d = kd * ((PID_error - previous_error) / elapsedTime);  //Calculate the D value
 8002066:	4b6a      	ldr	r3, [pc, #424]	; (8002210 <PID_Temp+0x2a0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fe16 	bl	8000c9c <__aeabi_i2f>
 8002070:	4604      	mov	r4, r0
 8002072:	4b60      	ldr	r3, [pc, #384]	; (80021f4 <PID_Temp+0x284>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a67      	ldr	r2, [pc, #412]	; (8002214 <PID_Temp+0x2a4>)
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fd57 	bl	8000b30 <__aeabi_fsub>
 8002082:	4603      	mov	r3, r0
 8002084:	461a      	mov	r2, r3
 8002086:	4b61      	ldr	r3, [pc, #388]	; (800220c <PID_Temp+0x29c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4619      	mov	r1, r3
 800208c:	4610      	mov	r0, r2
 800208e:	f7fe ff0d 	bl	8000eac <__aeabi_fdiv>
 8002092:	4603      	mov	r3, r0
 8002094:	4619      	mov	r1, r3
 8002096:	4620      	mov	r0, r4
 8002098:	f7fe fe54 	bl	8000d44 <__aeabi_fmul>
 800209c:	4603      	mov	r3, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <PID_Temp+0x2a8>)
 80020a2:	601a      	str	r2, [r3, #0]
		  			    PID_value = PID_p + PID_i + PID_d;                          //Calculate total PID value
 80020a4:	4b56      	ldr	r3, [pc, #344]	; (8002200 <PID_Temp+0x290>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a53      	ldr	r2, [pc, #332]	; (80021f8 <PID_Temp+0x288>)
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	4611      	mov	r1, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fd40 	bl	8000b34 <__addsf3>
 80020b4:	4603      	mov	r3, r0
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b57      	ldr	r3, [pc, #348]	; (8002218 <PID_Temp+0x2a8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	4610      	mov	r0, r2
 80020c0:	f7fe fd38 	bl	8000b34 <__addsf3>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff f802 	bl	80010d0 <__aeabi_f2iz>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4a53      	ldr	r2, [pc, #332]	; (800221c <PID_Temp+0x2ac>)
 80020d0:	6013      	str	r3, [r2, #0]

		  			    //We define firing delay range between 0 and 8300. Read above why 8300!!!!!!!
		  			    if (PID_value < 0) { PID_value = 0; }
 80020d2:	4b52      	ldr	r3, [pc, #328]	; (800221c <PID_Temp+0x2ac>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	da02      	bge.n	80020e0 <PID_Temp+0x170>
 80020da:	4b50      	ldr	r3, [pc, #320]	; (800221c <PID_Temp+0x2ac>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
		  			    if (PID_value > 8300) { PID_value = 8300; }
 80020e0:	4b4e      	ldr	r3, [pc, #312]	; (800221c <PID_Temp+0x2ac>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f242 026c 	movw	r2, #8300	; 0x206c
 80020e8:	4293      	cmp	r3, r2
 80020ea:	dd03      	ble.n	80020f4 <PID_Temp+0x184>
 80020ec:	4b4b      	ldr	r3, [pc, #300]	; (800221c <PID_Temp+0x2ac>)
 80020ee:	f242 026c 	movw	r2, #8300	; 0x206c
 80020f2:	601a      	str	r2, [r3, #0]
		  			    realTemp_LCD();
 80020f4:	f000 f89e 	bl	8002234 <realTemp_LCD>
		  			  previous_error = PID_error;
 80020f8:	4b3e      	ldr	r3, [pc, #248]	; (80021f4 <PID_Temp+0x284>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a45      	ldr	r2, [pc, #276]	; (8002214 <PID_Temp+0x2a4>)
 80020fe:	6013      	str	r3, [r2, #0]
		  }
				  if (zero_cross_detected) {
 8002100:	4b47      	ldr	r3, [pc, #284]	; (8002220 <PID_Temp+0x2b0>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d060      	beq.n	80021ca <PID_Temp+0x25a>
					  delay_us(max_firing_delay - PID_value);
 8002108:	4b46      	ldr	r3, [pc, #280]	; (8002224 <PID_Temp+0x2b4>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b43      	ldr	r3, [pc, #268]	; (800221c <PID_Temp+0x2ac>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f966 	bl	80023e4 <delay_us>
					  if((PT100_Temperature >= setpoint-0.2)&& fix==0)
 8002118:	4b34      	ldr	r3, [pc, #208]	; (80021ec <PID_Temp+0x27c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe f983 	bl	8000428 <__aeabi_f2d>
 8002122:	4604      	mov	r4, r0
 8002124:	460d      	mov	r5, r1
 8002126:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <PID_Temp+0x280>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe f97c 	bl	8000428 <__aeabi_f2d>
 8002130:	a329      	add	r3, pc, #164	; (adr r3, 80021d8 <PID_Temp+0x268>)
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	f7fe f817 	bl	8000168 <__aeabi_dsub>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4620      	mov	r0, r4
 8002140:	4629      	mov	r1, r5
 8002142:	f7fe fc4f 	bl	80009e4 <__aeabi_dcmpge>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d016      	beq.n	800217a <PID_Temp+0x20a>
 800214c:	4b36      	ldr	r3, [pc, #216]	; (8002228 <PID_Temp+0x2b8>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	f083 0301 	eor.w	r3, r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00f      	beq.n	800217a <PID_Temp+0x20a>
			  					  {
			  						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002160:	4832      	ldr	r0, [pc, #200]	; (800222c <PID_Temp+0x2bc>)
 8002162:	f000 fe64 	bl	8002e2e <HAL_GPIO_WritePin>
			  						HAL_Delay(3000);
 8002166:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800216a:	f000 fb67 	bl	800283c <HAL_Delay>
			  						fix = 1;
 800216e:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <PID_Temp+0x2b8>)
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
			  						fix_oke = 1;
 8002174:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <PID_Temp+0x2c0>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
			  					  }
					  if(PT100_Temperature >= setpoint && fix_oke == 1){
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <PID_Temp+0x27c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <PID_Temp+0x280>)
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe ff8f 	bl	80010a8 <__aeabi_fcmpge>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <PID_Temp+0x236>
 8002190:	4b27      	ldr	r3, [pc, #156]	; (8002230 <PID_Temp+0x2c0>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <PID_Temp+0x236>
			  					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8002198:	2200      	movs	r2, #0
 800219a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800219e:	4823      	ldr	r0, [pc, #140]	; (800222c <PID_Temp+0x2bc>)
 80021a0:	f000 fe45 	bl	8002e2e <HAL_GPIO_WritePin>
 80021a4:	e005      	b.n	80021b2 <PID_Temp+0x242>
			  					  }else{HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);}
 80021a6:	2201      	movs	r2, #1
 80021a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ac:	481f      	ldr	r0, [pc, #124]	; (800222c <PID_Temp+0x2bc>)
 80021ae:	f000 fe3e 	bl	8002e2e <HAL_GPIO_WritePin>
			  			delay_us(100);
 80021b2:	2064      	movs	r0, #100	; 0x64
 80021b4:	f000 f916 	bl	80023e4 <delay_us>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80021b8:	2200      	movs	r2, #0
 80021ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021be:	481b      	ldr	r0, [pc, #108]	; (800222c <PID_Temp+0x2bc>)
 80021c0:	f000 fe35 	bl	8002e2e <HAL_GPIO_WritePin>
					  zero_cross_detected = 0;
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <PID_Temp+0x2b0>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]

				  }
}
 80021ca:	bf00      	nop
 80021cc:	bdb0      	pop	{r4, r5, r7, pc}
 80021ce:	bf00      	nop
 80021d0:	cccccccd 	.word	0xcccccccd
 80021d4:	4008cccc 	.word	0x4008cccc
 80021d8:	9999999a 	.word	0x9999999a
 80021dc:	3fc99999 	.word	0x3fc99999
 80021e0:	20000250 	.word	0x20000250
 80021e4:	20000284 	.word	0x20000284
 80021e8:	20000288 	.word	0x20000288
 80021ec:	2000024c 	.word	0x2000024c
 80021f0:	20000020 	.word	0x20000020
 80021f4:	20000278 	.word	0x20000278
 80021f8:	20000294 	.word	0x20000294
 80021fc:	20000024 	.word	0x20000024
 8002200:	20000290 	.word	0x20000290
 8002204:	20000028 	.word	0x20000028
 8002208:	447a0000 	.word	0x447a0000
 800220c:	20000280 	.word	0x20000280
 8002210:	2000002c 	.word	0x2000002c
 8002214:	2000027c 	.word	0x2000027c
 8002218:	20000298 	.word	0x20000298
 800221c:	2000028c 	.word	0x2000028c
 8002220:	20000270 	.word	0x20000270
 8002224:	20000018 	.word	0x20000018
 8002228:	20000275 	.word	0x20000275
 800222c:	40010800 	.word	0x40010800
 8002230:	20000276 	.word	0x20000276

08002234 <realTemp_LCD>:

void realTemp_LCD()
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	Lcd_write_custom_char(3,0, 1);
 8002238:	2201      	movs	r2, #1
 800223a:	2100      	movs	r1, #0
 800223c:	2003      	movs	r0, #3
 800223e:	f7ff f9e8 	bl	8001612 <Lcd_write_custom_char>
	Lcd_gotoxy(5,0);
 8002242:	2100      	movs	r1, #0
 8002244:	2005      	movs	r0, #5
 8002246:	f7ff f9c2 	bl	80015ce <Lcd_gotoxy>
	Lcd_write_string("=");
 800224a:	4811      	ldr	r0, [pc, #68]	; (8002290 <realTemp_LCD+0x5c>)
 800224c:	f7ff f972 	bl	8001534 <Lcd_write_string>
	Lcd_gotoxy(7,0);
 8002250:	2100      	movs	r1, #0
 8002252:	2007      	movs	r0, #7
 8002254:	f7ff f9bb 	bl	80015ce <Lcd_gotoxy>
	sprintf(chuoi,"%.2f",PT100_Temperature);
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <realTemp_LCD+0x60>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe f8e3 	bl	8000428 <__aeabi_f2d>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	490c      	ldr	r1, [pc, #48]	; (8002298 <realTemp_LCD+0x64>)
 8002268:	480c      	ldr	r0, [pc, #48]	; (800229c <realTemp_LCD+0x68>)
 800226a:	f002 fecb 	bl	8005004 <siprintf>
	Lcd_write_string(chuoi);
 800226e:	480b      	ldr	r0, [pc, #44]	; (800229c <realTemp_LCD+0x68>)
 8002270:	f7ff f960 	bl	8001534 <Lcd_write_string>
	Lcd_write_custom_char(12, 0, 0);
 8002274:	2200      	movs	r2, #0
 8002276:	2100      	movs	r1, #0
 8002278:	200c      	movs	r0, #12
 800227a:	f7ff f9ca 	bl	8001612 <Lcd_write_custom_char>
	Lcd_gotoxy(13,0);
 800227e:	2100      	movs	r1, #0
 8002280:	200d      	movs	r0, #13
 8002282:	f7ff f9a4 	bl	80015ce <Lcd_gotoxy>
	Lcd_write_string("C");
 8002286:	4806      	ldr	r0, [pc, #24]	; (80022a0 <realTemp_LCD+0x6c>)
 8002288:	f7ff f954 	bl	8001534 <Lcd_write_string>
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	08008370 	.word	0x08008370
 8002294:	2000024c 	.word	0x2000024c
 8002298:	08008374 	.word	0x08008374
 800229c:	20000254 	.word	0x20000254
 80022a0:	08008354 	.word	0x08008354

080022a4 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80022a8:	2001      	movs	r0, #1
 80022aa:	f000 fdd9 	bl	8002e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0)
 80022ae:	2101      	movs	r1, #1
 80022b0:	4807      	ldr	r0, [pc, #28]	; (80022d0 <EXTI0_IRQHandler+0x2c>)
 80022b2:	f000 fda5 	bl	8002e00 <HAL_GPIO_ReadPin>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <EXTI0_IRQHandler+0x28>
  {
	  zero_cross_detected = 1;
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <EXTI0_IRQHandler+0x30>)
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
	  cong++;
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <EXTI0_IRQHandler+0x34>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	4a03      	ldr	r2, [pc, #12]	; (80022d8 <EXTI0_IRQHandler+0x34>)
 80022ca:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40010c00 	.word	0x40010c00
 80022d4:	20000270 	.word	0x20000270
 80022d8:	2000026c 	.word	0x2000026c

080022dc <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TANG_Pin);
 80022e2:	2008      	movs	r0, #8
 80022e4:	f000 fdbc 	bl	8002e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  if(HAL_GPIO_ReadPin(GPIOA, TANG_Pin) == 0){
 80022e8:	2108      	movs	r1, #8
 80022ea:	4819      	ldr	r0, [pc, #100]	; (8002350 <EXTI3_IRQHandler+0x74>)
 80022ec:	f000 fd88 	bl	8002e00 <HAL_GPIO_ReadPin>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d128      	bne.n	8002348 <EXTI3_IRQHandler+0x6c>
    	for(int i = 500000; i>0; i--);
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <EXTI3_IRQHandler+0x78>)
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	e002      	b.n	8002302 <EXTI3_IRQHandler+0x26>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3b01      	subs	r3, #1
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	dcf9      	bgt.n	80022fc <EXTI3_IRQHandler+0x20>

    	if(HAL_GPIO_ReadPin(GPIOA, TANG_Pin) == 0){
 8002308:	2108      	movs	r1, #8
 800230a:	4811      	ldr	r0, [pc, #68]	; (8002350 <EXTI3_IRQHandler+0x74>)
 800230c:	f000 fd78 	bl	8002e00 <HAL_GPIO_ReadPin>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d118      	bne.n	8002348 <EXTI3_IRQHandler+0x6c>
    	  setpoint+=2;
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <EXTI3_IRQHandler+0x7c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fc08 	bl	8000b34 <__addsf3>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <EXTI3_IRQHandler+0x7c>)
 800232a:	601a      	str	r2, [r3, #0]

    	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <EXTI3_IRQHandler+0x80>)
 800232e:	2208      	movs	r2, #8
 8002330:	615a      	str	r2, [r3, #20]
    	 HAL_NVIC_ClearPendingIRQ(EXTI3_IRQn);
 8002332:	2009      	movs	r0, #9
 8002334:	f000 fbd1 	bl	8002ada <HAL_NVIC_ClearPendingIRQ>
    	 while(HAL_GPIO_ReadPin(GPIOA, TANG_Pin) == 0);
 8002338:	bf00      	nop
 800233a:	2108      	movs	r1, #8
 800233c:	4804      	ldr	r0, [pc, #16]	; (8002350 <EXTI3_IRQHandler+0x74>)
 800233e:	f000 fd5f 	bl	8002e00 <HAL_GPIO_ReadPin>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f8      	beq.n	800233a <EXTI3_IRQHandler+0x5e>

    }
    }
  /* USER CODE END EXTI3_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40010800 	.word	0x40010800
 8002354:	0007a120 	.word	0x0007a120
 8002358:	20000020 	.word	0x20000020
 800235c:	40010400 	.word	0x40010400

08002360 <EXTI4_IRQHandler>:
/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GIAM_Pin);
 8002366:	2010      	movs	r0, #16
 8002368:	f000 fd7a 	bl	8002e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if(HAL_GPIO_ReadPin(GPIOA, GIAM_Pin) == 0){
 800236c:	2110      	movs	r1, #16
 800236e:	4819      	ldr	r0, [pc, #100]	; (80023d4 <EXTI4_IRQHandler+0x74>)
 8002370:	f000 fd46 	bl	8002e00 <HAL_GPIO_ReadPin>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d128      	bne.n	80023cc <EXTI4_IRQHandler+0x6c>
  	for(int i = 500000; i>0; i--);
 800237a:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <EXTI4_IRQHandler+0x78>)
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	e002      	b.n	8002386 <EXTI4_IRQHandler+0x26>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	dcf9      	bgt.n	8002380 <EXTI4_IRQHandler+0x20>

  	if(HAL_GPIO_ReadPin(GPIOA, GIAM_Pin) == 0){
 800238c:	2110      	movs	r1, #16
 800238e:	4811      	ldr	r0, [pc, #68]	; (80023d4 <EXTI4_IRQHandler+0x74>)
 8002390:	f000 fd36 	bl	8002e00 <HAL_GPIO_ReadPin>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d118      	bne.n	80023cc <EXTI4_IRQHandler+0x6c>
  	  setpoint-=2;
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <EXTI4_IRQHandler+0x7c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fbc4 	bl	8000b30 <__aeabi_fsub>
 80023a8:	4603      	mov	r3, r0
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <EXTI4_IRQHandler+0x7c>)
 80023ae:	601a      	str	r2, [r3, #0]

  	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <EXTI4_IRQHandler+0x80>)
 80023b2:	2210      	movs	r2, #16
 80023b4:	615a      	str	r2, [r3, #20]
  	 HAL_NVIC_ClearPendingIRQ(EXTI4_IRQn);
 80023b6:	200a      	movs	r0, #10
 80023b8:	f000 fb8f 	bl	8002ada <HAL_NVIC_ClearPendingIRQ>
  	 while(HAL_GPIO_ReadPin(GPIOA, GIAM_Pin) == 0);
 80023bc:	bf00      	nop
 80023be:	2110      	movs	r1, #16
 80023c0:	4804      	ldr	r0, [pc, #16]	; (80023d4 <EXTI4_IRQHandler+0x74>)
 80023c2:	f000 fd1d 	bl	8002e00 <HAL_GPIO_ReadPin>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f8      	beq.n	80023be <EXTI4_IRQHandler+0x5e>

  }
  }
  /* USER CODE END EXTI4_IRQn 1 */
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40010800 	.word	0x40010800
 80023d8:	0007a120 	.word	0x0007a120
 80023dc:	20000020 	.word	0x20000020
 80023e0:	40010400 	.word	0x40010400

080023e4 <delay_us>:
void delay_us (uint16_t us)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <delay_us+0x2c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2200      	movs	r2, #0
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 80023f6:	bf00      	nop
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <delay_us+0x2c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	429a      	cmp	r2, r3
 8002402:	d3f9      	bcc.n	80023f8 <delay_us+0x14>
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	200002f4 	.word	0x200002f4

08002414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002418:	b672      	cpsid	i
}
 800241a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800241c:	e7fe      	b.n	800241c <Error_Handler+0x8>
	...

08002420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002426:	4b15      	ldr	r3, [pc, #84]	; (800247c <HAL_MspInit+0x5c>)
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	4a14      	ldr	r2, [pc, #80]	; (800247c <HAL_MspInit+0x5c>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6193      	str	r3, [r2, #24]
 8002432:	4b12      	ldr	r3, [pc, #72]	; (800247c <HAL_MspInit+0x5c>)
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	4b0f      	ldr	r3, [pc, #60]	; (800247c <HAL_MspInit+0x5c>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4a0e      	ldr	r2, [pc, #56]	; (800247c <HAL_MspInit+0x5c>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002448:	61d3      	str	r3, [r2, #28]
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <HAL_MspInit+0x5c>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	607b      	str	r3, [r7, #4]
 8002454:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_MspInit+0x60>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	4a04      	ldr	r2, [pc, #16]	; (8002480 <HAL_MspInit+0x60>)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	40021000 	.word	0x40021000
 8002480:	40010000 	.word	0x40010000

08002484 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0310 	add.w	r3, r7, #16
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a1b      	ldr	r2, [pc, #108]	; (800250c <HAL_SPI_MspInit+0x88>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d12f      	bne.n	8002504 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024a4:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <HAL_SPI_MspInit+0x8c>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	4a19      	ldr	r2, [pc, #100]	; (8002510 <HAL_SPI_MspInit+0x8c>)
 80024aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024ae:	6193      	str	r3, [r2, #24]
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_SPI_MspInit+0x8c>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <HAL_SPI_MspInit+0x8c>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	4a13      	ldr	r2, [pc, #76]	; (8002510 <HAL_SPI_MspInit+0x8c>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	6193      	str	r3, [r2, #24]
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_SPI_MspInit+0x8c>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80024d4:	23a0      	movs	r3, #160	; 0xa0
 80024d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024dc:	2303      	movs	r3, #3
 80024de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	4619      	mov	r1, r3
 80024e6:	480b      	ldr	r0, [pc, #44]	; (8002514 <HAL_SPI_MspInit+0x90>)
 80024e8:	f000 fb06 	bl	8002af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024ec:	2340      	movs	r3, #64	; 0x40
 80024ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	4619      	mov	r1, r3
 80024fe:	4805      	ldr	r0, [pc, #20]	; (8002514 <HAL_SPI_MspInit+0x90>)
 8002500:	f000 fafa 	bl	8002af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002504:	bf00      	nop
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40013000 	.word	0x40013000
 8002510:	40021000 	.word	0x40021000
 8002514:	40010800 	.word	0x40010800

08002518 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002528:	d10b      	bne.n	8002542 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <HAL_TIM_Base_MspInit+0x34>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4a07      	ldr	r2, [pc, #28]	; (800254c <HAL_TIM_Base_MspInit+0x34>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	61d3      	str	r3, [r2, #28]
 8002536:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_TIM_Base_MspInit+0x34>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	40021000 	.word	0x40021000

08002550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <NMI_Handler+0x4>

08002556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <HardFault_Handler+0x4>

0800255c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <MemManage_Handler+0x4>

08002562 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002566:	e7fe      	b.n	8002566 <BusFault_Handler+0x4>

08002568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800256c:	e7fe      	b.n	800256c <UsageFault_Handler+0x4>

0800256e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002596:	f000 f935 	bl	8002804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}

0800259e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0
  return 1;
 80025a2:	2301      	movs	r3, #1
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <_kill>:

int _kill(int pid, int sig)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025b6:	f002 f893 	bl	80046e0 <__errno>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2216      	movs	r2, #22
 80025be:	601a      	str	r2, [r3, #0]
  return -1;
 80025c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <_exit>:

void _exit (int status)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025d4:	f04f 31ff 	mov.w	r1, #4294967295
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff ffe7 	bl	80025ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80025de:	e7fe      	b.n	80025de <_exit+0x12>

080025e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	e00a      	b.n	8002608 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025f2:	f3af 8000 	nop.w
 80025f6:	4601      	mov	r1, r0
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	60ba      	str	r2, [r7, #8]
 80025fe:	b2ca      	uxtb	r2, r1
 8002600:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	3301      	adds	r3, #1
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	dbf0      	blt.n	80025f2 <_read+0x12>
  }

  return len;
 8002610:	687b      	ldr	r3, [r7, #4]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b086      	sub	sp, #24
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	e009      	b.n	8002640 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	60ba      	str	r2, [r7, #8]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3301      	adds	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	dbf1      	blt.n	800262c <_write+0x12>
  }
  return len;
 8002648:	687b      	ldr	r3, [r7, #4]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <_close>:

int _close(int file)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800265a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002678:	605a      	str	r2, [r3, #4]
  return 0;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <_isatty>:

int _isatty(int file)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800269a:	b480      	push	{r7}
 800269c:	b085      	sub	sp, #20
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr
	...

080026b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026bc:	4a14      	ldr	r2, [pc, #80]	; (8002710 <_sbrk+0x5c>)
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <_sbrk+0x60>)
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <_sbrk+0x64>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <_sbrk+0x64>)
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <_sbrk+0x68>)
 80026d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <_sbrk+0x64>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d207      	bcs.n	80026f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e4:	f001 fffc 	bl	80046e0 <__errno>
 80026e8:	4603      	mov	r3, r0
 80026ea:	220c      	movs	r2, #12
 80026ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
 80026f2:	e009      	b.n	8002708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <_sbrk+0x64>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026fa:	4b07      	ldr	r3, [pc, #28]	; (8002718 <_sbrk+0x64>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	4a05      	ldr	r2, [pc, #20]	; (8002718 <_sbrk+0x64>)
 8002704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002706:	68fb      	ldr	r3, [r7, #12]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20005000 	.word	0x20005000
 8002714:	00000400 	.word	0x00000400
 8002718:	2000033c 	.word	0x2000033c
 800271c:	20000358 	.word	0x20000358

08002720 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800272c:	f7ff fff8 	bl	8002720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002730:	480b      	ldr	r0, [pc, #44]	; (8002760 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002732:	490c      	ldr	r1, [pc, #48]	; (8002764 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002734:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002738:	e002      	b.n	8002740 <LoopCopyDataInit>

0800273a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800273c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273e:	3304      	adds	r3, #4

08002740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002744:	d3f9      	bcc.n	800273a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002746:	4a09      	ldr	r2, [pc, #36]	; (800276c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002748:	4c09      	ldr	r4, [pc, #36]	; (8002770 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800274a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800274c:	e001      	b.n	8002752 <LoopFillZerobss>

0800274e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002750:	3204      	adds	r2, #4

08002752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002754:	d3fb      	bcc.n	800274e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002756:	f001 ffc9 	bl	80046ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800275a:	f7ff f8a5 	bl	80018a8 <main>
  bx lr
 800275e:	4770      	bx	lr
  ldr r0, =_sdata
 8002760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002764:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8002768:	080087c8 	.word	0x080087c8
  ldr r2, =_sbss
 800276c:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8002770:	20000354 	.word	0x20000354

08002774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002774:	e7fe      	b.n	8002774 <ADC1_2_IRQHandler>
	...

08002778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <HAL_Init+0x28>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a07      	ldr	r2, [pc, #28]	; (80027a0 <HAL_Init+0x28>)
 8002782:	f043 0310 	orr.w	r3, r3, #16
 8002786:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002788:	2003      	movs	r0, #3
 800278a:	f000 f965 	bl	8002a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800278e:	200f      	movs	r0, #15
 8002790:	f000 f808 	bl	80027a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002794:	f7ff fe44 	bl	8002420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40022000 	.word	0x40022000

080027a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_InitTick+0x54>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_InitTick+0x58>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	4619      	mov	r1, r3
 80027b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80027be:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 f97d 	bl	8002ac2 <HAL_SYSTICK_Config>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e00e      	b.n	80027f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b0f      	cmp	r3, #15
 80027d6:	d80a      	bhi.n	80027ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027d8:	2200      	movs	r2, #0
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	f000 f945 	bl	8002a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027e4:	4a06      	ldr	r2, [pc, #24]	; (8002800 <HAL_InitTick+0x5c>)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	e000      	b.n	80027f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000040 	.word	0x20000040
 80027fc:	20000048 	.word	0x20000048
 8002800:	20000044 	.word	0x20000044

08002804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_IncTick+0x1c>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_IncTick+0x20>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4413      	add	r3, r2
 8002814:	4a03      	ldr	r2, [pc, #12]	; (8002824 <HAL_IncTick+0x20>)
 8002816:	6013      	str	r3, [r2, #0]
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	20000048 	.word	0x20000048
 8002824:	20000340 	.word	0x20000340

08002828 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return uwTick;
 800282c:	4b02      	ldr	r3, [pc, #8]	; (8002838 <HAL_GetTick+0x10>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	20000340 	.word	0x20000340

0800283c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002844:	f7ff fff0 	bl	8002828 <HAL_GetTick>
 8002848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d005      	beq.n	8002862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <HAL_Delay+0x44>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002862:	bf00      	nop
 8002864:	f7ff ffe0 	bl	8002828 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	429a      	cmp	r2, r3
 8002872:	d8f7      	bhi.n	8002864 <HAL_Delay+0x28>
  {
  }
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000048 	.word	0x20000048

08002884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028a0:	4013      	ands	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b6:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	60d3      	str	r3, [r2, #12]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <__NVIC_GetPriorityGrouping+0x18>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	0a1b      	lsrs	r3, r3, #8
 80028d6:	f003 0307 	and.w	r3, r3, #7
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	db0b      	blt.n	8002912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	4906      	ldr	r1, [pc, #24]	; (800291c <__NVIC_EnableIRQ+0x34>)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	2001      	movs	r0, #1
 800290a:	fa00 f202 	lsl.w	r2, r0, r2
 800290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	e000e100 	.word	0xe000e100

08002920 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	2b00      	cmp	r3, #0
 8002930:	db0c      	blt.n	800294c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	f003 021f 	and.w	r2, r3, #31
 8002938:	4907      	ldr	r1, [pc, #28]	; (8002958 <__NVIC_ClearPendingIRQ+0x38>)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2001      	movs	r0, #1
 8002942:	fa00 f202 	lsl.w	r2, r0, r2
 8002946:	3360      	adds	r3, #96	; 0x60
 8002948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000e100 	.word	0xe000e100

0800295c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	6039      	str	r1, [r7, #0]
 8002966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296c:	2b00      	cmp	r3, #0
 800296e:	db0a      	blt.n	8002986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	490c      	ldr	r1, [pc, #48]	; (80029a8 <__NVIC_SetPriority+0x4c>)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	0112      	lsls	r2, r2, #4
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	440b      	add	r3, r1
 8002980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002984:	e00a      	b.n	800299c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4908      	ldr	r1, [pc, #32]	; (80029ac <__NVIC_SetPriority+0x50>)
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	3b04      	subs	r3, #4
 8002994:	0112      	lsls	r2, r2, #4
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	440b      	add	r3, r1
 800299a:	761a      	strb	r2, [r3, #24]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000e100 	.word	0xe000e100
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f1c3 0307 	rsb	r3, r3, #7
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	bf28      	it	cs
 80029ce:	2304      	movcs	r3, #4
 80029d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3304      	adds	r3, #4
 80029d6:	2b06      	cmp	r3, #6
 80029d8:	d902      	bls.n	80029e0 <NVIC_EncodePriority+0x30>
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3b03      	subs	r3, #3
 80029de:	e000      	b.n	80029e2 <NVIC_EncodePriority+0x32>
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	f04f 32ff 	mov.w	r2, #4294967295
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43da      	mvns	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	401a      	ands	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f8:	f04f 31ff 	mov.w	r1, #4294967295
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	43d9      	mvns	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	4313      	orrs	r3, r2
         );
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3724      	adds	r7, #36	; 0x24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a24:	d301      	bcc.n	8002a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00f      	b.n	8002a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <SysTick_Config+0x40>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a32:	210f      	movs	r1, #15
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	f7ff ff90 	bl	800295c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <SysTick_Config+0x40>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a42:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <SysTick_Config+0x40>)
 8002a44:	2207      	movs	r2, #7
 8002a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	e000e010 	.word	0xe000e010

08002a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff0f 	bl	8002884 <__NVIC_SetPriorityGrouping>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a80:	f7ff ff24 	bl	80028cc <__NVIC_GetPriorityGrouping>
 8002a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f7ff ff90 	bl	80029b0 <NVIC_EncodePriority>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff5f 	bl	800295c <__NVIC_SetPriority>
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff17 	bl	80028e8 <__NVIC_EnableIRQ>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ffa2 	bl	8002a14 <SysTick_Config>
 8002ad0:	4603      	mov	r3, r0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ff19 	bl	8002920 <__NVIC_ClearPendingIRQ>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b08b      	sub	sp, #44	; 0x2c
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b02:	2300      	movs	r3, #0
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b06:	2300      	movs	r3, #0
 8002b08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b0a:	e169      	b.n	8002de0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	f040 8158 	bne.w	8002dda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4a9a      	ldr	r2, [pc, #616]	; (8002d98 <HAL_GPIO_Init+0x2a0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d05e      	beq.n	8002bf2 <HAL_GPIO_Init+0xfa>
 8002b34:	4a98      	ldr	r2, [pc, #608]	; (8002d98 <HAL_GPIO_Init+0x2a0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d875      	bhi.n	8002c26 <HAL_GPIO_Init+0x12e>
 8002b3a:	4a98      	ldr	r2, [pc, #608]	; (8002d9c <HAL_GPIO_Init+0x2a4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d058      	beq.n	8002bf2 <HAL_GPIO_Init+0xfa>
 8002b40:	4a96      	ldr	r2, [pc, #600]	; (8002d9c <HAL_GPIO_Init+0x2a4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d86f      	bhi.n	8002c26 <HAL_GPIO_Init+0x12e>
 8002b46:	4a96      	ldr	r2, [pc, #600]	; (8002da0 <HAL_GPIO_Init+0x2a8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d052      	beq.n	8002bf2 <HAL_GPIO_Init+0xfa>
 8002b4c:	4a94      	ldr	r2, [pc, #592]	; (8002da0 <HAL_GPIO_Init+0x2a8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d869      	bhi.n	8002c26 <HAL_GPIO_Init+0x12e>
 8002b52:	4a94      	ldr	r2, [pc, #592]	; (8002da4 <HAL_GPIO_Init+0x2ac>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d04c      	beq.n	8002bf2 <HAL_GPIO_Init+0xfa>
 8002b58:	4a92      	ldr	r2, [pc, #584]	; (8002da4 <HAL_GPIO_Init+0x2ac>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d863      	bhi.n	8002c26 <HAL_GPIO_Init+0x12e>
 8002b5e:	4a92      	ldr	r2, [pc, #584]	; (8002da8 <HAL_GPIO_Init+0x2b0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d046      	beq.n	8002bf2 <HAL_GPIO_Init+0xfa>
 8002b64:	4a90      	ldr	r2, [pc, #576]	; (8002da8 <HAL_GPIO_Init+0x2b0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d85d      	bhi.n	8002c26 <HAL_GPIO_Init+0x12e>
 8002b6a:	2b12      	cmp	r3, #18
 8002b6c:	d82a      	bhi.n	8002bc4 <HAL_GPIO_Init+0xcc>
 8002b6e:	2b12      	cmp	r3, #18
 8002b70:	d859      	bhi.n	8002c26 <HAL_GPIO_Init+0x12e>
 8002b72:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <HAL_GPIO_Init+0x80>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002bf3 	.word	0x08002bf3
 8002b7c:	08002bcd 	.word	0x08002bcd
 8002b80:	08002bdf 	.word	0x08002bdf
 8002b84:	08002c21 	.word	0x08002c21
 8002b88:	08002c27 	.word	0x08002c27
 8002b8c:	08002c27 	.word	0x08002c27
 8002b90:	08002c27 	.word	0x08002c27
 8002b94:	08002c27 	.word	0x08002c27
 8002b98:	08002c27 	.word	0x08002c27
 8002b9c:	08002c27 	.word	0x08002c27
 8002ba0:	08002c27 	.word	0x08002c27
 8002ba4:	08002c27 	.word	0x08002c27
 8002ba8:	08002c27 	.word	0x08002c27
 8002bac:	08002c27 	.word	0x08002c27
 8002bb0:	08002c27 	.word	0x08002c27
 8002bb4:	08002c27 	.word	0x08002c27
 8002bb8:	08002c27 	.word	0x08002c27
 8002bbc:	08002bd5 	.word	0x08002bd5
 8002bc0:	08002be9 	.word	0x08002be9
 8002bc4:	4a79      	ldr	r2, [pc, #484]	; (8002dac <HAL_GPIO_Init+0x2b4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bca:	e02c      	b.n	8002c26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	623b      	str	r3, [r7, #32]
          break;
 8002bd2:	e029      	b.n	8002c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	623b      	str	r3, [r7, #32]
          break;
 8002bdc:	e024      	b.n	8002c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	3308      	adds	r3, #8
 8002be4:	623b      	str	r3, [r7, #32]
          break;
 8002be6:	e01f      	b.n	8002c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	330c      	adds	r3, #12
 8002bee:	623b      	str	r3, [r7, #32]
          break;
 8002bf0:	e01a      	b.n	8002c28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	623b      	str	r3, [r7, #32]
          break;
 8002bfe:	e013      	b.n	8002c28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d105      	bne.n	8002c14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c08:	2308      	movs	r3, #8
 8002c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	611a      	str	r2, [r3, #16]
          break;
 8002c12:	e009      	b.n	8002c28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c14:	2308      	movs	r3, #8
 8002c16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	615a      	str	r2, [r3, #20]
          break;
 8002c1e:	e003      	b.n	8002c28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c20:	2300      	movs	r3, #0
 8002c22:	623b      	str	r3, [r7, #32]
          break;
 8002c24:	e000      	b.n	8002c28 <HAL_GPIO_Init+0x130>
          break;
 8002c26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2bff      	cmp	r3, #255	; 0xff
 8002c2c:	d801      	bhi.n	8002c32 <HAL_GPIO_Init+0x13a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	e001      	b.n	8002c36 <HAL_GPIO_Init+0x13e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3304      	adds	r3, #4
 8002c36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2bff      	cmp	r3, #255	; 0xff
 8002c3c:	d802      	bhi.n	8002c44 <HAL_GPIO_Init+0x14c>
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	e002      	b.n	8002c4a <HAL_GPIO_Init+0x152>
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	3b08      	subs	r3, #8
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	210f      	movs	r1, #15
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	6a39      	ldr	r1, [r7, #32]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	431a      	orrs	r2, r3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80b1 	beq.w	8002dda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c78:	4b4d      	ldr	r3, [pc, #308]	; (8002db0 <HAL_GPIO_Init+0x2b8>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	4a4c      	ldr	r2, [pc, #304]	; (8002db0 <HAL_GPIO_Init+0x2b8>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6193      	str	r3, [r2, #24]
 8002c84:	4b4a      	ldr	r3, [pc, #296]	; (8002db0 <HAL_GPIO_Init+0x2b8>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c90:	4a48      	ldr	r2, [pc, #288]	; (8002db4 <HAL_GPIO_Init+0x2bc>)
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	089b      	lsrs	r3, r3, #2
 8002c96:	3302      	adds	r3, #2
 8002c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a40      	ldr	r2, [pc, #256]	; (8002db8 <HAL_GPIO_Init+0x2c0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d013      	beq.n	8002ce4 <HAL_GPIO_Init+0x1ec>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a3f      	ldr	r2, [pc, #252]	; (8002dbc <HAL_GPIO_Init+0x2c4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00d      	beq.n	8002ce0 <HAL_GPIO_Init+0x1e8>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a3e      	ldr	r2, [pc, #248]	; (8002dc0 <HAL_GPIO_Init+0x2c8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d007      	beq.n	8002cdc <HAL_GPIO_Init+0x1e4>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a3d      	ldr	r2, [pc, #244]	; (8002dc4 <HAL_GPIO_Init+0x2cc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d101      	bne.n	8002cd8 <HAL_GPIO_Init+0x1e0>
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e006      	b.n	8002ce6 <HAL_GPIO_Init+0x1ee>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	e004      	b.n	8002ce6 <HAL_GPIO_Init+0x1ee>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e002      	b.n	8002ce6 <HAL_GPIO_Init+0x1ee>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <HAL_GPIO_Init+0x1ee>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce8:	f002 0203 	and.w	r2, r2, #3
 8002cec:	0092      	lsls	r2, r2, #2
 8002cee:	4093      	lsls	r3, r2
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cf6:	492f      	ldr	r1, [pc, #188]	; (8002db4 <HAL_GPIO_Init+0x2bc>)
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d006      	beq.n	8002d1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d10:	4b2d      	ldr	r3, [pc, #180]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	492c      	ldr	r1, [pc, #176]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	608b      	str	r3, [r1, #8]
 8002d1c:	e006      	b.n	8002d2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d1e:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	4928      	ldr	r1, [pc, #160]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d006      	beq.n	8002d46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d38:	4b23      	ldr	r3, [pc, #140]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	4922      	ldr	r1, [pc, #136]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60cb      	str	r3, [r1, #12]
 8002d44:	e006      	b.n	8002d54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	491e      	ldr	r1, [pc, #120]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d006      	beq.n	8002d6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	4918      	ldr	r1, [pc, #96]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
 8002d6c:	e006      	b.n	8002d7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	4914      	ldr	r1, [pc, #80]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d021      	beq.n	8002dcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	490e      	ldr	r1, [pc, #56]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	600b      	str	r3, [r1, #0]
 8002d94:	e021      	b.n	8002dda <HAL_GPIO_Init+0x2e2>
 8002d96:	bf00      	nop
 8002d98:	10320000 	.word	0x10320000
 8002d9c:	10310000 	.word	0x10310000
 8002da0:	10220000 	.word	0x10220000
 8002da4:	10210000 	.word	0x10210000
 8002da8:	10120000 	.word	0x10120000
 8002dac:	10110000 	.word	0x10110000
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40010000 	.word	0x40010000
 8002db8:	40010800 	.word	0x40010800
 8002dbc:	40010c00 	.word	0x40010c00
 8002dc0:	40011000 	.word	0x40011000
 8002dc4:	40011400 	.word	0x40011400
 8002dc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_GPIO_Init+0x304>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	4909      	ldr	r1, [pc, #36]	; (8002dfc <HAL_GPIO_Init+0x304>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	3301      	adds	r3, #1
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f47f ae8e 	bne.w	8002b0c <HAL_GPIO_Init+0x14>
  }
}
 8002df0:	bf00      	nop
 8002df2:	bf00      	nop
 8002df4:	372c      	adds	r7, #44	; 0x2c
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr
 8002dfc:	40010400 	.word	0x40010400

08002e00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	887b      	ldrh	r3, [r7, #2]
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
 8002e1c:	e001      	b.n	8002e22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr

08002e2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	807b      	strh	r3, [r7, #2]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e3e:	787b      	ldrb	r3, [r7, #1]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e44:	887a      	ldrh	r2, [r7, #2]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e4a:	e003      	b.n	8002e54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e4c:	887b      	ldrh	r3, [r7, #2]
 8002e4e:	041a      	lsls	r2, r3, #16
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	611a      	str	r2, [r3, #16]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
	...

08002e60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d006      	beq.n	8002e84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e76:	4a05      	ldr	r2, [pc, #20]	; (8002e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f806 	bl	8002e90 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40010400 	.word	0x40010400

08002e90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e272      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 8087 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ec4:	4b92      	ldr	r3, [pc, #584]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d00c      	beq.n	8002eea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ed0:	4b8f      	ldr	r3, [pc, #572]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d112      	bne.n	8002f02 <HAL_RCC_OscConfig+0x5e>
 8002edc:	4b8c      	ldr	r3, [pc, #560]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee8:	d10b      	bne.n	8002f02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eea:	4b89      	ldr	r3, [pc, #548]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d06c      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x12c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d168      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e24c      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0a:	d106      	bne.n	8002f1a <HAL_RCC_OscConfig+0x76>
 8002f0c:	4b80      	ldr	r3, [pc, #512]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a7f      	ldr	r2, [pc, #508]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	e02e      	b.n	8002f78 <HAL_RCC_OscConfig+0xd4>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10c      	bne.n	8002f3c <HAL_RCC_OscConfig+0x98>
 8002f22:	4b7b      	ldr	r3, [pc, #492]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a7a      	ldr	r2, [pc, #488]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	4b78      	ldr	r3, [pc, #480]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a77      	ldr	r2, [pc, #476]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e01d      	b.n	8002f78 <HAL_RCC_OscConfig+0xd4>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0xbc>
 8002f46:	4b72      	ldr	r3, [pc, #456]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a71      	ldr	r2, [pc, #452]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	4b6f      	ldr	r3, [pc, #444]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a6e      	ldr	r2, [pc, #440]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e00b      	b.n	8002f78 <HAL_RCC_OscConfig+0xd4>
 8002f60:	4b6b      	ldr	r3, [pc, #428]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a6a      	ldr	r2, [pc, #424]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	4b68      	ldr	r3, [pc, #416]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a67      	ldr	r2, [pc, #412]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d013      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7ff fc52 	bl	8002828 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f88:	f7ff fc4e 	bl	8002828 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e200      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	4b5d      	ldr	r3, [pc, #372]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0xe4>
 8002fa6:	e014      	b.n	8002fd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7ff fc3e 	bl	8002828 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7ff fc3a 	bl	8002828 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e1ec      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc2:	4b53      	ldr	r3, [pc, #332]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x10c>
 8002fce:	e000      	b.n	8002fd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d063      	beq.n	80030a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fde:	4b4c      	ldr	r3, [pc, #304]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fea:	4b49      	ldr	r3, [pc, #292]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d11c      	bne.n	8003030 <HAL_RCC_OscConfig+0x18c>
 8002ff6:	4b46      	ldr	r3, [pc, #280]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d116      	bne.n	8003030 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003002:	4b43      	ldr	r3, [pc, #268]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <HAL_RCC_OscConfig+0x176>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d001      	beq.n	800301a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e1c0      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301a:	4b3d      	ldr	r3, [pc, #244]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4939      	ldr	r1, [pc, #228]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302e:	e03a      	b.n	80030a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d020      	beq.n	800307a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003038:	4b36      	ldr	r3, [pc, #216]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7ff fbf3 	bl	8002828 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003046:	f7ff fbef 	bl	8002828 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e1a1      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003058:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003064:	4b2a      	ldr	r3, [pc, #168]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4927      	ldr	r1, [pc, #156]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 8003074:	4313      	orrs	r3, r2
 8003076:	600b      	str	r3, [r1, #0]
 8003078:	e015      	b.n	80030a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307a:	4b26      	ldr	r3, [pc, #152]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7ff fbd2 	bl	8002828 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003088:	f7ff fbce 	bl	8002828 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e180      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309a:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d03a      	beq.n	8003128 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d019      	beq.n	80030ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ba:	4b17      	ldr	r3, [pc, #92]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 80030bc:	2201      	movs	r2, #1
 80030be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c0:	f7ff fbb2 	bl	8002828 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c8:	f7ff fbae 	bl	8002828 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e160      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030da:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030e6:	2001      	movs	r0, #1
 80030e8:	f000 fa9c 	bl	8003624 <RCC_Delay>
 80030ec:	e01c      	b.n	8003128 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f4:	f7ff fb98 	bl	8002828 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fa:	e00f      	b.n	800311c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fc:	f7ff fb94 	bl	8002828 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d908      	bls.n	800311c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e146      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000
 8003114:	42420000 	.word	0x42420000
 8003118:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800311c:	4b92      	ldr	r3, [pc, #584]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e9      	bne.n	80030fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80a6 	beq.w	8003282 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003136:	2300      	movs	r3, #0
 8003138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313a:	4b8b      	ldr	r3, [pc, #556]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10d      	bne.n	8003162 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003146:	4b88      	ldr	r3, [pc, #544]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	4a87      	ldr	r2, [pc, #540]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003150:	61d3      	str	r3, [r2, #28]
 8003152:	4b85      	ldr	r3, [pc, #532]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800315e:	2301      	movs	r3, #1
 8003160:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003162:	4b82      	ldr	r3, [pc, #520]	; (800336c <HAL_RCC_OscConfig+0x4c8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d118      	bne.n	80031a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800316e:	4b7f      	ldr	r3, [pc, #508]	; (800336c <HAL_RCC_OscConfig+0x4c8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a7e      	ldr	r2, [pc, #504]	; (800336c <HAL_RCC_OscConfig+0x4c8>)
 8003174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317a:	f7ff fb55 	bl	8002828 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003182:	f7ff fb51 	bl	8002828 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b64      	cmp	r3, #100	; 0x64
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e103      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003194:	4b75      	ldr	r3, [pc, #468]	; (800336c <HAL_RCC_OscConfig+0x4c8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d106      	bne.n	80031b6 <HAL_RCC_OscConfig+0x312>
 80031a8:	4b6f      	ldr	r3, [pc, #444]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4a6e      	ldr	r2, [pc, #440]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6213      	str	r3, [r2, #32]
 80031b4:	e02d      	b.n	8003212 <HAL_RCC_OscConfig+0x36e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x334>
 80031be:	4b6a      	ldr	r3, [pc, #424]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	4a69      	ldr	r2, [pc, #420]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	6213      	str	r3, [r2, #32]
 80031ca:	4b67      	ldr	r3, [pc, #412]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	4a66      	ldr	r2, [pc, #408]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	f023 0304 	bic.w	r3, r3, #4
 80031d4:	6213      	str	r3, [r2, #32]
 80031d6:	e01c      	b.n	8003212 <HAL_RCC_OscConfig+0x36e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2b05      	cmp	r3, #5
 80031de:	d10c      	bne.n	80031fa <HAL_RCC_OscConfig+0x356>
 80031e0:	4b61      	ldr	r3, [pc, #388]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	4a60      	ldr	r2, [pc, #384]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	f043 0304 	orr.w	r3, r3, #4
 80031ea:	6213      	str	r3, [r2, #32]
 80031ec:	4b5e      	ldr	r3, [pc, #376]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	4a5d      	ldr	r2, [pc, #372]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	6213      	str	r3, [r2, #32]
 80031f8:	e00b      	b.n	8003212 <HAL_RCC_OscConfig+0x36e>
 80031fa:	4b5b      	ldr	r3, [pc, #364]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4a5a      	ldr	r2, [pc, #360]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	6213      	str	r3, [r2, #32]
 8003206:	4b58      	ldr	r3, [pc, #352]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	4a57      	ldr	r2, [pc, #348]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 800320c:	f023 0304 	bic.w	r3, r3, #4
 8003210:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d015      	beq.n	8003246 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7ff fb05 	bl	8002828 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003220:	e00a      	b.n	8003238 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7ff fb01 	bl	8002828 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e0b1      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003238:	4b4b      	ldr	r3, [pc, #300]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0ee      	beq.n	8003222 <HAL_RCC_OscConfig+0x37e>
 8003244:	e014      	b.n	8003270 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003246:	f7ff faef 	bl	8002828 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324c:	e00a      	b.n	8003264 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324e:	f7ff faeb 	bl	8002828 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	; 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e09b      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003264:	4b40      	ldr	r3, [pc, #256]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1ee      	bne.n	800324e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003270:	7dfb      	ldrb	r3, [r7, #23]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d105      	bne.n	8003282 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003276:	4b3c      	ldr	r3, [pc, #240]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	4a3b      	ldr	r2, [pc, #236]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003280:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 8087 	beq.w	800339a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800328c:	4b36      	ldr	r3, [pc, #216]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 030c 	and.w	r3, r3, #12
 8003294:	2b08      	cmp	r3, #8
 8003296:	d061      	beq.n	800335c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d146      	bne.n	800332e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a0:	4b33      	ldr	r3, [pc, #204]	; (8003370 <HAL_RCC_OscConfig+0x4cc>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a6:	f7ff fabf 	bl	8002828 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ae:	f7ff fabb 	bl	8002828 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e06d      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c0:	4b29      	ldr	r3, [pc, #164]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f0      	bne.n	80032ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d4:	d108      	bne.n	80032e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032d6:	4b24      	ldr	r3, [pc, #144]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	4921      	ldr	r1, [pc, #132]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e8:	4b1f      	ldr	r3, [pc, #124]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a19      	ldr	r1, [r3, #32]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	430b      	orrs	r3, r1
 80032fa:	491b      	ldr	r1, [pc, #108]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <HAL_RCC_OscConfig+0x4cc>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7ff fa8f 	bl	8002828 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330e:	f7ff fa8b 	bl	8002828 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e03d      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x46a>
 800332c:	e035      	b.n	800339a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332e:	4b10      	ldr	r3, [pc, #64]	; (8003370 <HAL_RCC_OscConfig+0x4cc>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003334:	f7ff fa78 	bl	8002828 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333c:	f7ff fa74 	bl	8002828 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e026      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_RCC_OscConfig+0x4c4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x498>
 800335a:	e01e      	b.n	800339a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d107      	bne.n	8003374 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e019      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
 8003368:	40021000 	.word	0x40021000
 800336c:	40007000 	.word	0x40007000
 8003370:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <HAL_RCC_OscConfig+0x500>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	429a      	cmp	r2, r3
 8003386:	d106      	bne.n	8003396 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d001      	beq.n	800339a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40021000 	.word	0x40021000

080033a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0d0      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033bc:	4b6a      	ldr	r3, [pc, #424]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d910      	bls.n	80033ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b67      	ldr	r3, [pc, #412]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 0207 	bic.w	r2, r3, #7
 80033d2:	4965      	ldr	r1, [pc, #404]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033da:	4b63      	ldr	r3, [pc, #396]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0b8      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d020      	beq.n	800343a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003404:	4b59      	ldr	r3, [pc, #356]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4a58      	ldr	r2, [pc, #352]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800340e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800341c:	4b53      	ldr	r3, [pc, #332]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4a52      	ldr	r2, [pc, #328]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003426:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003428:	4b50      	ldr	r3, [pc, #320]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	494d      	ldr	r1, [pc, #308]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d040      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d107      	bne.n	800345e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	4b47      	ldr	r3, [pc, #284]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d115      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e07f      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d107      	bne.n	8003476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003466:	4b41      	ldr	r3, [pc, #260]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e073      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003476:	4b3d      	ldr	r3, [pc, #244]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e06b      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003486:	4b39      	ldr	r3, [pc, #228]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f023 0203 	bic.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	4936      	ldr	r1, [pc, #216]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003498:	f7ff f9c6 	bl	8002828 <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a0:	f7ff f9c2 	bl	8002828 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e053      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	4b2d      	ldr	r3, [pc, #180]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 020c 	and.w	r2, r3, #12
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d1eb      	bne.n	80034a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034c8:	4b27      	ldr	r3, [pc, #156]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d210      	bcs.n	80034f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b24      	ldr	r3, [pc, #144]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 0207 	bic.w	r2, r3, #7
 80034de:	4922      	ldr	r1, [pc, #136]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b20      	ldr	r3, [pc, #128]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e032      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003504:	4b19      	ldr	r3, [pc, #100]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4916      	ldr	r1, [pc, #88]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	490e      	ldr	r1, [pc, #56]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003536:	f000 f821 	bl	800357c <HAL_RCC_GetSysClockFreq>
 800353a:	4602      	mov	r2, r0
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	490a      	ldr	r1, [pc, #40]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 8003548:	5ccb      	ldrb	r3, [r1, r3]
 800354a:	fa22 f303 	lsr.w	r3, r2, r3
 800354e:	4a09      	ldr	r2, [pc, #36]	; (8003574 <HAL_RCC_ClockConfig+0x1cc>)
 8003550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_RCC_ClockConfig+0x1d0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff f924 	bl	80027a4 <HAL_InitTick>

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40022000 	.word	0x40022000
 800356c:	40021000 	.word	0x40021000
 8003570:	08008390 	.word	0x08008390
 8003574:	20000040 	.word	0x20000040
 8003578:	20000044 	.word	0x20000044

0800357c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	2300      	movs	r3, #0
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	2300      	movs	r3, #0
 8003590:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003596:	4b1e      	ldr	r3, [pc, #120]	; (8003610 <HAL_RCC_GetSysClockFreq+0x94>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d002      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x30>
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d003      	beq.n	80035b2 <HAL_RCC_GetSysClockFreq+0x36>
 80035aa:	e027      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035ac:	4b19      	ldr	r3, [pc, #100]	; (8003614 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ae:	613b      	str	r3, [r7, #16]
      break;
 80035b0:	e027      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	0c9b      	lsrs	r3, r3, #18
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	4a17      	ldr	r2, [pc, #92]	; (8003618 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035bc:	5cd3      	ldrb	r3, [r2, r3]
 80035be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d010      	beq.n	80035ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035ca:	4b11      	ldr	r3, [pc, #68]	; (8003610 <HAL_RCC_GetSysClockFreq+0x94>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	0c5b      	lsrs	r3, r3, #17
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	4a11      	ldr	r2, [pc, #68]	; (800361c <HAL_RCC_GetSysClockFreq+0xa0>)
 80035d6:	5cd3      	ldrb	r3, [r2, r3]
 80035d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a0d      	ldr	r2, [pc, #52]	; (8003614 <HAL_RCC_GetSysClockFreq+0x98>)
 80035de:	fb03 f202 	mul.w	r2, r3, r2
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e004      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a0c      	ldr	r2, [pc, #48]	; (8003620 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035f0:	fb02 f303 	mul.w	r3, r2, r3
 80035f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	613b      	str	r3, [r7, #16]
      break;
 80035fa:	e002      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCC_GetSysClockFreq+0x98>)
 80035fe:	613b      	str	r3, [r7, #16]
      break;
 8003600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003602:	693b      	ldr	r3, [r7, #16]
}
 8003604:	4618      	mov	r0, r3
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000
 8003614:	007a1200 	.word	0x007a1200
 8003618:	080083a0 	.word	0x080083a0
 800361c:	080083b0 	.word	0x080083b0
 8003620:	003d0900 	.word	0x003d0900

08003624 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800362c:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <RCC_Delay+0x34>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0a      	ldr	r2, [pc, #40]	; (800365c <RCC_Delay+0x38>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	0a5b      	lsrs	r3, r3, #9
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003640:	bf00      	nop
  }
  while (Delay --);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1e5a      	subs	r2, r3, #1
 8003646:	60fa      	str	r2, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f9      	bne.n	8003640 <RCC_Delay+0x1c>
}
 800364c:	bf00      	nop
 800364e:	bf00      	nop
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr
 8003658:	20000040 	.word	0x20000040
 800365c:	10624dd3 	.word	0x10624dd3

08003660 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e076      	b.n	8003760 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	2b00      	cmp	r3, #0
 8003678:	d108      	bne.n	800368c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003682:	d009      	beq.n	8003698 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	61da      	str	r2, [r3, #28]
 800368a:	e005      	b.n	8003698 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fe fee6 	bl	8002484 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371c:	ea42 0103 	orr.w	r1, r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	0c1a      	lsrs	r2, r3, #16
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f002 0204 	and.w	r2, r2, #4
 800373e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800374e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_SPI_Transmit+0x22>
 8003786:	2302      	movs	r3, #2
 8003788:	e12d      	b.n	80039e6 <HAL_SPI_Transmit+0x27e>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003792:	f7ff f849 	bl	8002828 <HAL_GetTick>
 8003796:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d002      	beq.n	80037ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037a8:	2302      	movs	r3, #2
 80037aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037ac:	e116      	b.n	80039dc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <HAL_SPI_Transmit+0x52>
 80037b4:	88fb      	ldrh	r3, [r7, #6]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037be:	e10d      	b.n	80039dc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2203      	movs	r2, #3
 80037c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	88fa      	ldrh	r2, [r7, #6]
 80037d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	88fa      	ldrh	r2, [r7, #6]
 80037de:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003806:	d10f      	bne.n	8003828 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003816:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003826:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003832:	2b40      	cmp	r3, #64	; 0x40
 8003834:	d007      	beq.n	8003846 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003844:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800384e:	d14f      	bne.n	80038f0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_SPI_Transmit+0xf6>
 8003858:	8afb      	ldrh	r3, [r7, #22]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d142      	bne.n	80038e4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	881a      	ldrh	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	1c9a      	adds	r2, r3, #2
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003882:	e02f      	b.n	80038e4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b02      	cmp	r3, #2
 8003890:	d112      	bne.n	80038b8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	881a      	ldrh	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	1c9a      	adds	r2, r3, #2
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80038b6:	e015      	b.n	80038e4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038b8:	f7fe ffb6 	bl	8002828 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d803      	bhi.n	80038d0 <HAL_SPI_Transmit+0x168>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ce:	d102      	bne.n	80038d6 <HAL_SPI_Transmit+0x16e>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80038e2:	e07b      	b.n	80039dc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1ca      	bne.n	8003884 <HAL_SPI_Transmit+0x11c>
 80038ee:	e050      	b.n	8003992 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_SPI_Transmit+0x196>
 80038f8:	8afb      	ldrh	r3, [r7, #22]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d144      	bne.n	8003988 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	330c      	adds	r3, #12
 8003908:	7812      	ldrb	r2, [r2, #0]
 800390a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003924:	e030      	b.n	8003988 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b02      	cmp	r3, #2
 8003932:	d113      	bne.n	800395c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	330c      	adds	r3, #12
 800393e:	7812      	ldrb	r2, [r2, #0]
 8003940:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	86da      	strh	r2, [r3, #54]	; 0x36
 800395a:	e015      	b.n	8003988 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800395c:	f7fe ff64 	bl	8002828 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d803      	bhi.n	8003974 <HAL_SPI_Transmit+0x20c>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003972:	d102      	bne.n	800397a <HAL_SPI_Transmit+0x212>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003986:	e029      	b.n	80039dc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1c9      	bne.n	8003926 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	6839      	ldr	r1, [r7, #0]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fbcc 	bl	8004134 <SPI_EndRxTxTransaction>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039b0:	2300      	movs	r3, #0
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	77fb      	strb	r3, [r7, #31]
 80039d2:	e003      	b.n	80039dc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b088      	sub	sp, #32
 80039f2:	af02      	add	r7, sp, #8
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	4613      	mov	r3, r2
 80039fc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d002      	beq.n	8003a14 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a12:	e0fb      	b.n	8003c0c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a1c:	d112      	bne.n	8003a44 <HAL_SPI_Receive+0x56>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10e      	bne.n	8003a44 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2204      	movs	r2, #4
 8003a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	4613      	mov	r3, r2
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 f8ef 	bl	8003c1e <HAL_SPI_TransmitReceive>
 8003a40:	4603      	mov	r3, r0
 8003a42:	e0e8      	b.n	8003c16 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_SPI_Receive+0x64>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e0e1      	b.n	8003c16 <HAL_SPI_Receive+0x228>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a5a:	f7fe fee5 	bl	8002828 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <HAL_SPI_Receive+0x7e>
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d102      	bne.n	8003a72 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a70:	e0cc      	b.n	8003c0c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2204      	movs	r2, #4
 8003a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	88fa      	ldrh	r2, [r7, #6]
 8003a8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	88fa      	ldrh	r2, [r7, #6]
 8003a90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab8:	d10f      	bne.n	8003ada <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ad8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae4:	2b40      	cmp	r3, #64	; 0x40
 8003ae6:	d007      	beq.n	8003af8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003af6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d16a      	bne.n	8003bd6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b00:	e032      	b.n	8003b68 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d115      	bne.n	8003b3c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f103 020c 	add.w	r2, r3, #12
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1c:	7812      	ldrb	r2, [r2, #0]
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b3a:	e015      	b.n	8003b68 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b3c:	f7fe fe74 	bl	8002828 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d803      	bhi.n	8003b54 <HAL_SPI_Receive+0x166>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b52:	d102      	bne.n	8003b5a <HAL_SPI_Receive+0x16c>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d106      	bne.n	8003b68 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003b66:	e051      	b.n	8003c0c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1c7      	bne.n	8003b02 <HAL_SPI_Receive+0x114>
 8003b72:	e035      	b.n	8003be0 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d113      	bne.n	8003baa <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	b292      	uxth	r2, r2
 8003b8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b94:	1c9a      	adds	r2, r3, #2
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ba8:	e015      	b.n	8003bd6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003baa:	f7fe fe3d 	bl	8002828 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d803      	bhi.n	8003bc2 <HAL_SPI_Receive+0x1d4>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc0:	d102      	bne.n	8003bc8 <HAL_SPI_Receive+0x1da>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d106      	bne.n	8003bd6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003bd4:	e01a      	b.n	8003c0c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1c9      	bne.n	8003b74 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	6839      	ldr	r1, [r7, #0]
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 fa53 	bl	8004090 <SPI_EndRxTransaction>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
 8003c02:	e003      	b.n	8003c0c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b08c      	sub	sp, #48	; 0x30
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	607a      	str	r2, [r7, #4]
 8003c2a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x26>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e198      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x358>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c4c:	f7fe fdec 	bl	8002828 <HAL_GetTick>
 8003c50:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c62:	887b      	ldrh	r3, [r7, #2]
 8003c64:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d00f      	beq.n	8003c8e <HAL_SPI_TransmitReceive+0x70>
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c74:	d107      	bne.n	8003c86 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d103      	bne.n	8003c86 <HAL_SPI_TransmitReceive+0x68>
 8003c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d003      	beq.n	8003c8e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c86:	2302      	movs	r3, #2
 8003c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c8c:	e16d      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_SPI_TransmitReceive+0x82>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_SPI_TransmitReceive+0x82>
 8003c9a:	887b      	ldrh	r3, [r7, #2]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d103      	bne.n	8003ca8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ca6:	e160      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d003      	beq.n	8003cbc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2205      	movs	r2, #5
 8003cb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	887a      	ldrh	r2, [r7, #2]
 8003ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	887a      	ldrh	r2, [r7, #2]
 8003cd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	887a      	ldrh	r2, [r7, #2]
 8003cde:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	887a      	ldrh	r2, [r7, #2]
 8003ce4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfc:	2b40      	cmp	r3, #64	; 0x40
 8003cfe:	d007      	beq.n	8003d10 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d18:	d17c      	bne.n	8003e14 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_SPI_TransmitReceive+0x10a>
 8003d22:	8b7b      	ldrh	r3, [r7, #26]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d16a      	bne.n	8003dfe <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	881a      	ldrh	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d38:	1c9a      	adds	r2, r3, #2
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d4c:	e057      	b.n	8003dfe <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d11b      	bne.n	8003d94 <HAL_SPI_TransmitReceive+0x176>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d016      	beq.n	8003d94 <HAL_SPI_TransmitReceive+0x176>
 8003d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d113      	bne.n	8003d94 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	881a      	ldrh	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	1c9a      	adds	r2, r3, #2
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d119      	bne.n	8003dd6 <HAL_SPI_TransmitReceive+0x1b8>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d014      	beq.n	8003dd6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	b292      	uxth	r2, r2
 8003db8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	1c9a      	adds	r2, r3, #2
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003dd6:	f7fe fd27 	bl	8002828 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d80b      	bhi.n	8003dfe <HAL_SPI_TransmitReceive+0x1e0>
 8003de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dec:	d007      	beq.n	8003dfe <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003dfc:	e0b5      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1a2      	bne.n	8003d4e <HAL_SPI_TransmitReceive+0x130>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d19d      	bne.n	8003d4e <HAL_SPI_TransmitReceive+0x130>
 8003e12:	e080      	b.n	8003f16 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_SPI_TransmitReceive+0x204>
 8003e1c:	8b7b      	ldrh	r3, [r7, #26]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d16f      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	7812      	ldrb	r2, [r2, #0]
 8003e2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e48:	e05b      	b.n	8003f02 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d11c      	bne.n	8003e92 <HAL_SPI_TransmitReceive+0x274>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d017      	beq.n	8003e92 <HAL_SPI_TransmitReceive+0x274>
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d114      	bne.n	8003e92 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	330c      	adds	r3, #12
 8003e72:	7812      	ldrb	r2, [r2, #0]
 8003e74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d119      	bne.n	8003ed4 <HAL_SPI_TransmitReceive+0x2b6>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d014      	beq.n	8003ed4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ed4:	f7fe fca8 	bl	8002828 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d803      	bhi.n	8003eec <HAL_SPI_TransmitReceive+0x2ce>
 8003ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eea:	d102      	bne.n	8003ef2 <HAL_SPI_TransmitReceive+0x2d4>
 8003eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d107      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003f00:	e033      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d19e      	bne.n	8003e4a <HAL_SPI_TransmitReceive+0x22c>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d199      	bne.n	8003e4a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f90a 	bl	8004134 <SPI_EndRxTxTransaction>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d006      	beq.n	8003f34 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f32:	e01a      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f60:	e003      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3730      	adds	r7, #48	; 0x30
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f90:	f7fe fc4a 	bl	8002828 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fa0:	f7fe fc42 	bl	8002828 <HAL_GetTick>
 8003fa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fa6:	4b39      	ldr	r3, [pc, #228]	; (800408c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	015b      	lsls	r3, r3, #5
 8003fac:	0d1b      	lsrs	r3, r3, #20
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	fb02 f303 	mul.w	r3, r2, r3
 8003fb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fb6:	e054      	b.n	8004062 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbe:	d050      	beq.n	8004062 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fc0:	f7fe fc32 	bl	8002828 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d902      	bls.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d13d      	bne.n	8004052 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fe4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fee:	d111      	bne.n	8004014 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff8:	d004      	beq.n	8004004 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004002:	d107      	bne.n	8004014 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004012:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800401c:	d10f      	bne.n	800403e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800403c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e017      	b.n	8004082 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	3b01      	subs	r3, #1
 8004060:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	429a      	cmp	r2, r3
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	429a      	cmp	r2, r3
 800407e:	d19b      	bne.n	8003fb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20000040 	.word	0x20000040

08004090 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040a4:	d111      	bne.n	80040ca <SPI_EndRxTransaction+0x3a>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ae:	d004      	beq.n	80040ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b8:	d107      	bne.n	80040ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040d2:	d117      	bne.n	8004104 <SPI_EndRxTransaction+0x74>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040dc:	d112      	bne.n	8004104 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2200      	movs	r2, #0
 80040e6:	2101      	movs	r1, #1
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7ff ff49 	bl	8003f80 <SPI_WaitFlagStateUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01a      	beq.n	800412a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f8:	f043 0220 	orr.w	r2, r3, #32
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e013      	b.n	800412c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2200      	movs	r2, #0
 800410c:	2180      	movs	r1, #128	; 0x80
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f7ff ff36 	bl	8003f80 <SPI_WaitFlagStateUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411e:	f043 0220 	orr.w	r2, r3, #32
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e000      	b.n	800412c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2200      	movs	r2, #0
 8004148:	2180      	movs	r1, #128	; 0x80
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f7ff ff18 	bl	8003f80 <SPI_WaitFlagStateUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d007      	beq.n	8004166 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	f043 0220 	orr.w	r2, r3, #32
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e000      	b.n	8004168 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e041      	b.n	8004206 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fe f9be 	bl	8002518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4619      	mov	r1, r3
 80041ae:	4610      	mov	r0, r2
 80041b0:	f000 f940 	bl	8004434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	d001      	beq.n	8004228 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e032      	b.n	800428e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a18      	ldr	r2, [pc, #96]	; (8004298 <HAL_TIM_Base_Start+0x88>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00e      	beq.n	8004258 <HAL_TIM_Base_Start+0x48>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004242:	d009      	beq.n	8004258 <HAL_TIM_Base_Start+0x48>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a14      	ldr	r2, [pc, #80]	; (800429c <HAL_TIM_Base_Start+0x8c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d004      	beq.n	8004258 <HAL_TIM_Base_Start+0x48>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a13      	ldr	r2, [pc, #76]	; (80042a0 <HAL_TIM_Base_Start+0x90>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d111      	bne.n	800427c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b06      	cmp	r3, #6
 8004268:	d010      	beq.n	800428c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427a:	e007      	b.n	800428c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40000400 	.word	0x40000400
 80042a0:	40000800 	.word	0x40000800

080042a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_TIM_ConfigClockSource+0x1c>
 80042bc:	2302      	movs	r3, #2
 80042be:	e0b4      	b.n	800442a <HAL_TIM_ConfigClockSource+0x186>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f8:	d03e      	beq.n	8004378 <HAL_TIM_ConfigClockSource+0xd4>
 80042fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042fe:	f200 8087 	bhi.w	8004410 <HAL_TIM_ConfigClockSource+0x16c>
 8004302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004306:	f000 8086 	beq.w	8004416 <HAL_TIM_ConfigClockSource+0x172>
 800430a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430e:	d87f      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x16c>
 8004310:	2b70      	cmp	r3, #112	; 0x70
 8004312:	d01a      	beq.n	800434a <HAL_TIM_ConfigClockSource+0xa6>
 8004314:	2b70      	cmp	r3, #112	; 0x70
 8004316:	d87b      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x16c>
 8004318:	2b60      	cmp	r3, #96	; 0x60
 800431a:	d050      	beq.n	80043be <HAL_TIM_ConfigClockSource+0x11a>
 800431c:	2b60      	cmp	r3, #96	; 0x60
 800431e:	d877      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x16c>
 8004320:	2b50      	cmp	r3, #80	; 0x50
 8004322:	d03c      	beq.n	800439e <HAL_TIM_ConfigClockSource+0xfa>
 8004324:	2b50      	cmp	r3, #80	; 0x50
 8004326:	d873      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x16c>
 8004328:	2b40      	cmp	r3, #64	; 0x40
 800432a:	d058      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x13a>
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d86f      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x16c>
 8004330:	2b30      	cmp	r3, #48	; 0x30
 8004332:	d064      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x15a>
 8004334:	2b30      	cmp	r3, #48	; 0x30
 8004336:	d86b      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x16c>
 8004338:	2b20      	cmp	r3, #32
 800433a:	d060      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x15a>
 800433c:	2b20      	cmp	r3, #32
 800433e:	d867      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x16c>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d05c      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x15a>
 8004344:	2b10      	cmp	r3, #16
 8004346:	d05a      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x15a>
 8004348:	e062      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6899      	ldr	r1, [r3, #8]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f000 f944 	bl	80045e6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800436c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	609a      	str	r2, [r3, #8]
      break;
 8004376:	e04f      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	6899      	ldr	r1, [r3, #8]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f000 f92d 	bl	80045e6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800439a:	609a      	str	r2, [r3, #8]
      break;
 800439c:	e03c      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6859      	ldr	r1, [r3, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	461a      	mov	r2, r3
 80043ac:	f000 f8a4 	bl	80044f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2150      	movs	r1, #80	; 0x50
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 f8fb 	bl	80045b2 <TIM_ITRx_SetConfig>
      break;
 80043bc:	e02c      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6859      	ldr	r1, [r3, #4]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	461a      	mov	r2, r3
 80043cc:	f000 f8c2 	bl	8004554 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2160      	movs	r1, #96	; 0x60
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 f8eb 	bl	80045b2 <TIM_ITRx_SetConfig>
      break;
 80043dc:	e01c      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6859      	ldr	r1, [r3, #4]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f000 f884 	bl	80044f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2140      	movs	r1, #64	; 0x40
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 f8db 	bl	80045b2 <TIM_ITRx_SetConfig>
      break;
 80043fc:	e00c      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4619      	mov	r1, r3
 8004408:	4610      	mov	r0, r2
 800440a:	f000 f8d2 	bl	80045b2 <TIM_ITRx_SetConfig>
      break;
 800440e:	e003      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
      break;
 8004414:	e000      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004416:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004428:	7bfb      	ldrb	r3, [r7, #15]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a29      	ldr	r2, [pc, #164]	; (80044ec <TIM_Base_SetConfig+0xb8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00b      	beq.n	8004464 <TIM_Base_SetConfig+0x30>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004452:	d007      	beq.n	8004464 <TIM_Base_SetConfig+0x30>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a26      	ldr	r2, [pc, #152]	; (80044f0 <TIM_Base_SetConfig+0xbc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d003      	beq.n	8004464 <TIM_Base_SetConfig+0x30>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a25      	ldr	r2, [pc, #148]	; (80044f4 <TIM_Base_SetConfig+0xc0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d108      	bne.n	8004476 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <TIM_Base_SetConfig+0xb8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00b      	beq.n	8004496 <TIM_Base_SetConfig+0x62>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004484:	d007      	beq.n	8004496 <TIM_Base_SetConfig+0x62>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a19      	ldr	r2, [pc, #100]	; (80044f0 <TIM_Base_SetConfig+0xbc>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d003      	beq.n	8004496 <TIM_Base_SetConfig+0x62>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a18      	ldr	r2, [pc, #96]	; (80044f4 <TIM_Base_SetConfig+0xc0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d108      	bne.n	80044a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a07      	ldr	r2, [pc, #28]	; (80044ec <TIM_Base_SetConfig+0xb8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d103      	bne.n	80044dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	615a      	str	r2, [r3, #20]
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr
 80044ec:	40012c00 	.word	0x40012c00
 80044f0:	40000400 	.word	0x40000400
 80044f4:	40000800 	.word	0x40000800

080044f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f023 0201 	bic.w	r2, r3, #1
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f023 030a 	bic.w	r3, r3, #10
 8004534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4313      	orrs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	621a      	str	r2, [r3, #32]
}
 800454a:	bf00      	nop
 800454c:	371c      	adds	r7, #28
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr

08004554 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f023 0210 	bic.w	r2, r3, #16
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800457e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	031b      	lsls	r3, r3, #12
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004590:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	621a      	str	r2, [r3, #32]
}
 80045a8:	bf00      	nop
 80045aa:	371c      	adds	r7, #28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr

080045b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b085      	sub	sp, #20
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f043 0307 	orr.w	r3, r3, #7
 80045d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	609a      	str	r2, [r3, #8]
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr

080045e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b087      	sub	sp, #28
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
 80045f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004600:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	021a      	lsls	r2, r3, #8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	431a      	orrs	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	4313      	orrs	r3, r2
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	609a      	str	r2, [r3, #8]
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004638:	2302      	movs	r3, #2
 800463a:	e046      	b.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a16      	ldr	r2, [pc, #88]	; (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00e      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004688:	d009      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a12      	ldr	r2, [pc, #72]	; (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d004      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a10      	ldr	r2, [pc, #64]	; (80046dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d10c      	bne.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40000400 	.word	0x40000400
 80046dc:	40000800 	.word	0x40000800

080046e0 <__errno>:
 80046e0:	4b01      	ldr	r3, [pc, #4]	; (80046e8 <__errno+0x8>)
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	2000004c 	.word	0x2000004c

080046ec <__libc_init_array>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	2600      	movs	r6, #0
 80046f0:	4d0c      	ldr	r5, [pc, #48]	; (8004724 <__libc_init_array+0x38>)
 80046f2:	4c0d      	ldr	r4, [pc, #52]	; (8004728 <__libc_init_array+0x3c>)
 80046f4:	1b64      	subs	r4, r4, r5
 80046f6:	10a4      	asrs	r4, r4, #2
 80046f8:	42a6      	cmp	r6, r4
 80046fa:	d109      	bne.n	8004710 <__libc_init_array+0x24>
 80046fc:	f003 fe02 	bl	8008304 <_init>
 8004700:	2600      	movs	r6, #0
 8004702:	4d0a      	ldr	r5, [pc, #40]	; (800472c <__libc_init_array+0x40>)
 8004704:	4c0a      	ldr	r4, [pc, #40]	; (8004730 <__libc_init_array+0x44>)
 8004706:	1b64      	subs	r4, r4, r5
 8004708:	10a4      	asrs	r4, r4, #2
 800470a:	42a6      	cmp	r6, r4
 800470c:	d105      	bne.n	800471a <__libc_init_array+0x2e>
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	f855 3b04 	ldr.w	r3, [r5], #4
 8004714:	4798      	blx	r3
 8004716:	3601      	adds	r6, #1
 8004718:	e7ee      	b.n	80046f8 <__libc_init_array+0xc>
 800471a:	f855 3b04 	ldr.w	r3, [r5], #4
 800471e:	4798      	blx	r3
 8004720:	3601      	adds	r6, #1
 8004722:	e7f2      	b.n	800470a <__libc_init_array+0x1e>
 8004724:	080087c0 	.word	0x080087c0
 8004728:	080087c0 	.word	0x080087c0
 800472c:	080087c0 	.word	0x080087c0
 8004730:	080087c4 	.word	0x080087c4

08004734 <memset>:
 8004734:	4603      	mov	r3, r0
 8004736:	4402      	add	r2, r0
 8004738:	4293      	cmp	r3, r2
 800473a:	d100      	bne.n	800473e <memset+0xa>
 800473c:	4770      	bx	lr
 800473e:	f803 1b01 	strb.w	r1, [r3], #1
 8004742:	e7f9      	b.n	8004738 <memset+0x4>

08004744 <__cvt>:
 8004744:	2b00      	cmp	r3, #0
 8004746:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800474a:	461f      	mov	r7, r3
 800474c:	bfbb      	ittet	lt
 800474e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004752:	461f      	movlt	r7, r3
 8004754:	2300      	movge	r3, #0
 8004756:	232d      	movlt	r3, #45	; 0x2d
 8004758:	b088      	sub	sp, #32
 800475a:	4614      	mov	r4, r2
 800475c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800475e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004760:	7013      	strb	r3, [r2, #0]
 8004762:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004764:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004768:	f023 0820 	bic.w	r8, r3, #32
 800476c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004770:	d005      	beq.n	800477e <__cvt+0x3a>
 8004772:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004776:	d100      	bne.n	800477a <__cvt+0x36>
 8004778:	3501      	adds	r5, #1
 800477a:	2302      	movs	r3, #2
 800477c:	e000      	b.n	8004780 <__cvt+0x3c>
 800477e:	2303      	movs	r3, #3
 8004780:	aa07      	add	r2, sp, #28
 8004782:	9204      	str	r2, [sp, #16]
 8004784:	aa06      	add	r2, sp, #24
 8004786:	e9cd a202 	strd	sl, r2, [sp, #8]
 800478a:	e9cd 3500 	strd	r3, r5, [sp]
 800478e:	4622      	mov	r2, r4
 8004790:	463b      	mov	r3, r7
 8004792:	f000 fce5 	bl	8005160 <_dtoa_r>
 8004796:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800479a:	4606      	mov	r6, r0
 800479c:	d102      	bne.n	80047a4 <__cvt+0x60>
 800479e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047a0:	07db      	lsls	r3, r3, #31
 80047a2:	d522      	bpl.n	80047ea <__cvt+0xa6>
 80047a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80047a8:	eb06 0905 	add.w	r9, r6, r5
 80047ac:	d110      	bne.n	80047d0 <__cvt+0x8c>
 80047ae:	7833      	ldrb	r3, [r6, #0]
 80047b0:	2b30      	cmp	r3, #48	; 0x30
 80047b2:	d10a      	bne.n	80047ca <__cvt+0x86>
 80047b4:	2200      	movs	r2, #0
 80047b6:	2300      	movs	r3, #0
 80047b8:	4620      	mov	r0, r4
 80047ba:	4639      	mov	r1, r7
 80047bc:	f7fc f8f4 	bl	80009a8 <__aeabi_dcmpeq>
 80047c0:	b918      	cbnz	r0, 80047ca <__cvt+0x86>
 80047c2:	f1c5 0501 	rsb	r5, r5, #1
 80047c6:	f8ca 5000 	str.w	r5, [sl]
 80047ca:	f8da 3000 	ldr.w	r3, [sl]
 80047ce:	4499      	add	r9, r3
 80047d0:	2200      	movs	r2, #0
 80047d2:	2300      	movs	r3, #0
 80047d4:	4620      	mov	r0, r4
 80047d6:	4639      	mov	r1, r7
 80047d8:	f7fc f8e6 	bl	80009a8 <__aeabi_dcmpeq>
 80047dc:	b108      	cbz	r0, 80047e2 <__cvt+0x9e>
 80047de:	f8cd 901c 	str.w	r9, [sp, #28]
 80047e2:	2230      	movs	r2, #48	; 0x30
 80047e4:	9b07      	ldr	r3, [sp, #28]
 80047e6:	454b      	cmp	r3, r9
 80047e8:	d307      	bcc.n	80047fa <__cvt+0xb6>
 80047ea:	4630      	mov	r0, r6
 80047ec:	9b07      	ldr	r3, [sp, #28]
 80047ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80047f0:	1b9b      	subs	r3, r3, r6
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	b008      	add	sp, #32
 80047f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047fa:	1c59      	adds	r1, r3, #1
 80047fc:	9107      	str	r1, [sp, #28]
 80047fe:	701a      	strb	r2, [r3, #0]
 8004800:	e7f0      	b.n	80047e4 <__cvt+0xa0>

08004802 <__exponent>:
 8004802:	4603      	mov	r3, r0
 8004804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004806:	2900      	cmp	r1, #0
 8004808:	f803 2b02 	strb.w	r2, [r3], #2
 800480c:	bfb6      	itet	lt
 800480e:	222d      	movlt	r2, #45	; 0x2d
 8004810:	222b      	movge	r2, #43	; 0x2b
 8004812:	4249      	neglt	r1, r1
 8004814:	2909      	cmp	r1, #9
 8004816:	7042      	strb	r2, [r0, #1]
 8004818:	dd2b      	ble.n	8004872 <__exponent+0x70>
 800481a:	f10d 0407 	add.w	r4, sp, #7
 800481e:	46a4      	mov	ip, r4
 8004820:	270a      	movs	r7, #10
 8004822:	fb91 f6f7 	sdiv	r6, r1, r7
 8004826:	460a      	mov	r2, r1
 8004828:	46a6      	mov	lr, r4
 800482a:	fb07 1516 	mls	r5, r7, r6, r1
 800482e:	2a63      	cmp	r2, #99	; 0x63
 8004830:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004834:	4631      	mov	r1, r6
 8004836:	f104 34ff 	add.w	r4, r4, #4294967295
 800483a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800483e:	dcf0      	bgt.n	8004822 <__exponent+0x20>
 8004840:	3130      	adds	r1, #48	; 0x30
 8004842:	f1ae 0502 	sub.w	r5, lr, #2
 8004846:	f804 1c01 	strb.w	r1, [r4, #-1]
 800484a:	4629      	mov	r1, r5
 800484c:	1c44      	adds	r4, r0, #1
 800484e:	4561      	cmp	r1, ip
 8004850:	d30a      	bcc.n	8004868 <__exponent+0x66>
 8004852:	f10d 0209 	add.w	r2, sp, #9
 8004856:	eba2 020e 	sub.w	r2, r2, lr
 800485a:	4565      	cmp	r5, ip
 800485c:	bf88      	it	hi
 800485e:	2200      	movhi	r2, #0
 8004860:	4413      	add	r3, r2
 8004862:	1a18      	subs	r0, r3, r0
 8004864:	b003      	add	sp, #12
 8004866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004868:	f811 2b01 	ldrb.w	r2, [r1], #1
 800486c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004870:	e7ed      	b.n	800484e <__exponent+0x4c>
 8004872:	2330      	movs	r3, #48	; 0x30
 8004874:	3130      	adds	r1, #48	; 0x30
 8004876:	7083      	strb	r3, [r0, #2]
 8004878:	70c1      	strb	r1, [r0, #3]
 800487a:	1d03      	adds	r3, r0, #4
 800487c:	e7f1      	b.n	8004862 <__exponent+0x60>
	...

08004880 <_printf_float>:
 8004880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004884:	b091      	sub	sp, #68	; 0x44
 8004886:	460c      	mov	r4, r1
 8004888:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800488c:	4616      	mov	r6, r2
 800488e:	461f      	mov	r7, r3
 8004890:	4605      	mov	r5, r0
 8004892:	f001 fa53 	bl	8005d3c <_localeconv_r>
 8004896:	6803      	ldr	r3, [r0, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	9309      	str	r3, [sp, #36]	; 0x24
 800489c:	f7fb fc58 	bl	8000150 <strlen>
 80048a0:	2300      	movs	r3, #0
 80048a2:	930e      	str	r3, [sp, #56]	; 0x38
 80048a4:	f8d8 3000 	ldr.w	r3, [r8]
 80048a8:	900a      	str	r0, [sp, #40]	; 0x28
 80048aa:	3307      	adds	r3, #7
 80048ac:	f023 0307 	bic.w	r3, r3, #7
 80048b0:	f103 0208 	add.w	r2, r3, #8
 80048b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80048b8:	f8d4 b000 	ldr.w	fp, [r4]
 80048bc:	f8c8 2000 	str.w	r2, [r8]
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80048c8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80048cc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80048d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80048d2:	f04f 32ff 	mov.w	r2, #4294967295
 80048d6:	4640      	mov	r0, r8
 80048d8:	4b9c      	ldr	r3, [pc, #624]	; (8004b4c <_printf_float+0x2cc>)
 80048da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048dc:	f7fc f896 	bl	8000a0c <__aeabi_dcmpun>
 80048e0:	bb70      	cbnz	r0, 8004940 <_printf_float+0xc0>
 80048e2:	f04f 32ff 	mov.w	r2, #4294967295
 80048e6:	4640      	mov	r0, r8
 80048e8:	4b98      	ldr	r3, [pc, #608]	; (8004b4c <_printf_float+0x2cc>)
 80048ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048ec:	f7fc f870 	bl	80009d0 <__aeabi_dcmple>
 80048f0:	bb30      	cbnz	r0, 8004940 <_printf_float+0xc0>
 80048f2:	2200      	movs	r2, #0
 80048f4:	2300      	movs	r3, #0
 80048f6:	4640      	mov	r0, r8
 80048f8:	4651      	mov	r1, sl
 80048fa:	f7fc f85f 	bl	80009bc <__aeabi_dcmplt>
 80048fe:	b110      	cbz	r0, 8004906 <_printf_float+0x86>
 8004900:	232d      	movs	r3, #45	; 0x2d
 8004902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004906:	4b92      	ldr	r3, [pc, #584]	; (8004b50 <_printf_float+0x2d0>)
 8004908:	4892      	ldr	r0, [pc, #584]	; (8004b54 <_printf_float+0x2d4>)
 800490a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800490e:	bf94      	ite	ls
 8004910:	4698      	movls	r8, r3
 8004912:	4680      	movhi	r8, r0
 8004914:	2303      	movs	r3, #3
 8004916:	f04f 0a00 	mov.w	sl, #0
 800491a:	6123      	str	r3, [r4, #16]
 800491c:	f02b 0304 	bic.w	r3, fp, #4
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	4633      	mov	r3, r6
 8004924:	4621      	mov	r1, r4
 8004926:	4628      	mov	r0, r5
 8004928:	9700      	str	r7, [sp, #0]
 800492a:	aa0f      	add	r2, sp, #60	; 0x3c
 800492c:	f000 f9d4 	bl	8004cd8 <_printf_common>
 8004930:	3001      	adds	r0, #1
 8004932:	f040 8090 	bne.w	8004a56 <_printf_float+0x1d6>
 8004936:	f04f 30ff 	mov.w	r0, #4294967295
 800493a:	b011      	add	sp, #68	; 0x44
 800493c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004940:	4642      	mov	r2, r8
 8004942:	4653      	mov	r3, sl
 8004944:	4640      	mov	r0, r8
 8004946:	4651      	mov	r1, sl
 8004948:	f7fc f860 	bl	8000a0c <__aeabi_dcmpun>
 800494c:	b148      	cbz	r0, 8004962 <_printf_float+0xe2>
 800494e:	f1ba 0f00 	cmp.w	sl, #0
 8004952:	bfb8      	it	lt
 8004954:	232d      	movlt	r3, #45	; 0x2d
 8004956:	4880      	ldr	r0, [pc, #512]	; (8004b58 <_printf_float+0x2d8>)
 8004958:	bfb8      	it	lt
 800495a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800495e:	4b7f      	ldr	r3, [pc, #508]	; (8004b5c <_printf_float+0x2dc>)
 8004960:	e7d3      	b.n	800490a <_printf_float+0x8a>
 8004962:	6863      	ldr	r3, [r4, #4]
 8004964:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	d142      	bne.n	80049f2 <_printf_float+0x172>
 800496c:	2306      	movs	r3, #6
 800496e:	6063      	str	r3, [r4, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	9206      	str	r2, [sp, #24]
 8004974:	aa0e      	add	r2, sp, #56	; 0x38
 8004976:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800497a:	aa0d      	add	r2, sp, #52	; 0x34
 800497c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004980:	9203      	str	r2, [sp, #12]
 8004982:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004986:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800498a:	6023      	str	r3, [r4, #0]
 800498c:	6863      	ldr	r3, [r4, #4]
 800498e:	4642      	mov	r2, r8
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	4628      	mov	r0, r5
 8004994:	4653      	mov	r3, sl
 8004996:	910b      	str	r1, [sp, #44]	; 0x2c
 8004998:	f7ff fed4 	bl	8004744 <__cvt>
 800499c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800499e:	4680      	mov	r8, r0
 80049a0:	2947      	cmp	r1, #71	; 0x47
 80049a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80049a4:	d108      	bne.n	80049b8 <_printf_float+0x138>
 80049a6:	1cc8      	adds	r0, r1, #3
 80049a8:	db02      	blt.n	80049b0 <_printf_float+0x130>
 80049aa:	6863      	ldr	r3, [r4, #4]
 80049ac:	4299      	cmp	r1, r3
 80049ae:	dd40      	ble.n	8004a32 <_printf_float+0x1b2>
 80049b0:	f1a9 0902 	sub.w	r9, r9, #2
 80049b4:	fa5f f989 	uxtb.w	r9, r9
 80049b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80049bc:	d81f      	bhi.n	80049fe <_printf_float+0x17e>
 80049be:	464a      	mov	r2, r9
 80049c0:	3901      	subs	r1, #1
 80049c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80049c6:	910d      	str	r1, [sp, #52]	; 0x34
 80049c8:	f7ff ff1b 	bl	8004802 <__exponent>
 80049cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049ce:	4682      	mov	sl, r0
 80049d0:	1813      	adds	r3, r2, r0
 80049d2:	2a01      	cmp	r2, #1
 80049d4:	6123      	str	r3, [r4, #16]
 80049d6:	dc02      	bgt.n	80049de <_printf_float+0x15e>
 80049d8:	6822      	ldr	r2, [r4, #0]
 80049da:	07d2      	lsls	r2, r2, #31
 80049dc:	d501      	bpl.n	80049e2 <_printf_float+0x162>
 80049de:	3301      	adds	r3, #1
 80049e0:	6123      	str	r3, [r4, #16]
 80049e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d09b      	beq.n	8004922 <_printf_float+0xa2>
 80049ea:	232d      	movs	r3, #45	; 0x2d
 80049ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049f0:	e797      	b.n	8004922 <_printf_float+0xa2>
 80049f2:	2947      	cmp	r1, #71	; 0x47
 80049f4:	d1bc      	bne.n	8004970 <_printf_float+0xf0>
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1ba      	bne.n	8004970 <_printf_float+0xf0>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e7b7      	b.n	800496e <_printf_float+0xee>
 80049fe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004a02:	d118      	bne.n	8004a36 <_printf_float+0x1b6>
 8004a04:	2900      	cmp	r1, #0
 8004a06:	6863      	ldr	r3, [r4, #4]
 8004a08:	dd0b      	ble.n	8004a22 <_printf_float+0x1a2>
 8004a0a:	6121      	str	r1, [r4, #16]
 8004a0c:	b913      	cbnz	r3, 8004a14 <_printf_float+0x194>
 8004a0e:	6822      	ldr	r2, [r4, #0]
 8004a10:	07d0      	lsls	r0, r2, #31
 8004a12:	d502      	bpl.n	8004a1a <_printf_float+0x19a>
 8004a14:	3301      	adds	r3, #1
 8004a16:	440b      	add	r3, r1
 8004a18:	6123      	str	r3, [r4, #16]
 8004a1a:	f04f 0a00 	mov.w	sl, #0
 8004a1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a20:	e7df      	b.n	80049e2 <_printf_float+0x162>
 8004a22:	b913      	cbnz	r3, 8004a2a <_printf_float+0x1aa>
 8004a24:	6822      	ldr	r2, [r4, #0]
 8004a26:	07d2      	lsls	r2, r2, #31
 8004a28:	d501      	bpl.n	8004a2e <_printf_float+0x1ae>
 8004a2a:	3302      	adds	r3, #2
 8004a2c:	e7f4      	b.n	8004a18 <_printf_float+0x198>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e7f2      	b.n	8004a18 <_printf_float+0x198>
 8004a32:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004a36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a38:	4299      	cmp	r1, r3
 8004a3a:	db05      	blt.n	8004a48 <_printf_float+0x1c8>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	6121      	str	r1, [r4, #16]
 8004a40:	07d8      	lsls	r0, r3, #31
 8004a42:	d5ea      	bpl.n	8004a1a <_printf_float+0x19a>
 8004a44:	1c4b      	adds	r3, r1, #1
 8004a46:	e7e7      	b.n	8004a18 <_printf_float+0x198>
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	bfcc      	ite	gt
 8004a4c:	2201      	movgt	r2, #1
 8004a4e:	f1c1 0202 	rsble	r2, r1, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	e7e0      	b.n	8004a18 <_printf_float+0x198>
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	055a      	lsls	r2, r3, #21
 8004a5a:	d407      	bmi.n	8004a6c <_printf_float+0x1ec>
 8004a5c:	6923      	ldr	r3, [r4, #16]
 8004a5e:	4642      	mov	r2, r8
 8004a60:	4631      	mov	r1, r6
 8004a62:	4628      	mov	r0, r5
 8004a64:	47b8      	blx	r7
 8004a66:	3001      	adds	r0, #1
 8004a68:	d12b      	bne.n	8004ac2 <_printf_float+0x242>
 8004a6a:	e764      	b.n	8004936 <_printf_float+0xb6>
 8004a6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a70:	f240 80dd 	bls.w	8004c2e <_printf_float+0x3ae>
 8004a74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f7fb ff94 	bl	80009a8 <__aeabi_dcmpeq>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d033      	beq.n	8004aec <_printf_float+0x26c>
 8004a84:	2301      	movs	r3, #1
 8004a86:	4631      	mov	r1, r6
 8004a88:	4628      	mov	r0, r5
 8004a8a:	4a35      	ldr	r2, [pc, #212]	; (8004b60 <_printf_float+0x2e0>)
 8004a8c:	47b8      	blx	r7
 8004a8e:	3001      	adds	r0, #1
 8004a90:	f43f af51 	beq.w	8004936 <_printf_float+0xb6>
 8004a94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	db02      	blt.n	8004aa2 <_printf_float+0x222>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	07d8      	lsls	r0, r3, #31
 8004aa0:	d50f      	bpl.n	8004ac2 <_printf_float+0x242>
 8004aa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	47b8      	blx	r7
 8004aac:	3001      	adds	r0, #1
 8004aae:	f43f af42 	beq.w	8004936 <_printf_float+0xb6>
 8004ab2:	f04f 0800 	mov.w	r8, #0
 8004ab6:	f104 091a 	add.w	r9, r4, #26
 8004aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004abc:	3b01      	subs	r3, #1
 8004abe:	4543      	cmp	r3, r8
 8004ac0:	dc09      	bgt.n	8004ad6 <_printf_float+0x256>
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	079b      	lsls	r3, r3, #30
 8004ac6:	f100 8102 	bmi.w	8004cce <_printf_float+0x44e>
 8004aca:	68e0      	ldr	r0, [r4, #12]
 8004acc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ace:	4298      	cmp	r0, r3
 8004ad0:	bfb8      	it	lt
 8004ad2:	4618      	movlt	r0, r3
 8004ad4:	e731      	b.n	800493a <_printf_float+0xba>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	464a      	mov	r2, r9
 8004ada:	4631      	mov	r1, r6
 8004adc:	4628      	mov	r0, r5
 8004ade:	47b8      	blx	r7
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	f43f af28 	beq.w	8004936 <_printf_float+0xb6>
 8004ae6:	f108 0801 	add.w	r8, r8, #1
 8004aea:	e7e6      	b.n	8004aba <_printf_float+0x23a>
 8004aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	dc38      	bgt.n	8004b64 <_printf_float+0x2e4>
 8004af2:	2301      	movs	r3, #1
 8004af4:	4631      	mov	r1, r6
 8004af6:	4628      	mov	r0, r5
 8004af8:	4a19      	ldr	r2, [pc, #100]	; (8004b60 <_printf_float+0x2e0>)
 8004afa:	47b8      	blx	r7
 8004afc:	3001      	adds	r0, #1
 8004afe:	f43f af1a 	beq.w	8004936 <_printf_float+0xb6>
 8004b02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b06:	4313      	orrs	r3, r2
 8004b08:	d102      	bne.n	8004b10 <_printf_float+0x290>
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	07d9      	lsls	r1, r3, #31
 8004b0e:	d5d8      	bpl.n	8004ac2 <_printf_float+0x242>
 8004b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b14:	4631      	mov	r1, r6
 8004b16:	4628      	mov	r0, r5
 8004b18:	47b8      	blx	r7
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	f43f af0b 	beq.w	8004936 <_printf_float+0xb6>
 8004b20:	f04f 0900 	mov.w	r9, #0
 8004b24:	f104 0a1a 	add.w	sl, r4, #26
 8004b28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b2a:	425b      	negs	r3, r3
 8004b2c:	454b      	cmp	r3, r9
 8004b2e:	dc01      	bgt.n	8004b34 <_printf_float+0x2b4>
 8004b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b32:	e794      	b.n	8004a5e <_printf_float+0x1de>
 8004b34:	2301      	movs	r3, #1
 8004b36:	4652      	mov	r2, sl
 8004b38:	4631      	mov	r1, r6
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	47b8      	blx	r7
 8004b3e:	3001      	adds	r0, #1
 8004b40:	f43f aef9 	beq.w	8004936 <_printf_float+0xb6>
 8004b44:	f109 0901 	add.w	r9, r9, #1
 8004b48:	e7ee      	b.n	8004b28 <_printf_float+0x2a8>
 8004b4a:	bf00      	nop
 8004b4c:	7fefffff 	.word	0x7fefffff
 8004b50:	080083b8 	.word	0x080083b8
 8004b54:	080083bc 	.word	0x080083bc
 8004b58:	080083c4 	.word	0x080083c4
 8004b5c:	080083c0 	.word	0x080083c0
 8004b60:	080083c8 	.word	0x080083c8
 8004b64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	bfa8      	it	ge
 8004b6c:	461a      	movge	r2, r3
 8004b6e:	2a00      	cmp	r2, #0
 8004b70:	4691      	mov	r9, r2
 8004b72:	dc37      	bgt.n	8004be4 <_printf_float+0x364>
 8004b74:	f04f 0b00 	mov.w	fp, #0
 8004b78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b7c:	f104 021a 	add.w	r2, r4, #26
 8004b80:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004b84:	ebaa 0309 	sub.w	r3, sl, r9
 8004b88:	455b      	cmp	r3, fp
 8004b8a:	dc33      	bgt.n	8004bf4 <_printf_float+0x374>
 8004b8c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b90:	429a      	cmp	r2, r3
 8004b92:	db3b      	blt.n	8004c0c <_printf_float+0x38c>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	07da      	lsls	r2, r3, #31
 8004b98:	d438      	bmi.n	8004c0c <_printf_float+0x38c>
 8004b9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b9e:	eba3 020a 	sub.w	r2, r3, sl
 8004ba2:	eba3 0901 	sub.w	r9, r3, r1
 8004ba6:	4591      	cmp	r9, r2
 8004ba8:	bfa8      	it	ge
 8004baa:	4691      	movge	r9, r2
 8004bac:	f1b9 0f00 	cmp.w	r9, #0
 8004bb0:	dc34      	bgt.n	8004c1c <_printf_float+0x39c>
 8004bb2:	f04f 0800 	mov.w	r8, #0
 8004bb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bba:	f104 0a1a 	add.w	sl, r4, #26
 8004bbe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bc2:	1a9b      	subs	r3, r3, r2
 8004bc4:	eba3 0309 	sub.w	r3, r3, r9
 8004bc8:	4543      	cmp	r3, r8
 8004bca:	f77f af7a 	ble.w	8004ac2 <_printf_float+0x242>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	4652      	mov	r2, sl
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	47b8      	blx	r7
 8004bd8:	3001      	adds	r0, #1
 8004bda:	f43f aeac 	beq.w	8004936 <_printf_float+0xb6>
 8004bde:	f108 0801 	add.w	r8, r8, #1
 8004be2:	e7ec      	b.n	8004bbe <_printf_float+0x33e>
 8004be4:	4613      	mov	r3, r2
 8004be6:	4631      	mov	r1, r6
 8004be8:	4642      	mov	r2, r8
 8004bea:	4628      	mov	r0, r5
 8004bec:	47b8      	blx	r7
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d1c0      	bne.n	8004b74 <_printf_float+0x2f4>
 8004bf2:	e6a0      	b.n	8004936 <_printf_float+0xb6>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	4631      	mov	r1, r6
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	920b      	str	r2, [sp, #44]	; 0x2c
 8004bfc:	47b8      	blx	r7
 8004bfe:	3001      	adds	r0, #1
 8004c00:	f43f ae99 	beq.w	8004936 <_printf_float+0xb6>
 8004c04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c06:	f10b 0b01 	add.w	fp, fp, #1
 8004c0a:	e7b9      	b.n	8004b80 <_printf_float+0x300>
 8004c0c:	4631      	mov	r1, r6
 8004c0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c12:	4628      	mov	r0, r5
 8004c14:	47b8      	blx	r7
 8004c16:	3001      	adds	r0, #1
 8004c18:	d1bf      	bne.n	8004b9a <_printf_float+0x31a>
 8004c1a:	e68c      	b.n	8004936 <_printf_float+0xb6>
 8004c1c:	464b      	mov	r3, r9
 8004c1e:	4631      	mov	r1, r6
 8004c20:	4628      	mov	r0, r5
 8004c22:	eb08 020a 	add.w	r2, r8, sl
 8004c26:	47b8      	blx	r7
 8004c28:	3001      	adds	r0, #1
 8004c2a:	d1c2      	bne.n	8004bb2 <_printf_float+0x332>
 8004c2c:	e683      	b.n	8004936 <_printf_float+0xb6>
 8004c2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c30:	2a01      	cmp	r2, #1
 8004c32:	dc01      	bgt.n	8004c38 <_printf_float+0x3b8>
 8004c34:	07db      	lsls	r3, r3, #31
 8004c36:	d537      	bpl.n	8004ca8 <_printf_float+0x428>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	4642      	mov	r2, r8
 8004c3c:	4631      	mov	r1, r6
 8004c3e:	4628      	mov	r0, r5
 8004c40:	47b8      	blx	r7
 8004c42:	3001      	adds	r0, #1
 8004c44:	f43f ae77 	beq.w	8004936 <_printf_float+0xb6>
 8004c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	4628      	mov	r0, r5
 8004c50:	47b8      	blx	r7
 8004c52:	3001      	adds	r0, #1
 8004c54:	f43f ae6f 	beq.w	8004936 <_printf_float+0xb6>
 8004c58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f7fb fea2 	bl	80009a8 <__aeabi_dcmpeq>
 8004c64:	b9d8      	cbnz	r0, 8004c9e <_printf_float+0x41e>
 8004c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c68:	f108 0201 	add.w	r2, r8, #1
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	4631      	mov	r1, r6
 8004c70:	4628      	mov	r0, r5
 8004c72:	47b8      	blx	r7
 8004c74:	3001      	adds	r0, #1
 8004c76:	d10e      	bne.n	8004c96 <_printf_float+0x416>
 8004c78:	e65d      	b.n	8004936 <_printf_float+0xb6>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	464a      	mov	r2, r9
 8004c7e:	4631      	mov	r1, r6
 8004c80:	4628      	mov	r0, r5
 8004c82:	47b8      	blx	r7
 8004c84:	3001      	adds	r0, #1
 8004c86:	f43f ae56 	beq.w	8004936 <_printf_float+0xb6>
 8004c8a:	f108 0801 	add.w	r8, r8, #1
 8004c8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c90:	3b01      	subs	r3, #1
 8004c92:	4543      	cmp	r3, r8
 8004c94:	dcf1      	bgt.n	8004c7a <_printf_float+0x3fa>
 8004c96:	4653      	mov	r3, sl
 8004c98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c9c:	e6e0      	b.n	8004a60 <_printf_float+0x1e0>
 8004c9e:	f04f 0800 	mov.w	r8, #0
 8004ca2:	f104 091a 	add.w	r9, r4, #26
 8004ca6:	e7f2      	b.n	8004c8e <_printf_float+0x40e>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	4642      	mov	r2, r8
 8004cac:	e7df      	b.n	8004c6e <_printf_float+0x3ee>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	464a      	mov	r2, r9
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	47b8      	blx	r7
 8004cb8:	3001      	adds	r0, #1
 8004cba:	f43f ae3c 	beq.w	8004936 <_printf_float+0xb6>
 8004cbe:	f108 0801 	add.w	r8, r8, #1
 8004cc2:	68e3      	ldr	r3, [r4, #12]
 8004cc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004cc6:	1a5b      	subs	r3, r3, r1
 8004cc8:	4543      	cmp	r3, r8
 8004cca:	dcf0      	bgt.n	8004cae <_printf_float+0x42e>
 8004ccc:	e6fd      	b.n	8004aca <_printf_float+0x24a>
 8004cce:	f04f 0800 	mov.w	r8, #0
 8004cd2:	f104 0919 	add.w	r9, r4, #25
 8004cd6:	e7f4      	b.n	8004cc2 <_printf_float+0x442>

08004cd8 <_printf_common>:
 8004cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cdc:	4616      	mov	r6, r2
 8004cde:	4699      	mov	r9, r3
 8004ce0:	688a      	ldr	r2, [r1, #8]
 8004ce2:	690b      	ldr	r3, [r1, #16]
 8004ce4:	4607      	mov	r7, r0
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	bfb8      	it	lt
 8004cea:	4613      	movlt	r3, r2
 8004cec:	6033      	str	r3, [r6, #0]
 8004cee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cf8:	b10a      	cbz	r2, 8004cfe <_printf_common+0x26>
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	6033      	str	r3, [r6, #0]
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	0699      	lsls	r1, r3, #26
 8004d02:	bf42      	ittt	mi
 8004d04:	6833      	ldrmi	r3, [r6, #0]
 8004d06:	3302      	addmi	r3, #2
 8004d08:	6033      	strmi	r3, [r6, #0]
 8004d0a:	6825      	ldr	r5, [r4, #0]
 8004d0c:	f015 0506 	ands.w	r5, r5, #6
 8004d10:	d106      	bne.n	8004d20 <_printf_common+0x48>
 8004d12:	f104 0a19 	add.w	sl, r4, #25
 8004d16:	68e3      	ldr	r3, [r4, #12]
 8004d18:	6832      	ldr	r2, [r6, #0]
 8004d1a:	1a9b      	subs	r3, r3, r2
 8004d1c:	42ab      	cmp	r3, r5
 8004d1e:	dc28      	bgt.n	8004d72 <_printf_common+0x9a>
 8004d20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d24:	1e13      	subs	r3, r2, #0
 8004d26:	6822      	ldr	r2, [r4, #0]
 8004d28:	bf18      	it	ne
 8004d2a:	2301      	movne	r3, #1
 8004d2c:	0692      	lsls	r2, r2, #26
 8004d2e:	d42d      	bmi.n	8004d8c <_printf_common+0xb4>
 8004d30:	4649      	mov	r1, r9
 8004d32:	4638      	mov	r0, r7
 8004d34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d38:	47c0      	blx	r8
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	d020      	beq.n	8004d80 <_printf_common+0xa8>
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	68e5      	ldr	r5, [r4, #12]
 8004d42:	f003 0306 	and.w	r3, r3, #6
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	bf18      	it	ne
 8004d4a:	2500      	movne	r5, #0
 8004d4c:	6832      	ldr	r2, [r6, #0]
 8004d4e:	f04f 0600 	mov.w	r6, #0
 8004d52:	68a3      	ldr	r3, [r4, #8]
 8004d54:	bf08      	it	eq
 8004d56:	1aad      	subeq	r5, r5, r2
 8004d58:	6922      	ldr	r2, [r4, #16]
 8004d5a:	bf08      	it	eq
 8004d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d60:	4293      	cmp	r3, r2
 8004d62:	bfc4      	itt	gt
 8004d64:	1a9b      	subgt	r3, r3, r2
 8004d66:	18ed      	addgt	r5, r5, r3
 8004d68:	341a      	adds	r4, #26
 8004d6a:	42b5      	cmp	r5, r6
 8004d6c:	d11a      	bne.n	8004da4 <_printf_common+0xcc>
 8004d6e:	2000      	movs	r0, #0
 8004d70:	e008      	b.n	8004d84 <_printf_common+0xac>
 8004d72:	2301      	movs	r3, #1
 8004d74:	4652      	mov	r2, sl
 8004d76:	4649      	mov	r1, r9
 8004d78:	4638      	mov	r0, r7
 8004d7a:	47c0      	blx	r8
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d103      	bne.n	8004d88 <_printf_common+0xb0>
 8004d80:	f04f 30ff 	mov.w	r0, #4294967295
 8004d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d88:	3501      	adds	r5, #1
 8004d8a:	e7c4      	b.n	8004d16 <_printf_common+0x3e>
 8004d8c:	2030      	movs	r0, #48	; 0x30
 8004d8e:	18e1      	adds	r1, r4, r3
 8004d90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d9a:	4422      	add	r2, r4
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004da2:	e7c5      	b.n	8004d30 <_printf_common+0x58>
 8004da4:	2301      	movs	r3, #1
 8004da6:	4622      	mov	r2, r4
 8004da8:	4649      	mov	r1, r9
 8004daa:	4638      	mov	r0, r7
 8004dac:	47c0      	blx	r8
 8004dae:	3001      	adds	r0, #1
 8004db0:	d0e6      	beq.n	8004d80 <_printf_common+0xa8>
 8004db2:	3601      	adds	r6, #1
 8004db4:	e7d9      	b.n	8004d6a <_printf_common+0x92>
	...

08004db8 <_printf_i>:
 8004db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dbc:	7e0f      	ldrb	r7, [r1, #24]
 8004dbe:	4691      	mov	r9, r2
 8004dc0:	2f78      	cmp	r7, #120	; 0x78
 8004dc2:	4680      	mov	r8, r0
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	469a      	mov	sl, r3
 8004dc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004dca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004dce:	d807      	bhi.n	8004de0 <_printf_i+0x28>
 8004dd0:	2f62      	cmp	r7, #98	; 0x62
 8004dd2:	d80a      	bhi.n	8004dea <_printf_i+0x32>
 8004dd4:	2f00      	cmp	r7, #0
 8004dd6:	f000 80d9 	beq.w	8004f8c <_printf_i+0x1d4>
 8004dda:	2f58      	cmp	r7, #88	; 0x58
 8004ddc:	f000 80a4 	beq.w	8004f28 <_printf_i+0x170>
 8004de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004de4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004de8:	e03a      	b.n	8004e60 <_printf_i+0xa8>
 8004dea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dee:	2b15      	cmp	r3, #21
 8004df0:	d8f6      	bhi.n	8004de0 <_printf_i+0x28>
 8004df2:	a101      	add	r1, pc, #4	; (adr r1, 8004df8 <_printf_i+0x40>)
 8004df4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004df8:	08004e51 	.word	0x08004e51
 8004dfc:	08004e65 	.word	0x08004e65
 8004e00:	08004de1 	.word	0x08004de1
 8004e04:	08004de1 	.word	0x08004de1
 8004e08:	08004de1 	.word	0x08004de1
 8004e0c:	08004de1 	.word	0x08004de1
 8004e10:	08004e65 	.word	0x08004e65
 8004e14:	08004de1 	.word	0x08004de1
 8004e18:	08004de1 	.word	0x08004de1
 8004e1c:	08004de1 	.word	0x08004de1
 8004e20:	08004de1 	.word	0x08004de1
 8004e24:	08004f73 	.word	0x08004f73
 8004e28:	08004e95 	.word	0x08004e95
 8004e2c:	08004f55 	.word	0x08004f55
 8004e30:	08004de1 	.word	0x08004de1
 8004e34:	08004de1 	.word	0x08004de1
 8004e38:	08004f95 	.word	0x08004f95
 8004e3c:	08004de1 	.word	0x08004de1
 8004e40:	08004e95 	.word	0x08004e95
 8004e44:	08004de1 	.word	0x08004de1
 8004e48:	08004de1 	.word	0x08004de1
 8004e4c:	08004f5d 	.word	0x08004f5d
 8004e50:	682b      	ldr	r3, [r5, #0]
 8004e52:	1d1a      	adds	r2, r3, #4
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	602a      	str	r2, [r5, #0]
 8004e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e60:	2301      	movs	r3, #1
 8004e62:	e0a4      	b.n	8004fae <_printf_i+0x1f6>
 8004e64:	6820      	ldr	r0, [r4, #0]
 8004e66:	6829      	ldr	r1, [r5, #0]
 8004e68:	0606      	lsls	r6, r0, #24
 8004e6a:	f101 0304 	add.w	r3, r1, #4
 8004e6e:	d50a      	bpl.n	8004e86 <_printf_i+0xce>
 8004e70:	680e      	ldr	r6, [r1, #0]
 8004e72:	602b      	str	r3, [r5, #0]
 8004e74:	2e00      	cmp	r6, #0
 8004e76:	da03      	bge.n	8004e80 <_printf_i+0xc8>
 8004e78:	232d      	movs	r3, #45	; 0x2d
 8004e7a:	4276      	negs	r6, r6
 8004e7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e80:	230a      	movs	r3, #10
 8004e82:	485e      	ldr	r0, [pc, #376]	; (8004ffc <_printf_i+0x244>)
 8004e84:	e019      	b.n	8004eba <_printf_i+0x102>
 8004e86:	680e      	ldr	r6, [r1, #0]
 8004e88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e8c:	602b      	str	r3, [r5, #0]
 8004e8e:	bf18      	it	ne
 8004e90:	b236      	sxthne	r6, r6
 8004e92:	e7ef      	b.n	8004e74 <_printf_i+0xbc>
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	6820      	ldr	r0, [r4, #0]
 8004e98:	1d19      	adds	r1, r3, #4
 8004e9a:	6029      	str	r1, [r5, #0]
 8004e9c:	0601      	lsls	r1, r0, #24
 8004e9e:	d501      	bpl.n	8004ea4 <_printf_i+0xec>
 8004ea0:	681e      	ldr	r6, [r3, #0]
 8004ea2:	e002      	b.n	8004eaa <_printf_i+0xf2>
 8004ea4:	0646      	lsls	r6, r0, #25
 8004ea6:	d5fb      	bpl.n	8004ea0 <_printf_i+0xe8>
 8004ea8:	881e      	ldrh	r6, [r3, #0]
 8004eaa:	2f6f      	cmp	r7, #111	; 0x6f
 8004eac:	bf0c      	ite	eq
 8004eae:	2308      	moveq	r3, #8
 8004eb0:	230a      	movne	r3, #10
 8004eb2:	4852      	ldr	r0, [pc, #328]	; (8004ffc <_printf_i+0x244>)
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eba:	6865      	ldr	r5, [r4, #4]
 8004ebc:	2d00      	cmp	r5, #0
 8004ebe:	bfa8      	it	ge
 8004ec0:	6821      	ldrge	r1, [r4, #0]
 8004ec2:	60a5      	str	r5, [r4, #8]
 8004ec4:	bfa4      	itt	ge
 8004ec6:	f021 0104 	bicge.w	r1, r1, #4
 8004eca:	6021      	strge	r1, [r4, #0]
 8004ecc:	b90e      	cbnz	r6, 8004ed2 <_printf_i+0x11a>
 8004ece:	2d00      	cmp	r5, #0
 8004ed0:	d04d      	beq.n	8004f6e <_printf_i+0x1b6>
 8004ed2:	4615      	mov	r5, r2
 8004ed4:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ed8:	fb03 6711 	mls	r7, r3, r1, r6
 8004edc:	5dc7      	ldrb	r7, [r0, r7]
 8004ede:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ee2:	4637      	mov	r7, r6
 8004ee4:	42bb      	cmp	r3, r7
 8004ee6:	460e      	mov	r6, r1
 8004ee8:	d9f4      	bls.n	8004ed4 <_printf_i+0x11c>
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d10b      	bne.n	8004f06 <_printf_i+0x14e>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	07de      	lsls	r6, r3, #31
 8004ef2:	d508      	bpl.n	8004f06 <_printf_i+0x14e>
 8004ef4:	6923      	ldr	r3, [r4, #16]
 8004ef6:	6861      	ldr	r1, [r4, #4]
 8004ef8:	4299      	cmp	r1, r3
 8004efa:	bfde      	ittt	le
 8004efc:	2330      	movle	r3, #48	; 0x30
 8004efe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f06:	1b52      	subs	r2, r2, r5
 8004f08:	6122      	str	r2, [r4, #16]
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	4640      	mov	r0, r8
 8004f10:	f8cd a000 	str.w	sl, [sp]
 8004f14:	aa03      	add	r2, sp, #12
 8004f16:	f7ff fedf 	bl	8004cd8 <_printf_common>
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d14c      	bne.n	8004fb8 <_printf_i+0x200>
 8004f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f22:	b004      	add	sp, #16
 8004f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f28:	4834      	ldr	r0, [pc, #208]	; (8004ffc <_printf_i+0x244>)
 8004f2a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f2e:	6829      	ldr	r1, [r5, #0]
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f36:	6029      	str	r1, [r5, #0]
 8004f38:	061d      	lsls	r5, r3, #24
 8004f3a:	d514      	bpl.n	8004f66 <_printf_i+0x1ae>
 8004f3c:	07df      	lsls	r7, r3, #31
 8004f3e:	bf44      	itt	mi
 8004f40:	f043 0320 	orrmi.w	r3, r3, #32
 8004f44:	6023      	strmi	r3, [r4, #0]
 8004f46:	b91e      	cbnz	r6, 8004f50 <_printf_i+0x198>
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	f023 0320 	bic.w	r3, r3, #32
 8004f4e:	6023      	str	r3, [r4, #0]
 8004f50:	2310      	movs	r3, #16
 8004f52:	e7af      	b.n	8004eb4 <_printf_i+0xfc>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	f043 0320 	orr.w	r3, r3, #32
 8004f5a:	6023      	str	r3, [r4, #0]
 8004f5c:	2378      	movs	r3, #120	; 0x78
 8004f5e:	4828      	ldr	r0, [pc, #160]	; (8005000 <_printf_i+0x248>)
 8004f60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f64:	e7e3      	b.n	8004f2e <_printf_i+0x176>
 8004f66:	0659      	lsls	r1, r3, #25
 8004f68:	bf48      	it	mi
 8004f6a:	b2b6      	uxthmi	r6, r6
 8004f6c:	e7e6      	b.n	8004f3c <_printf_i+0x184>
 8004f6e:	4615      	mov	r5, r2
 8004f70:	e7bb      	b.n	8004eea <_printf_i+0x132>
 8004f72:	682b      	ldr	r3, [r5, #0]
 8004f74:	6826      	ldr	r6, [r4, #0]
 8004f76:	1d18      	adds	r0, r3, #4
 8004f78:	6961      	ldr	r1, [r4, #20]
 8004f7a:	6028      	str	r0, [r5, #0]
 8004f7c:	0635      	lsls	r5, r6, #24
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	d501      	bpl.n	8004f86 <_printf_i+0x1ce>
 8004f82:	6019      	str	r1, [r3, #0]
 8004f84:	e002      	b.n	8004f8c <_printf_i+0x1d4>
 8004f86:	0670      	lsls	r0, r6, #25
 8004f88:	d5fb      	bpl.n	8004f82 <_printf_i+0x1ca>
 8004f8a:	8019      	strh	r1, [r3, #0]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	4615      	mov	r5, r2
 8004f90:	6123      	str	r3, [r4, #16]
 8004f92:	e7ba      	b.n	8004f0a <_printf_i+0x152>
 8004f94:	682b      	ldr	r3, [r5, #0]
 8004f96:	2100      	movs	r1, #0
 8004f98:	1d1a      	adds	r2, r3, #4
 8004f9a:	602a      	str	r2, [r5, #0]
 8004f9c:	681d      	ldr	r5, [r3, #0]
 8004f9e:	6862      	ldr	r2, [r4, #4]
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	f000 fed7 	bl	8005d54 <memchr>
 8004fa6:	b108      	cbz	r0, 8004fac <_printf_i+0x1f4>
 8004fa8:	1b40      	subs	r0, r0, r5
 8004faa:	6060      	str	r0, [r4, #4]
 8004fac:	6863      	ldr	r3, [r4, #4]
 8004fae:	6123      	str	r3, [r4, #16]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb6:	e7a8      	b.n	8004f0a <_printf_i+0x152>
 8004fb8:	462a      	mov	r2, r5
 8004fba:	4649      	mov	r1, r9
 8004fbc:	4640      	mov	r0, r8
 8004fbe:	6923      	ldr	r3, [r4, #16]
 8004fc0:	47d0      	blx	sl
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	d0ab      	beq.n	8004f1e <_printf_i+0x166>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	079b      	lsls	r3, r3, #30
 8004fca:	d413      	bmi.n	8004ff4 <_printf_i+0x23c>
 8004fcc:	68e0      	ldr	r0, [r4, #12]
 8004fce:	9b03      	ldr	r3, [sp, #12]
 8004fd0:	4298      	cmp	r0, r3
 8004fd2:	bfb8      	it	lt
 8004fd4:	4618      	movlt	r0, r3
 8004fd6:	e7a4      	b.n	8004f22 <_printf_i+0x16a>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	4632      	mov	r2, r6
 8004fdc:	4649      	mov	r1, r9
 8004fde:	4640      	mov	r0, r8
 8004fe0:	47d0      	blx	sl
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	d09b      	beq.n	8004f1e <_printf_i+0x166>
 8004fe6:	3501      	adds	r5, #1
 8004fe8:	68e3      	ldr	r3, [r4, #12]
 8004fea:	9903      	ldr	r1, [sp, #12]
 8004fec:	1a5b      	subs	r3, r3, r1
 8004fee:	42ab      	cmp	r3, r5
 8004ff0:	dcf2      	bgt.n	8004fd8 <_printf_i+0x220>
 8004ff2:	e7eb      	b.n	8004fcc <_printf_i+0x214>
 8004ff4:	2500      	movs	r5, #0
 8004ff6:	f104 0619 	add.w	r6, r4, #25
 8004ffa:	e7f5      	b.n	8004fe8 <_printf_i+0x230>
 8004ffc:	080083ca 	.word	0x080083ca
 8005000:	080083db 	.word	0x080083db

08005004 <siprintf>:
 8005004:	b40e      	push	{r1, r2, r3}
 8005006:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800500a:	b500      	push	{lr}
 800500c:	b09c      	sub	sp, #112	; 0x70
 800500e:	ab1d      	add	r3, sp, #116	; 0x74
 8005010:	9002      	str	r0, [sp, #8]
 8005012:	9006      	str	r0, [sp, #24]
 8005014:	9107      	str	r1, [sp, #28]
 8005016:	9104      	str	r1, [sp, #16]
 8005018:	4808      	ldr	r0, [pc, #32]	; (800503c <siprintf+0x38>)
 800501a:	4909      	ldr	r1, [pc, #36]	; (8005040 <siprintf+0x3c>)
 800501c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005020:	9105      	str	r1, [sp, #20]
 8005022:	6800      	ldr	r0, [r0, #0]
 8005024:	a902      	add	r1, sp, #8
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	f001 fb7e 	bl	8006728 <_svfiprintf_r>
 800502c:	2200      	movs	r2, #0
 800502e:	9b02      	ldr	r3, [sp, #8]
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	b01c      	add	sp, #112	; 0x70
 8005034:	f85d eb04 	ldr.w	lr, [sp], #4
 8005038:	b003      	add	sp, #12
 800503a:	4770      	bx	lr
 800503c:	2000004c 	.word	0x2000004c
 8005040:	ffff0208 	.word	0xffff0208

08005044 <quorem>:
 8005044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005048:	6903      	ldr	r3, [r0, #16]
 800504a:	690c      	ldr	r4, [r1, #16]
 800504c:	4607      	mov	r7, r0
 800504e:	42a3      	cmp	r3, r4
 8005050:	f2c0 8082 	blt.w	8005158 <quorem+0x114>
 8005054:	3c01      	subs	r4, #1
 8005056:	f100 0514 	add.w	r5, r0, #20
 800505a:	f101 0814 	add.w	r8, r1, #20
 800505e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005062:	9301      	str	r3, [sp, #4]
 8005064:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005068:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800506c:	3301      	adds	r3, #1
 800506e:	429a      	cmp	r2, r3
 8005070:	fbb2 f6f3 	udiv	r6, r2, r3
 8005074:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005078:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800507c:	d331      	bcc.n	80050e2 <quorem+0x9e>
 800507e:	f04f 0e00 	mov.w	lr, #0
 8005082:	4640      	mov	r0, r8
 8005084:	46ac      	mov	ip, r5
 8005086:	46f2      	mov	sl, lr
 8005088:	f850 2b04 	ldr.w	r2, [r0], #4
 800508c:	b293      	uxth	r3, r2
 800508e:	fb06 e303 	mla	r3, r6, r3, lr
 8005092:	0c12      	lsrs	r2, r2, #16
 8005094:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005098:	b29b      	uxth	r3, r3
 800509a:	fb06 e202 	mla	r2, r6, r2, lr
 800509e:	ebaa 0303 	sub.w	r3, sl, r3
 80050a2:	f8dc a000 	ldr.w	sl, [ip]
 80050a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050aa:	fa1f fa8a 	uxth.w	sl, sl
 80050ae:	4453      	add	r3, sl
 80050b0:	f8dc a000 	ldr.w	sl, [ip]
 80050b4:	b292      	uxth	r2, r2
 80050b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80050ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050be:	b29b      	uxth	r3, r3
 80050c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050c4:	4581      	cmp	r9, r0
 80050c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050ca:	f84c 3b04 	str.w	r3, [ip], #4
 80050ce:	d2db      	bcs.n	8005088 <quorem+0x44>
 80050d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80050d4:	b92b      	cbnz	r3, 80050e2 <quorem+0x9e>
 80050d6:	9b01      	ldr	r3, [sp, #4]
 80050d8:	3b04      	subs	r3, #4
 80050da:	429d      	cmp	r5, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	d32f      	bcc.n	8005140 <quorem+0xfc>
 80050e0:	613c      	str	r4, [r7, #16]
 80050e2:	4638      	mov	r0, r7
 80050e4:	f001 f8d0 	bl	8006288 <__mcmp>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	db25      	blt.n	8005138 <quorem+0xf4>
 80050ec:	4628      	mov	r0, r5
 80050ee:	f04f 0c00 	mov.w	ip, #0
 80050f2:	3601      	adds	r6, #1
 80050f4:	f858 1b04 	ldr.w	r1, [r8], #4
 80050f8:	f8d0 e000 	ldr.w	lr, [r0]
 80050fc:	b28b      	uxth	r3, r1
 80050fe:	ebac 0303 	sub.w	r3, ip, r3
 8005102:	fa1f f28e 	uxth.w	r2, lr
 8005106:	4413      	add	r3, r2
 8005108:	0c0a      	lsrs	r2, r1, #16
 800510a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800510e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005112:	b29b      	uxth	r3, r3
 8005114:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005118:	45c1      	cmp	r9, r8
 800511a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800511e:	f840 3b04 	str.w	r3, [r0], #4
 8005122:	d2e7      	bcs.n	80050f4 <quorem+0xb0>
 8005124:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005128:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800512c:	b922      	cbnz	r2, 8005138 <quorem+0xf4>
 800512e:	3b04      	subs	r3, #4
 8005130:	429d      	cmp	r5, r3
 8005132:	461a      	mov	r2, r3
 8005134:	d30a      	bcc.n	800514c <quorem+0x108>
 8005136:	613c      	str	r4, [r7, #16]
 8005138:	4630      	mov	r0, r6
 800513a:	b003      	add	sp, #12
 800513c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005140:	6812      	ldr	r2, [r2, #0]
 8005142:	3b04      	subs	r3, #4
 8005144:	2a00      	cmp	r2, #0
 8005146:	d1cb      	bne.n	80050e0 <quorem+0x9c>
 8005148:	3c01      	subs	r4, #1
 800514a:	e7c6      	b.n	80050da <quorem+0x96>
 800514c:	6812      	ldr	r2, [r2, #0]
 800514e:	3b04      	subs	r3, #4
 8005150:	2a00      	cmp	r2, #0
 8005152:	d1f0      	bne.n	8005136 <quorem+0xf2>
 8005154:	3c01      	subs	r4, #1
 8005156:	e7eb      	b.n	8005130 <quorem+0xec>
 8005158:	2000      	movs	r0, #0
 800515a:	e7ee      	b.n	800513a <quorem+0xf6>
 800515c:	0000      	movs	r0, r0
	...

08005160 <_dtoa_r>:
 8005160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005164:	4616      	mov	r6, r2
 8005166:	461f      	mov	r7, r3
 8005168:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800516a:	b099      	sub	sp, #100	; 0x64
 800516c:	4605      	mov	r5, r0
 800516e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005172:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005176:	b974      	cbnz	r4, 8005196 <_dtoa_r+0x36>
 8005178:	2010      	movs	r0, #16
 800517a:	f000 fde3 	bl	8005d44 <malloc>
 800517e:	4602      	mov	r2, r0
 8005180:	6268      	str	r0, [r5, #36]	; 0x24
 8005182:	b920      	cbnz	r0, 800518e <_dtoa_r+0x2e>
 8005184:	21ea      	movs	r1, #234	; 0xea
 8005186:	4ba8      	ldr	r3, [pc, #672]	; (8005428 <_dtoa_r+0x2c8>)
 8005188:	48a8      	ldr	r0, [pc, #672]	; (800542c <_dtoa_r+0x2cc>)
 800518a:	f001 fbdd 	bl	8006948 <__assert_func>
 800518e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005192:	6004      	str	r4, [r0, #0]
 8005194:	60c4      	str	r4, [r0, #12]
 8005196:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005198:	6819      	ldr	r1, [r3, #0]
 800519a:	b151      	cbz	r1, 80051b2 <_dtoa_r+0x52>
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	2301      	movs	r3, #1
 80051a0:	4093      	lsls	r3, r2
 80051a2:	604a      	str	r2, [r1, #4]
 80051a4:	608b      	str	r3, [r1, #8]
 80051a6:	4628      	mov	r0, r5
 80051a8:	f000 fe30 	bl	8005e0c <_Bfree>
 80051ac:	2200      	movs	r2, #0
 80051ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	1e3b      	subs	r3, r7, #0
 80051b4:	bfaf      	iteee	ge
 80051b6:	2300      	movge	r3, #0
 80051b8:	2201      	movlt	r2, #1
 80051ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051be:	9305      	strlt	r3, [sp, #20]
 80051c0:	bfa8      	it	ge
 80051c2:	f8c8 3000 	strge.w	r3, [r8]
 80051c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80051ca:	4b99      	ldr	r3, [pc, #612]	; (8005430 <_dtoa_r+0x2d0>)
 80051cc:	bfb8      	it	lt
 80051ce:	f8c8 2000 	strlt.w	r2, [r8]
 80051d2:	ea33 0309 	bics.w	r3, r3, r9
 80051d6:	d119      	bne.n	800520c <_dtoa_r+0xac>
 80051d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80051dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051e4:	4333      	orrs	r3, r6
 80051e6:	f000 857f 	beq.w	8005ce8 <_dtoa_r+0xb88>
 80051ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80051ec:	b953      	cbnz	r3, 8005204 <_dtoa_r+0xa4>
 80051ee:	4b91      	ldr	r3, [pc, #580]	; (8005434 <_dtoa_r+0x2d4>)
 80051f0:	e022      	b.n	8005238 <_dtoa_r+0xd8>
 80051f2:	4b91      	ldr	r3, [pc, #580]	; (8005438 <_dtoa_r+0x2d8>)
 80051f4:	9303      	str	r3, [sp, #12]
 80051f6:	3308      	adds	r3, #8
 80051f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	9803      	ldr	r0, [sp, #12]
 80051fe:	b019      	add	sp, #100	; 0x64
 8005200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005204:	4b8b      	ldr	r3, [pc, #556]	; (8005434 <_dtoa_r+0x2d4>)
 8005206:	9303      	str	r3, [sp, #12]
 8005208:	3303      	adds	r3, #3
 800520a:	e7f5      	b.n	80051f8 <_dtoa_r+0x98>
 800520c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005210:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005214:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005218:	2200      	movs	r2, #0
 800521a:	2300      	movs	r3, #0
 800521c:	f7fb fbc4 	bl	80009a8 <__aeabi_dcmpeq>
 8005220:	4680      	mov	r8, r0
 8005222:	b158      	cbz	r0, 800523c <_dtoa_r+0xdc>
 8005224:	2301      	movs	r3, #1
 8005226:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8558 	beq.w	8005ce2 <_dtoa_r+0xb82>
 8005232:	4882      	ldr	r0, [pc, #520]	; (800543c <_dtoa_r+0x2dc>)
 8005234:	6018      	str	r0, [r3, #0]
 8005236:	1e43      	subs	r3, r0, #1
 8005238:	9303      	str	r3, [sp, #12]
 800523a:	e7df      	b.n	80051fc <_dtoa_r+0x9c>
 800523c:	ab16      	add	r3, sp, #88	; 0x58
 800523e:	9301      	str	r3, [sp, #4]
 8005240:	ab17      	add	r3, sp, #92	; 0x5c
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	4628      	mov	r0, r5
 8005246:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800524a:	f001 f8c5 	bl	80063d8 <__d2b>
 800524e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005252:	4683      	mov	fp, r0
 8005254:	2c00      	cmp	r4, #0
 8005256:	d07f      	beq.n	8005358 <_dtoa_r+0x1f8>
 8005258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800525c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800525e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005262:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005266:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800526a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800526e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005272:	2200      	movs	r2, #0
 8005274:	4b72      	ldr	r3, [pc, #456]	; (8005440 <_dtoa_r+0x2e0>)
 8005276:	f7fa ff77 	bl	8000168 <__aeabi_dsub>
 800527a:	a365      	add	r3, pc, #404	; (adr r3, 8005410 <_dtoa_r+0x2b0>)
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f7fb f92a 	bl	80004d8 <__aeabi_dmul>
 8005284:	a364      	add	r3, pc, #400	; (adr r3, 8005418 <_dtoa_r+0x2b8>)
 8005286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528a:	f7fa ff6f 	bl	800016c <__adddf3>
 800528e:	4606      	mov	r6, r0
 8005290:	4620      	mov	r0, r4
 8005292:	460f      	mov	r7, r1
 8005294:	f7fb f8b6 	bl	8000404 <__aeabi_i2d>
 8005298:	a361      	add	r3, pc, #388	; (adr r3, 8005420 <_dtoa_r+0x2c0>)
 800529a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529e:	f7fb f91b 	bl	80004d8 <__aeabi_dmul>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4630      	mov	r0, r6
 80052a8:	4639      	mov	r1, r7
 80052aa:	f7fa ff5f 	bl	800016c <__adddf3>
 80052ae:	4606      	mov	r6, r0
 80052b0:	460f      	mov	r7, r1
 80052b2:	f7fb fbc1 	bl	8000a38 <__aeabi_d2iz>
 80052b6:	2200      	movs	r2, #0
 80052b8:	4682      	mov	sl, r0
 80052ba:	2300      	movs	r3, #0
 80052bc:	4630      	mov	r0, r6
 80052be:	4639      	mov	r1, r7
 80052c0:	f7fb fb7c 	bl	80009bc <__aeabi_dcmplt>
 80052c4:	b148      	cbz	r0, 80052da <_dtoa_r+0x17a>
 80052c6:	4650      	mov	r0, sl
 80052c8:	f7fb f89c 	bl	8000404 <__aeabi_i2d>
 80052cc:	4632      	mov	r2, r6
 80052ce:	463b      	mov	r3, r7
 80052d0:	f7fb fb6a 	bl	80009a8 <__aeabi_dcmpeq>
 80052d4:	b908      	cbnz	r0, 80052da <_dtoa_r+0x17a>
 80052d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052da:	f1ba 0f16 	cmp.w	sl, #22
 80052de:	d858      	bhi.n	8005392 <_dtoa_r+0x232>
 80052e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052e4:	4b57      	ldr	r3, [pc, #348]	; (8005444 <_dtoa_r+0x2e4>)
 80052e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f7fb fb65 	bl	80009bc <__aeabi_dcmplt>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d04f      	beq.n	8005396 <_dtoa_r+0x236>
 80052f6:	2300      	movs	r3, #0
 80052f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80052fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005300:	1b1c      	subs	r4, r3, r4
 8005302:	1e63      	subs	r3, r4, #1
 8005304:	9309      	str	r3, [sp, #36]	; 0x24
 8005306:	bf49      	itett	mi
 8005308:	f1c4 0301 	rsbmi	r3, r4, #1
 800530c:	2300      	movpl	r3, #0
 800530e:	9306      	strmi	r3, [sp, #24]
 8005310:	2300      	movmi	r3, #0
 8005312:	bf54      	ite	pl
 8005314:	9306      	strpl	r3, [sp, #24]
 8005316:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005318:	f1ba 0f00 	cmp.w	sl, #0
 800531c:	db3d      	blt.n	800539a <_dtoa_r+0x23a>
 800531e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005320:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005324:	4453      	add	r3, sl
 8005326:	9309      	str	r3, [sp, #36]	; 0x24
 8005328:	2300      	movs	r3, #0
 800532a:	930a      	str	r3, [sp, #40]	; 0x28
 800532c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800532e:	2b09      	cmp	r3, #9
 8005330:	f200 808c 	bhi.w	800544c <_dtoa_r+0x2ec>
 8005334:	2b05      	cmp	r3, #5
 8005336:	bfc4      	itt	gt
 8005338:	3b04      	subgt	r3, #4
 800533a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800533c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800533e:	bfc8      	it	gt
 8005340:	2400      	movgt	r4, #0
 8005342:	f1a3 0302 	sub.w	r3, r3, #2
 8005346:	bfd8      	it	le
 8005348:	2401      	movle	r4, #1
 800534a:	2b03      	cmp	r3, #3
 800534c:	f200 808a 	bhi.w	8005464 <_dtoa_r+0x304>
 8005350:	e8df f003 	tbb	[pc, r3]
 8005354:	5b4d4f2d 	.word	0x5b4d4f2d
 8005358:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800535c:	441c      	add	r4, r3
 800535e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005362:	2b20      	cmp	r3, #32
 8005364:	bfc3      	ittte	gt
 8005366:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800536a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800536e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005372:	f1c3 0320 	rsble	r3, r3, #32
 8005376:	bfc6      	itte	gt
 8005378:	fa26 f000 	lsrgt.w	r0, r6, r0
 800537c:	4318      	orrgt	r0, r3
 800537e:	fa06 f003 	lslle.w	r0, r6, r3
 8005382:	f7fb f82f 	bl	80003e4 <__aeabi_ui2d>
 8005386:	2301      	movs	r3, #1
 8005388:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800538c:	3c01      	subs	r4, #1
 800538e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005390:	e76f      	b.n	8005272 <_dtoa_r+0x112>
 8005392:	2301      	movs	r3, #1
 8005394:	e7b2      	b.n	80052fc <_dtoa_r+0x19c>
 8005396:	900f      	str	r0, [sp, #60]	; 0x3c
 8005398:	e7b1      	b.n	80052fe <_dtoa_r+0x19e>
 800539a:	9b06      	ldr	r3, [sp, #24]
 800539c:	eba3 030a 	sub.w	r3, r3, sl
 80053a0:	9306      	str	r3, [sp, #24]
 80053a2:	f1ca 0300 	rsb	r3, sl, #0
 80053a6:	930a      	str	r3, [sp, #40]	; 0x28
 80053a8:	2300      	movs	r3, #0
 80053aa:	930e      	str	r3, [sp, #56]	; 0x38
 80053ac:	e7be      	b.n	800532c <_dtoa_r+0x1cc>
 80053ae:	2300      	movs	r3, #0
 80053b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80053b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	dc58      	bgt.n	800546a <_dtoa_r+0x30a>
 80053b8:	f04f 0901 	mov.w	r9, #1
 80053bc:	464b      	mov	r3, r9
 80053be:	f8cd 9020 	str.w	r9, [sp, #32]
 80053c2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80053c6:	2200      	movs	r2, #0
 80053c8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80053ca:	6042      	str	r2, [r0, #4]
 80053cc:	2204      	movs	r2, #4
 80053ce:	f102 0614 	add.w	r6, r2, #20
 80053d2:	429e      	cmp	r6, r3
 80053d4:	6841      	ldr	r1, [r0, #4]
 80053d6:	d94e      	bls.n	8005476 <_dtoa_r+0x316>
 80053d8:	4628      	mov	r0, r5
 80053da:	f000 fcd7 	bl	8005d8c <_Balloc>
 80053de:	9003      	str	r0, [sp, #12]
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d14c      	bne.n	800547e <_dtoa_r+0x31e>
 80053e4:	4602      	mov	r2, r0
 80053e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80053ea:	4b17      	ldr	r3, [pc, #92]	; (8005448 <_dtoa_r+0x2e8>)
 80053ec:	e6cc      	b.n	8005188 <_dtoa_r+0x28>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e7de      	b.n	80053b0 <_dtoa_r+0x250>
 80053f2:	2300      	movs	r3, #0
 80053f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80053f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053f8:	eb0a 0903 	add.w	r9, sl, r3
 80053fc:	f109 0301 	add.w	r3, r9, #1
 8005400:	2b01      	cmp	r3, #1
 8005402:	9308      	str	r3, [sp, #32]
 8005404:	bfb8      	it	lt
 8005406:	2301      	movlt	r3, #1
 8005408:	e7dd      	b.n	80053c6 <_dtoa_r+0x266>
 800540a:	2301      	movs	r3, #1
 800540c:	e7f2      	b.n	80053f4 <_dtoa_r+0x294>
 800540e:	bf00      	nop
 8005410:	636f4361 	.word	0x636f4361
 8005414:	3fd287a7 	.word	0x3fd287a7
 8005418:	8b60c8b3 	.word	0x8b60c8b3
 800541c:	3fc68a28 	.word	0x3fc68a28
 8005420:	509f79fb 	.word	0x509f79fb
 8005424:	3fd34413 	.word	0x3fd34413
 8005428:	080083f9 	.word	0x080083f9
 800542c:	08008410 	.word	0x08008410
 8005430:	7ff00000 	.word	0x7ff00000
 8005434:	080083f5 	.word	0x080083f5
 8005438:	080083ec 	.word	0x080083ec
 800543c:	080083c9 	.word	0x080083c9
 8005440:	3ff80000 	.word	0x3ff80000
 8005444:	08008500 	.word	0x08008500
 8005448:	0800846b 	.word	0x0800846b
 800544c:	2401      	movs	r4, #1
 800544e:	2300      	movs	r3, #0
 8005450:	940b      	str	r4, [sp, #44]	; 0x2c
 8005452:	9322      	str	r3, [sp, #136]	; 0x88
 8005454:	f04f 39ff 	mov.w	r9, #4294967295
 8005458:	2200      	movs	r2, #0
 800545a:	2312      	movs	r3, #18
 800545c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005460:	9223      	str	r2, [sp, #140]	; 0x8c
 8005462:	e7b0      	b.n	80053c6 <_dtoa_r+0x266>
 8005464:	2301      	movs	r3, #1
 8005466:	930b      	str	r3, [sp, #44]	; 0x2c
 8005468:	e7f4      	b.n	8005454 <_dtoa_r+0x2f4>
 800546a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800546e:	464b      	mov	r3, r9
 8005470:	f8cd 9020 	str.w	r9, [sp, #32]
 8005474:	e7a7      	b.n	80053c6 <_dtoa_r+0x266>
 8005476:	3101      	adds	r1, #1
 8005478:	6041      	str	r1, [r0, #4]
 800547a:	0052      	lsls	r2, r2, #1
 800547c:	e7a7      	b.n	80053ce <_dtoa_r+0x26e>
 800547e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005480:	9a03      	ldr	r2, [sp, #12]
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	9b08      	ldr	r3, [sp, #32]
 8005486:	2b0e      	cmp	r3, #14
 8005488:	f200 80a8 	bhi.w	80055dc <_dtoa_r+0x47c>
 800548c:	2c00      	cmp	r4, #0
 800548e:	f000 80a5 	beq.w	80055dc <_dtoa_r+0x47c>
 8005492:	f1ba 0f00 	cmp.w	sl, #0
 8005496:	dd34      	ble.n	8005502 <_dtoa_r+0x3a2>
 8005498:	4a9a      	ldr	r2, [pc, #616]	; (8005704 <_dtoa_r+0x5a4>)
 800549a:	f00a 030f 	and.w	r3, sl, #15
 800549e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80054a2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80054a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80054ae:	ea4f 142a 	mov.w	r4, sl, asr #4
 80054b2:	d016      	beq.n	80054e2 <_dtoa_r+0x382>
 80054b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054b8:	4b93      	ldr	r3, [pc, #588]	; (8005708 <_dtoa_r+0x5a8>)
 80054ba:	2703      	movs	r7, #3
 80054bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054c0:	f7fb f934 	bl	800072c <__aeabi_ddiv>
 80054c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054c8:	f004 040f 	and.w	r4, r4, #15
 80054cc:	4e8e      	ldr	r6, [pc, #568]	; (8005708 <_dtoa_r+0x5a8>)
 80054ce:	b954      	cbnz	r4, 80054e6 <_dtoa_r+0x386>
 80054d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054d8:	f7fb f928 	bl	800072c <__aeabi_ddiv>
 80054dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054e0:	e029      	b.n	8005536 <_dtoa_r+0x3d6>
 80054e2:	2702      	movs	r7, #2
 80054e4:	e7f2      	b.n	80054cc <_dtoa_r+0x36c>
 80054e6:	07e1      	lsls	r1, r4, #31
 80054e8:	d508      	bpl.n	80054fc <_dtoa_r+0x39c>
 80054ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054f2:	f7fa fff1 	bl	80004d8 <__aeabi_dmul>
 80054f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054fa:	3701      	adds	r7, #1
 80054fc:	1064      	asrs	r4, r4, #1
 80054fe:	3608      	adds	r6, #8
 8005500:	e7e5      	b.n	80054ce <_dtoa_r+0x36e>
 8005502:	f000 80a5 	beq.w	8005650 <_dtoa_r+0x4f0>
 8005506:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800550a:	f1ca 0400 	rsb	r4, sl, #0
 800550e:	4b7d      	ldr	r3, [pc, #500]	; (8005704 <_dtoa_r+0x5a4>)
 8005510:	f004 020f 	and.w	r2, r4, #15
 8005514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	f7fa ffdc 	bl	80004d8 <__aeabi_dmul>
 8005520:	2702      	movs	r7, #2
 8005522:	2300      	movs	r3, #0
 8005524:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005528:	4e77      	ldr	r6, [pc, #476]	; (8005708 <_dtoa_r+0x5a8>)
 800552a:	1124      	asrs	r4, r4, #4
 800552c:	2c00      	cmp	r4, #0
 800552e:	f040 8084 	bne.w	800563a <_dtoa_r+0x4da>
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1d2      	bne.n	80054dc <_dtoa_r+0x37c>
 8005536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 808b 	beq.w	8005654 <_dtoa_r+0x4f4>
 800553e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005542:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005546:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800554a:	2200      	movs	r2, #0
 800554c:	4b6f      	ldr	r3, [pc, #444]	; (800570c <_dtoa_r+0x5ac>)
 800554e:	f7fb fa35 	bl	80009bc <__aeabi_dcmplt>
 8005552:	2800      	cmp	r0, #0
 8005554:	d07e      	beq.n	8005654 <_dtoa_r+0x4f4>
 8005556:	9b08      	ldr	r3, [sp, #32]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d07b      	beq.n	8005654 <_dtoa_r+0x4f4>
 800555c:	f1b9 0f00 	cmp.w	r9, #0
 8005560:	dd38      	ble.n	80055d4 <_dtoa_r+0x474>
 8005562:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005566:	2200      	movs	r2, #0
 8005568:	4b69      	ldr	r3, [pc, #420]	; (8005710 <_dtoa_r+0x5b0>)
 800556a:	f7fa ffb5 	bl	80004d8 <__aeabi_dmul>
 800556e:	464c      	mov	r4, r9
 8005570:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005574:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005578:	3701      	adds	r7, #1
 800557a:	4638      	mov	r0, r7
 800557c:	f7fa ff42 	bl	8000404 <__aeabi_i2d>
 8005580:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005584:	f7fa ffa8 	bl	80004d8 <__aeabi_dmul>
 8005588:	2200      	movs	r2, #0
 800558a:	4b62      	ldr	r3, [pc, #392]	; (8005714 <_dtoa_r+0x5b4>)
 800558c:	f7fa fdee 	bl	800016c <__adddf3>
 8005590:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005594:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005598:	9611      	str	r6, [sp, #68]	; 0x44
 800559a:	2c00      	cmp	r4, #0
 800559c:	d15d      	bne.n	800565a <_dtoa_r+0x4fa>
 800559e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055a2:	2200      	movs	r2, #0
 80055a4:	4b5c      	ldr	r3, [pc, #368]	; (8005718 <_dtoa_r+0x5b8>)
 80055a6:	f7fa fddf 	bl	8000168 <__aeabi_dsub>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055b2:	4633      	mov	r3, r6
 80055b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055b6:	f7fb fa1f 	bl	80009f8 <__aeabi_dcmpgt>
 80055ba:	2800      	cmp	r0, #0
 80055bc:	f040 829c 	bne.w	8005af8 <_dtoa_r+0x998>
 80055c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80055ca:	f7fb f9f7 	bl	80009bc <__aeabi_dcmplt>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	f040 8290 	bne.w	8005af4 <_dtoa_r+0x994>
 80055d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80055d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80055dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f2c0 8152 	blt.w	8005888 <_dtoa_r+0x728>
 80055e4:	f1ba 0f0e 	cmp.w	sl, #14
 80055e8:	f300 814e 	bgt.w	8005888 <_dtoa_r+0x728>
 80055ec:	4b45      	ldr	r3, [pc, #276]	; (8005704 <_dtoa_r+0x5a4>)
 80055ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80055fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f280 80db 	bge.w	80057b8 <_dtoa_r+0x658>
 8005602:	9b08      	ldr	r3, [sp, #32]
 8005604:	2b00      	cmp	r3, #0
 8005606:	f300 80d7 	bgt.w	80057b8 <_dtoa_r+0x658>
 800560a:	f040 8272 	bne.w	8005af2 <_dtoa_r+0x992>
 800560e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005612:	2200      	movs	r2, #0
 8005614:	4b40      	ldr	r3, [pc, #256]	; (8005718 <_dtoa_r+0x5b8>)
 8005616:	f7fa ff5f 	bl	80004d8 <__aeabi_dmul>
 800561a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800561e:	f7fb f9e1 	bl	80009e4 <__aeabi_dcmpge>
 8005622:	9c08      	ldr	r4, [sp, #32]
 8005624:	4626      	mov	r6, r4
 8005626:	2800      	cmp	r0, #0
 8005628:	f040 8248 	bne.w	8005abc <_dtoa_r+0x95c>
 800562c:	2331      	movs	r3, #49	; 0x31
 800562e:	9f03      	ldr	r7, [sp, #12]
 8005630:	f10a 0a01 	add.w	sl, sl, #1
 8005634:	f807 3b01 	strb.w	r3, [r7], #1
 8005638:	e244      	b.n	8005ac4 <_dtoa_r+0x964>
 800563a:	07e2      	lsls	r2, r4, #31
 800563c:	d505      	bpl.n	800564a <_dtoa_r+0x4ea>
 800563e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005642:	f7fa ff49 	bl	80004d8 <__aeabi_dmul>
 8005646:	2301      	movs	r3, #1
 8005648:	3701      	adds	r7, #1
 800564a:	1064      	asrs	r4, r4, #1
 800564c:	3608      	adds	r6, #8
 800564e:	e76d      	b.n	800552c <_dtoa_r+0x3cc>
 8005650:	2702      	movs	r7, #2
 8005652:	e770      	b.n	8005536 <_dtoa_r+0x3d6>
 8005654:	46d0      	mov	r8, sl
 8005656:	9c08      	ldr	r4, [sp, #32]
 8005658:	e78f      	b.n	800557a <_dtoa_r+0x41a>
 800565a:	9903      	ldr	r1, [sp, #12]
 800565c:	4b29      	ldr	r3, [pc, #164]	; (8005704 <_dtoa_r+0x5a4>)
 800565e:	4421      	add	r1, r4
 8005660:	9112      	str	r1, [sp, #72]	; 0x48
 8005662:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005664:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005668:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800566c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005670:	2900      	cmp	r1, #0
 8005672:	d055      	beq.n	8005720 <_dtoa_r+0x5c0>
 8005674:	2000      	movs	r0, #0
 8005676:	4929      	ldr	r1, [pc, #164]	; (800571c <_dtoa_r+0x5bc>)
 8005678:	f7fb f858 	bl	800072c <__aeabi_ddiv>
 800567c:	463b      	mov	r3, r7
 800567e:	4632      	mov	r2, r6
 8005680:	f7fa fd72 	bl	8000168 <__aeabi_dsub>
 8005684:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005688:	9f03      	ldr	r7, [sp, #12]
 800568a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800568e:	f7fb f9d3 	bl	8000a38 <__aeabi_d2iz>
 8005692:	4604      	mov	r4, r0
 8005694:	f7fa feb6 	bl	8000404 <__aeabi_i2d>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056a0:	f7fa fd62 	bl	8000168 <__aeabi_dsub>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	3430      	adds	r4, #48	; 0x30
 80056aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056b2:	f807 4b01 	strb.w	r4, [r7], #1
 80056b6:	f7fb f981 	bl	80009bc <__aeabi_dcmplt>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d174      	bne.n	80057a8 <_dtoa_r+0x648>
 80056be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056c2:	2000      	movs	r0, #0
 80056c4:	4911      	ldr	r1, [pc, #68]	; (800570c <_dtoa_r+0x5ac>)
 80056c6:	f7fa fd4f 	bl	8000168 <__aeabi_dsub>
 80056ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056ce:	f7fb f975 	bl	80009bc <__aeabi_dcmplt>
 80056d2:	2800      	cmp	r0, #0
 80056d4:	f040 80b7 	bne.w	8005846 <_dtoa_r+0x6e6>
 80056d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056da:	429f      	cmp	r7, r3
 80056dc:	f43f af7a 	beq.w	80055d4 <_dtoa_r+0x474>
 80056e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056e4:	2200      	movs	r2, #0
 80056e6:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <_dtoa_r+0x5b0>)
 80056e8:	f7fa fef6 	bl	80004d8 <__aeabi_dmul>
 80056ec:	2200      	movs	r2, #0
 80056ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056f6:	4b06      	ldr	r3, [pc, #24]	; (8005710 <_dtoa_r+0x5b0>)
 80056f8:	f7fa feee 	bl	80004d8 <__aeabi_dmul>
 80056fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005700:	e7c3      	b.n	800568a <_dtoa_r+0x52a>
 8005702:	bf00      	nop
 8005704:	08008500 	.word	0x08008500
 8005708:	080084d8 	.word	0x080084d8
 800570c:	3ff00000 	.word	0x3ff00000
 8005710:	40240000 	.word	0x40240000
 8005714:	401c0000 	.word	0x401c0000
 8005718:	40140000 	.word	0x40140000
 800571c:	3fe00000 	.word	0x3fe00000
 8005720:	4630      	mov	r0, r6
 8005722:	4639      	mov	r1, r7
 8005724:	f7fa fed8 	bl	80004d8 <__aeabi_dmul>
 8005728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800572a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800572e:	9c03      	ldr	r4, [sp, #12]
 8005730:	9314      	str	r3, [sp, #80]	; 0x50
 8005732:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005736:	f7fb f97f 	bl	8000a38 <__aeabi_d2iz>
 800573a:	9015      	str	r0, [sp, #84]	; 0x54
 800573c:	f7fa fe62 	bl	8000404 <__aeabi_i2d>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005748:	f7fa fd0e 	bl	8000168 <__aeabi_dsub>
 800574c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800574e:	4606      	mov	r6, r0
 8005750:	3330      	adds	r3, #48	; 0x30
 8005752:	f804 3b01 	strb.w	r3, [r4], #1
 8005756:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005758:	460f      	mov	r7, r1
 800575a:	429c      	cmp	r4, r3
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	d124      	bne.n	80057ac <_dtoa_r+0x64c>
 8005762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005766:	4bb0      	ldr	r3, [pc, #704]	; (8005a28 <_dtoa_r+0x8c8>)
 8005768:	f7fa fd00 	bl	800016c <__adddf3>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4630      	mov	r0, r6
 8005772:	4639      	mov	r1, r7
 8005774:	f7fb f940 	bl	80009f8 <__aeabi_dcmpgt>
 8005778:	2800      	cmp	r0, #0
 800577a:	d163      	bne.n	8005844 <_dtoa_r+0x6e4>
 800577c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005780:	2000      	movs	r0, #0
 8005782:	49a9      	ldr	r1, [pc, #676]	; (8005a28 <_dtoa_r+0x8c8>)
 8005784:	f7fa fcf0 	bl	8000168 <__aeabi_dsub>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4630      	mov	r0, r6
 800578e:	4639      	mov	r1, r7
 8005790:	f7fb f914 	bl	80009bc <__aeabi_dcmplt>
 8005794:	2800      	cmp	r0, #0
 8005796:	f43f af1d 	beq.w	80055d4 <_dtoa_r+0x474>
 800579a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800579c:	1e7b      	subs	r3, r7, #1
 800579e:	9314      	str	r3, [sp, #80]	; 0x50
 80057a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80057a4:	2b30      	cmp	r3, #48	; 0x30
 80057a6:	d0f8      	beq.n	800579a <_dtoa_r+0x63a>
 80057a8:	46c2      	mov	sl, r8
 80057aa:	e03b      	b.n	8005824 <_dtoa_r+0x6c4>
 80057ac:	4b9f      	ldr	r3, [pc, #636]	; (8005a2c <_dtoa_r+0x8cc>)
 80057ae:	f7fa fe93 	bl	80004d8 <__aeabi_dmul>
 80057b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057b6:	e7bc      	b.n	8005732 <_dtoa_r+0x5d2>
 80057b8:	9f03      	ldr	r7, [sp, #12]
 80057ba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80057be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057c2:	4640      	mov	r0, r8
 80057c4:	4649      	mov	r1, r9
 80057c6:	f7fa ffb1 	bl	800072c <__aeabi_ddiv>
 80057ca:	f7fb f935 	bl	8000a38 <__aeabi_d2iz>
 80057ce:	4604      	mov	r4, r0
 80057d0:	f7fa fe18 	bl	8000404 <__aeabi_i2d>
 80057d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057d8:	f7fa fe7e 	bl	80004d8 <__aeabi_dmul>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4640      	mov	r0, r8
 80057e2:	4649      	mov	r1, r9
 80057e4:	f7fa fcc0 	bl	8000168 <__aeabi_dsub>
 80057e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80057ec:	f807 6b01 	strb.w	r6, [r7], #1
 80057f0:	9e03      	ldr	r6, [sp, #12]
 80057f2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80057f6:	1bbe      	subs	r6, r7, r6
 80057f8:	45b4      	cmp	ip, r6
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	d136      	bne.n	800586e <_dtoa_r+0x70e>
 8005800:	f7fa fcb4 	bl	800016c <__adddf3>
 8005804:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005808:	4680      	mov	r8, r0
 800580a:	4689      	mov	r9, r1
 800580c:	f7fb f8f4 	bl	80009f8 <__aeabi_dcmpgt>
 8005810:	bb58      	cbnz	r0, 800586a <_dtoa_r+0x70a>
 8005812:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005816:	4640      	mov	r0, r8
 8005818:	4649      	mov	r1, r9
 800581a:	f7fb f8c5 	bl	80009a8 <__aeabi_dcmpeq>
 800581e:	b108      	cbz	r0, 8005824 <_dtoa_r+0x6c4>
 8005820:	07e1      	lsls	r1, r4, #31
 8005822:	d422      	bmi.n	800586a <_dtoa_r+0x70a>
 8005824:	4628      	mov	r0, r5
 8005826:	4659      	mov	r1, fp
 8005828:	f000 faf0 	bl	8005e0c <_Bfree>
 800582c:	2300      	movs	r3, #0
 800582e:	703b      	strb	r3, [r7, #0]
 8005830:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005832:	f10a 0001 	add.w	r0, sl, #1
 8005836:	6018      	str	r0, [r3, #0]
 8005838:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800583a:	2b00      	cmp	r3, #0
 800583c:	f43f acde 	beq.w	80051fc <_dtoa_r+0x9c>
 8005840:	601f      	str	r7, [r3, #0]
 8005842:	e4db      	b.n	80051fc <_dtoa_r+0x9c>
 8005844:	4627      	mov	r7, r4
 8005846:	463b      	mov	r3, r7
 8005848:	461f      	mov	r7, r3
 800584a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800584e:	2a39      	cmp	r2, #57	; 0x39
 8005850:	d107      	bne.n	8005862 <_dtoa_r+0x702>
 8005852:	9a03      	ldr	r2, [sp, #12]
 8005854:	429a      	cmp	r2, r3
 8005856:	d1f7      	bne.n	8005848 <_dtoa_r+0x6e8>
 8005858:	2230      	movs	r2, #48	; 0x30
 800585a:	9903      	ldr	r1, [sp, #12]
 800585c:	f108 0801 	add.w	r8, r8, #1
 8005860:	700a      	strb	r2, [r1, #0]
 8005862:	781a      	ldrb	r2, [r3, #0]
 8005864:	3201      	adds	r2, #1
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	e79e      	b.n	80057a8 <_dtoa_r+0x648>
 800586a:	46d0      	mov	r8, sl
 800586c:	e7eb      	b.n	8005846 <_dtoa_r+0x6e6>
 800586e:	2200      	movs	r2, #0
 8005870:	4b6e      	ldr	r3, [pc, #440]	; (8005a2c <_dtoa_r+0x8cc>)
 8005872:	f7fa fe31 	bl	80004d8 <__aeabi_dmul>
 8005876:	2200      	movs	r2, #0
 8005878:	2300      	movs	r3, #0
 800587a:	4680      	mov	r8, r0
 800587c:	4689      	mov	r9, r1
 800587e:	f7fb f893 	bl	80009a8 <__aeabi_dcmpeq>
 8005882:	2800      	cmp	r0, #0
 8005884:	d09b      	beq.n	80057be <_dtoa_r+0x65e>
 8005886:	e7cd      	b.n	8005824 <_dtoa_r+0x6c4>
 8005888:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800588a:	2a00      	cmp	r2, #0
 800588c:	f000 80d0 	beq.w	8005a30 <_dtoa_r+0x8d0>
 8005890:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005892:	2a01      	cmp	r2, #1
 8005894:	f300 80ae 	bgt.w	80059f4 <_dtoa_r+0x894>
 8005898:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800589a:	2a00      	cmp	r2, #0
 800589c:	f000 80a6 	beq.w	80059ec <_dtoa_r+0x88c>
 80058a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80058a6:	9f06      	ldr	r7, [sp, #24]
 80058a8:	9a06      	ldr	r2, [sp, #24]
 80058aa:	2101      	movs	r1, #1
 80058ac:	441a      	add	r2, r3
 80058ae:	9206      	str	r2, [sp, #24]
 80058b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058b2:	4628      	mov	r0, r5
 80058b4:	441a      	add	r2, r3
 80058b6:	9209      	str	r2, [sp, #36]	; 0x24
 80058b8:	f000 fb5e 	bl	8005f78 <__i2b>
 80058bc:	4606      	mov	r6, r0
 80058be:	2f00      	cmp	r7, #0
 80058c0:	dd0c      	ble.n	80058dc <_dtoa_r+0x77c>
 80058c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	dd09      	ble.n	80058dc <_dtoa_r+0x77c>
 80058c8:	42bb      	cmp	r3, r7
 80058ca:	bfa8      	it	ge
 80058cc:	463b      	movge	r3, r7
 80058ce:	9a06      	ldr	r2, [sp, #24]
 80058d0:	1aff      	subs	r7, r7, r3
 80058d2:	1ad2      	subs	r2, r2, r3
 80058d4:	9206      	str	r2, [sp, #24]
 80058d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	9309      	str	r3, [sp, #36]	; 0x24
 80058dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058de:	b1f3      	cbz	r3, 800591e <_dtoa_r+0x7be>
 80058e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 80a8 	beq.w	8005a38 <_dtoa_r+0x8d8>
 80058e8:	2c00      	cmp	r4, #0
 80058ea:	dd10      	ble.n	800590e <_dtoa_r+0x7ae>
 80058ec:	4631      	mov	r1, r6
 80058ee:	4622      	mov	r2, r4
 80058f0:	4628      	mov	r0, r5
 80058f2:	f000 fbff 	bl	80060f4 <__pow5mult>
 80058f6:	465a      	mov	r2, fp
 80058f8:	4601      	mov	r1, r0
 80058fa:	4606      	mov	r6, r0
 80058fc:	4628      	mov	r0, r5
 80058fe:	f000 fb51 	bl	8005fa4 <__multiply>
 8005902:	4680      	mov	r8, r0
 8005904:	4659      	mov	r1, fp
 8005906:	4628      	mov	r0, r5
 8005908:	f000 fa80 	bl	8005e0c <_Bfree>
 800590c:	46c3      	mov	fp, r8
 800590e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005910:	1b1a      	subs	r2, r3, r4
 8005912:	d004      	beq.n	800591e <_dtoa_r+0x7be>
 8005914:	4659      	mov	r1, fp
 8005916:	4628      	mov	r0, r5
 8005918:	f000 fbec 	bl	80060f4 <__pow5mult>
 800591c:	4683      	mov	fp, r0
 800591e:	2101      	movs	r1, #1
 8005920:	4628      	mov	r0, r5
 8005922:	f000 fb29 	bl	8005f78 <__i2b>
 8005926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005928:	4604      	mov	r4, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	f340 8086 	ble.w	8005a3c <_dtoa_r+0x8dc>
 8005930:	461a      	mov	r2, r3
 8005932:	4601      	mov	r1, r0
 8005934:	4628      	mov	r0, r5
 8005936:	f000 fbdd 	bl	80060f4 <__pow5mult>
 800593a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800593c:	4604      	mov	r4, r0
 800593e:	2b01      	cmp	r3, #1
 8005940:	dd7f      	ble.n	8005a42 <_dtoa_r+0x8e2>
 8005942:	f04f 0800 	mov.w	r8, #0
 8005946:	6923      	ldr	r3, [r4, #16]
 8005948:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800594c:	6918      	ldr	r0, [r3, #16]
 800594e:	f000 fac5 	bl	8005edc <__hi0bits>
 8005952:	f1c0 0020 	rsb	r0, r0, #32
 8005956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005958:	4418      	add	r0, r3
 800595a:	f010 001f 	ands.w	r0, r0, #31
 800595e:	f000 8092 	beq.w	8005a86 <_dtoa_r+0x926>
 8005962:	f1c0 0320 	rsb	r3, r0, #32
 8005966:	2b04      	cmp	r3, #4
 8005968:	f340 808a 	ble.w	8005a80 <_dtoa_r+0x920>
 800596c:	f1c0 001c 	rsb	r0, r0, #28
 8005970:	9b06      	ldr	r3, [sp, #24]
 8005972:	4407      	add	r7, r0
 8005974:	4403      	add	r3, r0
 8005976:	9306      	str	r3, [sp, #24]
 8005978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800597a:	4403      	add	r3, r0
 800597c:	9309      	str	r3, [sp, #36]	; 0x24
 800597e:	9b06      	ldr	r3, [sp, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	dd05      	ble.n	8005990 <_dtoa_r+0x830>
 8005984:	4659      	mov	r1, fp
 8005986:	461a      	mov	r2, r3
 8005988:	4628      	mov	r0, r5
 800598a:	f000 fc0d 	bl	80061a8 <__lshift>
 800598e:	4683      	mov	fp, r0
 8005990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005992:	2b00      	cmp	r3, #0
 8005994:	dd05      	ble.n	80059a2 <_dtoa_r+0x842>
 8005996:	4621      	mov	r1, r4
 8005998:	461a      	mov	r2, r3
 800599a:	4628      	mov	r0, r5
 800599c:	f000 fc04 	bl	80061a8 <__lshift>
 80059a0:	4604      	mov	r4, r0
 80059a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d070      	beq.n	8005a8a <_dtoa_r+0x92a>
 80059a8:	4621      	mov	r1, r4
 80059aa:	4658      	mov	r0, fp
 80059ac:	f000 fc6c 	bl	8006288 <__mcmp>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	da6a      	bge.n	8005a8a <_dtoa_r+0x92a>
 80059b4:	2300      	movs	r3, #0
 80059b6:	4659      	mov	r1, fp
 80059b8:	220a      	movs	r2, #10
 80059ba:	4628      	mov	r0, r5
 80059bc:	f000 fa48 	bl	8005e50 <__multadd>
 80059c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059c2:	4683      	mov	fp, r0
 80059c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 8194 	beq.w	8005cf6 <_dtoa_r+0xb96>
 80059ce:	4631      	mov	r1, r6
 80059d0:	2300      	movs	r3, #0
 80059d2:	220a      	movs	r2, #10
 80059d4:	4628      	mov	r0, r5
 80059d6:	f000 fa3b 	bl	8005e50 <__multadd>
 80059da:	f1b9 0f00 	cmp.w	r9, #0
 80059de:	4606      	mov	r6, r0
 80059e0:	f300 8093 	bgt.w	8005b0a <_dtoa_r+0x9aa>
 80059e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	dc57      	bgt.n	8005a9a <_dtoa_r+0x93a>
 80059ea:	e08e      	b.n	8005b0a <_dtoa_r+0x9aa>
 80059ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059f2:	e757      	b.n	80058a4 <_dtoa_r+0x744>
 80059f4:	9b08      	ldr	r3, [sp, #32]
 80059f6:	1e5c      	subs	r4, r3, #1
 80059f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059fa:	42a3      	cmp	r3, r4
 80059fc:	bfb7      	itett	lt
 80059fe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005a00:	1b1c      	subge	r4, r3, r4
 8005a02:	1ae2      	sublt	r2, r4, r3
 8005a04:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005a06:	bfbe      	ittt	lt
 8005a08:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005a0a:	189b      	addlt	r3, r3, r2
 8005a0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005a0e:	9b08      	ldr	r3, [sp, #32]
 8005a10:	bfb8      	it	lt
 8005a12:	2400      	movlt	r4, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bfbb      	ittet	lt
 8005a18:	9b06      	ldrlt	r3, [sp, #24]
 8005a1a:	9a08      	ldrlt	r2, [sp, #32]
 8005a1c:	9f06      	ldrge	r7, [sp, #24]
 8005a1e:	1a9f      	sublt	r7, r3, r2
 8005a20:	bfac      	ite	ge
 8005a22:	9b08      	ldrge	r3, [sp, #32]
 8005a24:	2300      	movlt	r3, #0
 8005a26:	e73f      	b.n	80058a8 <_dtoa_r+0x748>
 8005a28:	3fe00000 	.word	0x3fe00000
 8005a2c:	40240000 	.word	0x40240000
 8005a30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a32:	9f06      	ldr	r7, [sp, #24]
 8005a34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005a36:	e742      	b.n	80058be <_dtoa_r+0x75e>
 8005a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a3a:	e76b      	b.n	8005914 <_dtoa_r+0x7b4>
 8005a3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	dc19      	bgt.n	8005a76 <_dtoa_r+0x916>
 8005a42:	9b04      	ldr	r3, [sp, #16]
 8005a44:	b9bb      	cbnz	r3, 8005a76 <_dtoa_r+0x916>
 8005a46:	9b05      	ldr	r3, [sp, #20]
 8005a48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a4c:	b99b      	cbnz	r3, 8005a76 <_dtoa_r+0x916>
 8005a4e:	9b05      	ldr	r3, [sp, #20]
 8005a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a54:	0d1b      	lsrs	r3, r3, #20
 8005a56:	051b      	lsls	r3, r3, #20
 8005a58:	b183      	cbz	r3, 8005a7c <_dtoa_r+0x91c>
 8005a5a:	f04f 0801 	mov.w	r8, #1
 8005a5e:	9b06      	ldr	r3, [sp, #24]
 8005a60:	3301      	adds	r3, #1
 8005a62:	9306      	str	r3, [sp, #24]
 8005a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a66:	3301      	adds	r3, #1
 8005a68:	9309      	str	r3, [sp, #36]	; 0x24
 8005a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f47f af6a 	bne.w	8005946 <_dtoa_r+0x7e6>
 8005a72:	2001      	movs	r0, #1
 8005a74:	e76f      	b.n	8005956 <_dtoa_r+0x7f6>
 8005a76:	f04f 0800 	mov.w	r8, #0
 8005a7a:	e7f6      	b.n	8005a6a <_dtoa_r+0x90a>
 8005a7c:	4698      	mov	r8, r3
 8005a7e:	e7f4      	b.n	8005a6a <_dtoa_r+0x90a>
 8005a80:	f43f af7d 	beq.w	800597e <_dtoa_r+0x81e>
 8005a84:	4618      	mov	r0, r3
 8005a86:	301c      	adds	r0, #28
 8005a88:	e772      	b.n	8005970 <_dtoa_r+0x810>
 8005a8a:	9b08      	ldr	r3, [sp, #32]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	dc36      	bgt.n	8005afe <_dtoa_r+0x99e>
 8005a90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	dd33      	ble.n	8005afe <_dtoa_r+0x99e>
 8005a96:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a9a:	f1b9 0f00 	cmp.w	r9, #0
 8005a9e:	d10d      	bne.n	8005abc <_dtoa_r+0x95c>
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	2205      	movs	r2, #5
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f000 f9d2 	bl	8005e50 <__multadd>
 8005aac:	4601      	mov	r1, r0
 8005aae:	4604      	mov	r4, r0
 8005ab0:	4658      	mov	r0, fp
 8005ab2:	f000 fbe9 	bl	8006288 <__mcmp>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	f73f adb8 	bgt.w	800562c <_dtoa_r+0x4cc>
 8005abc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005abe:	9f03      	ldr	r7, [sp, #12]
 8005ac0:	ea6f 0a03 	mvn.w	sl, r3
 8005ac4:	f04f 0800 	mov.w	r8, #0
 8005ac8:	4621      	mov	r1, r4
 8005aca:	4628      	mov	r0, r5
 8005acc:	f000 f99e 	bl	8005e0c <_Bfree>
 8005ad0:	2e00      	cmp	r6, #0
 8005ad2:	f43f aea7 	beq.w	8005824 <_dtoa_r+0x6c4>
 8005ad6:	f1b8 0f00 	cmp.w	r8, #0
 8005ada:	d005      	beq.n	8005ae8 <_dtoa_r+0x988>
 8005adc:	45b0      	cmp	r8, r6
 8005ade:	d003      	beq.n	8005ae8 <_dtoa_r+0x988>
 8005ae0:	4641      	mov	r1, r8
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f000 f992 	bl	8005e0c <_Bfree>
 8005ae8:	4631      	mov	r1, r6
 8005aea:	4628      	mov	r0, r5
 8005aec:	f000 f98e 	bl	8005e0c <_Bfree>
 8005af0:	e698      	b.n	8005824 <_dtoa_r+0x6c4>
 8005af2:	2400      	movs	r4, #0
 8005af4:	4626      	mov	r6, r4
 8005af6:	e7e1      	b.n	8005abc <_dtoa_r+0x95c>
 8005af8:	46c2      	mov	sl, r8
 8005afa:	4626      	mov	r6, r4
 8005afc:	e596      	b.n	800562c <_dtoa_r+0x4cc>
 8005afe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 80fd 	beq.w	8005d04 <_dtoa_r+0xba4>
 8005b0a:	2f00      	cmp	r7, #0
 8005b0c:	dd05      	ble.n	8005b1a <_dtoa_r+0x9ba>
 8005b0e:	4631      	mov	r1, r6
 8005b10:	463a      	mov	r2, r7
 8005b12:	4628      	mov	r0, r5
 8005b14:	f000 fb48 	bl	80061a8 <__lshift>
 8005b18:	4606      	mov	r6, r0
 8005b1a:	f1b8 0f00 	cmp.w	r8, #0
 8005b1e:	d05c      	beq.n	8005bda <_dtoa_r+0xa7a>
 8005b20:	4628      	mov	r0, r5
 8005b22:	6871      	ldr	r1, [r6, #4]
 8005b24:	f000 f932 	bl	8005d8c <_Balloc>
 8005b28:	4607      	mov	r7, r0
 8005b2a:	b928      	cbnz	r0, 8005b38 <_dtoa_r+0x9d8>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005b32:	4b7f      	ldr	r3, [pc, #508]	; (8005d30 <_dtoa_r+0xbd0>)
 8005b34:	f7ff bb28 	b.w	8005188 <_dtoa_r+0x28>
 8005b38:	6932      	ldr	r2, [r6, #16]
 8005b3a:	f106 010c 	add.w	r1, r6, #12
 8005b3e:	3202      	adds	r2, #2
 8005b40:	0092      	lsls	r2, r2, #2
 8005b42:	300c      	adds	r0, #12
 8005b44:	f000 f914 	bl	8005d70 <memcpy>
 8005b48:	2201      	movs	r2, #1
 8005b4a:	4639      	mov	r1, r7
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	f000 fb2b 	bl	80061a8 <__lshift>
 8005b52:	46b0      	mov	r8, r6
 8005b54:	4606      	mov	r6, r0
 8005b56:	9b03      	ldr	r3, [sp, #12]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	9308      	str	r3, [sp, #32]
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	444b      	add	r3, r9
 8005b60:	930a      	str	r3, [sp, #40]	; 0x28
 8005b62:	9b04      	ldr	r3, [sp, #16]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	9309      	str	r3, [sp, #36]	; 0x24
 8005b6a:	9b08      	ldr	r3, [sp, #32]
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	4658      	mov	r0, fp
 8005b72:	9304      	str	r3, [sp, #16]
 8005b74:	f7ff fa66 	bl	8005044 <quorem>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	4641      	mov	r1, r8
 8005b7c:	3330      	adds	r3, #48	; 0x30
 8005b7e:	9006      	str	r0, [sp, #24]
 8005b80:	4658      	mov	r0, fp
 8005b82:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b84:	f000 fb80 	bl	8006288 <__mcmp>
 8005b88:	4632      	mov	r2, r6
 8005b8a:	4681      	mov	r9, r0
 8005b8c:	4621      	mov	r1, r4
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f000 fb96 	bl	80062c0 <__mdiff>
 8005b94:	68c2      	ldr	r2, [r0, #12]
 8005b96:	4607      	mov	r7, r0
 8005b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b9a:	bb02      	cbnz	r2, 8005bde <_dtoa_r+0xa7e>
 8005b9c:	4601      	mov	r1, r0
 8005b9e:	4658      	mov	r0, fp
 8005ba0:	f000 fb72 	bl	8006288 <__mcmp>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ba8:	4639      	mov	r1, r7
 8005baa:	4628      	mov	r0, r5
 8005bac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005bb0:	f000 f92c 	bl	8005e0c <_Bfree>
 8005bb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bb8:	9f08      	ldr	r7, [sp, #32]
 8005bba:	ea43 0102 	orr.w	r1, r3, r2
 8005bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bc4:	d10d      	bne.n	8005be2 <_dtoa_r+0xa82>
 8005bc6:	2b39      	cmp	r3, #57	; 0x39
 8005bc8:	d029      	beq.n	8005c1e <_dtoa_r+0xabe>
 8005bca:	f1b9 0f00 	cmp.w	r9, #0
 8005bce:	dd01      	ble.n	8005bd4 <_dtoa_r+0xa74>
 8005bd0:	9b06      	ldr	r3, [sp, #24]
 8005bd2:	3331      	adds	r3, #49	; 0x31
 8005bd4:	9a04      	ldr	r2, [sp, #16]
 8005bd6:	7013      	strb	r3, [r2, #0]
 8005bd8:	e776      	b.n	8005ac8 <_dtoa_r+0x968>
 8005bda:	4630      	mov	r0, r6
 8005bdc:	e7b9      	b.n	8005b52 <_dtoa_r+0x9f2>
 8005bde:	2201      	movs	r2, #1
 8005be0:	e7e2      	b.n	8005ba8 <_dtoa_r+0xa48>
 8005be2:	f1b9 0f00 	cmp.w	r9, #0
 8005be6:	db06      	blt.n	8005bf6 <_dtoa_r+0xa96>
 8005be8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005bea:	ea41 0909 	orr.w	r9, r1, r9
 8005bee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bf0:	ea59 0101 	orrs.w	r1, r9, r1
 8005bf4:	d120      	bne.n	8005c38 <_dtoa_r+0xad8>
 8005bf6:	2a00      	cmp	r2, #0
 8005bf8:	ddec      	ble.n	8005bd4 <_dtoa_r+0xa74>
 8005bfa:	4659      	mov	r1, fp
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	4628      	mov	r0, r5
 8005c00:	9308      	str	r3, [sp, #32]
 8005c02:	f000 fad1 	bl	80061a8 <__lshift>
 8005c06:	4621      	mov	r1, r4
 8005c08:	4683      	mov	fp, r0
 8005c0a:	f000 fb3d 	bl	8006288 <__mcmp>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	9b08      	ldr	r3, [sp, #32]
 8005c12:	dc02      	bgt.n	8005c1a <_dtoa_r+0xaba>
 8005c14:	d1de      	bne.n	8005bd4 <_dtoa_r+0xa74>
 8005c16:	07da      	lsls	r2, r3, #31
 8005c18:	d5dc      	bpl.n	8005bd4 <_dtoa_r+0xa74>
 8005c1a:	2b39      	cmp	r3, #57	; 0x39
 8005c1c:	d1d8      	bne.n	8005bd0 <_dtoa_r+0xa70>
 8005c1e:	2339      	movs	r3, #57	; 0x39
 8005c20:	9a04      	ldr	r2, [sp, #16]
 8005c22:	7013      	strb	r3, [r2, #0]
 8005c24:	463b      	mov	r3, r7
 8005c26:	461f      	mov	r7, r3
 8005c28:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	2a39      	cmp	r2, #57	; 0x39
 8005c30:	d050      	beq.n	8005cd4 <_dtoa_r+0xb74>
 8005c32:	3201      	adds	r2, #1
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	e747      	b.n	8005ac8 <_dtoa_r+0x968>
 8005c38:	2a00      	cmp	r2, #0
 8005c3a:	dd03      	ble.n	8005c44 <_dtoa_r+0xae4>
 8005c3c:	2b39      	cmp	r3, #57	; 0x39
 8005c3e:	d0ee      	beq.n	8005c1e <_dtoa_r+0xabe>
 8005c40:	3301      	adds	r3, #1
 8005c42:	e7c7      	b.n	8005bd4 <_dtoa_r+0xa74>
 8005c44:	9a08      	ldr	r2, [sp, #32]
 8005c46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c48:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005c4c:	428a      	cmp	r2, r1
 8005c4e:	d02a      	beq.n	8005ca6 <_dtoa_r+0xb46>
 8005c50:	4659      	mov	r1, fp
 8005c52:	2300      	movs	r3, #0
 8005c54:	220a      	movs	r2, #10
 8005c56:	4628      	mov	r0, r5
 8005c58:	f000 f8fa 	bl	8005e50 <__multadd>
 8005c5c:	45b0      	cmp	r8, r6
 8005c5e:	4683      	mov	fp, r0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	f04f 020a 	mov.w	r2, #10
 8005c68:	4641      	mov	r1, r8
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	d107      	bne.n	8005c7e <_dtoa_r+0xb1e>
 8005c6e:	f000 f8ef 	bl	8005e50 <__multadd>
 8005c72:	4680      	mov	r8, r0
 8005c74:	4606      	mov	r6, r0
 8005c76:	9b08      	ldr	r3, [sp, #32]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	9308      	str	r3, [sp, #32]
 8005c7c:	e775      	b.n	8005b6a <_dtoa_r+0xa0a>
 8005c7e:	f000 f8e7 	bl	8005e50 <__multadd>
 8005c82:	4631      	mov	r1, r6
 8005c84:	4680      	mov	r8, r0
 8005c86:	2300      	movs	r3, #0
 8005c88:	220a      	movs	r2, #10
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f000 f8e0 	bl	8005e50 <__multadd>
 8005c90:	4606      	mov	r6, r0
 8005c92:	e7f0      	b.n	8005c76 <_dtoa_r+0xb16>
 8005c94:	f1b9 0f00 	cmp.w	r9, #0
 8005c98:	bfcc      	ite	gt
 8005c9a:	464f      	movgt	r7, r9
 8005c9c:	2701      	movle	r7, #1
 8005c9e:	f04f 0800 	mov.w	r8, #0
 8005ca2:	9a03      	ldr	r2, [sp, #12]
 8005ca4:	4417      	add	r7, r2
 8005ca6:	4659      	mov	r1, fp
 8005ca8:	2201      	movs	r2, #1
 8005caa:	4628      	mov	r0, r5
 8005cac:	9308      	str	r3, [sp, #32]
 8005cae:	f000 fa7b 	bl	80061a8 <__lshift>
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	4683      	mov	fp, r0
 8005cb6:	f000 fae7 	bl	8006288 <__mcmp>
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	dcb2      	bgt.n	8005c24 <_dtoa_r+0xac4>
 8005cbe:	d102      	bne.n	8005cc6 <_dtoa_r+0xb66>
 8005cc0:	9b08      	ldr	r3, [sp, #32]
 8005cc2:	07db      	lsls	r3, r3, #31
 8005cc4:	d4ae      	bmi.n	8005c24 <_dtoa_r+0xac4>
 8005cc6:	463b      	mov	r3, r7
 8005cc8:	461f      	mov	r7, r3
 8005cca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cce:	2a30      	cmp	r2, #48	; 0x30
 8005cd0:	d0fa      	beq.n	8005cc8 <_dtoa_r+0xb68>
 8005cd2:	e6f9      	b.n	8005ac8 <_dtoa_r+0x968>
 8005cd4:	9a03      	ldr	r2, [sp, #12]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d1a5      	bne.n	8005c26 <_dtoa_r+0xac6>
 8005cda:	2331      	movs	r3, #49	; 0x31
 8005cdc:	f10a 0a01 	add.w	sl, sl, #1
 8005ce0:	e779      	b.n	8005bd6 <_dtoa_r+0xa76>
 8005ce2:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <_dtoa_r+0xbd4>)
 8005ce4:	f7ff baa8 	b.w	8005238 <_dtoa_r+0xd8>
 8005ce8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f47f aa81 	bne.w	80051f2 <_dtoa_r+0x92>
 8005cf0:	4b11      	ldr	r3, [pc, #68]	; (8005d38 <_dtoa_r+0xbd8>)
 8005cf2:	f7ff baa1 	b.w	8005238 <_dtoa_r+0xd8>
 8005cf6:	f1b9 0f00 	cmp.w	r9, #0
 8005cfa:	dc03      	bgt.n	8005d04 <_dtoa_r+0xba4>
 8005cfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	f73f aecb 	bgt.w	8005a9a <_dtoa_r+0x93a>
 8005d04:	9f03      	ldr	r7, [sp, #12]
 8005d06:	4621      	mov	r1, r4
 8005d08:	4658      	mov	r0, fp
 8005d0a:	f7ff f99b 	bl	8005044 <quorem>
 8005d0e:	9a03      	ldr	r2, [sp, #12]
 8005d10:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005d14:	f807 3b01 	strb.w	r3, [r7], #1
 8005d18:	1aba      	subs	r2, r7, r2
 8005d1a:	4591      	cmp	r9, r2
 8005d1c:	ddba      	ble.n	8005c94 <_dtoa_r+0xb34>
 8005d1e:	4659      	mov	r1, fp
 8005d20:	2300      	movs	r3, #0
 8005d22:	220a      	movs	r2, #10
 8005d24:	4628      	mov	r0, r5
 8005d26:	f000 f893 	bl	8005e50 <__multadd>
 8005d2a:	4683      	mov	fp, r0
 8005d2c:	e7eb      	b.n	8005d06 <_dtoa_r+0xba6>
 8005d2e:	bf00      	nop
 8005d30:	0800846b 	.word	0x0800846b
 8005d34:	080083c8 	.word	0x080083c8
 8005d38:	080083ec 	.word	0x080083ec

08005d3c <_localeconv_r>:
 8005d3c:	4800      	ldr	r0, [pc, #0]	; (8005d40 <_localeconv_r+0x4>)
 8005d3e:	4770      	bx	lr
 8005d40:	200001a0 	.word	0x200001a0

08005d44 <malloc>:
 8005d44:	4b02      	ldr	r3, [pc, #8]	; (8005d50 <malloc+0xc>)
 8005d46:	4601      	mov	r1, r0
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	f000 bc1d 	b.w	8006588 <_malloc_r>
 8005d4e:	bf00      	nop
 8005d50:	2000004c 	.word	0x2000004c

08005d54 <memchr>:
 8005d54:	4603      	mov	r3, r0
 8005d56:	b510      	push	{r4, lr}
 8005d58:	b2c9      	uxtb	r1, r1
 8005d5a:	4402      	add	r2, r0
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	d101      	bne.n	8005d66 <memchr+0x12>
 8005d62:	2000      	movs	r0, #0
 8005d64:	e003      	b.n	8005d6e <memchr+0x1a>
 8005d66:	7804      	ldrb	r4, [r0, #0]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	428c      	cmp	r4, r1
 8005d6c:	d1f6      	bne.n	8005d5c <memchr+0x8>
 8005d6e:	bd10      	pop	{r4, pc}

08005d70 <memcpy>:
 8005d70:	440a      	add	r2, r1
 8005d72:	4291      	cmp	r1, r2
 8005d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d78:	d100      	bne.n	8005d7c <memcpy+0xc>
 8005d7a:	4770      	bx	lr
 8005d7c:	b510      	push	{r4, lr}
 8005d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d82:	4291      	cmp	r1, r2
 8005d84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d88:	d1f9      	bne.n	8005d7e <memcpy+0xe>
 8005d8a:	bd10      	pop	{r4, pc}

08005d8c <_Balloc>:
 8005d8c:	b570      	push	{r4, r5, r6, lr}
 8005d8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d90:	4604      	mov	r4, r0
 8005d92:	460d      	mov	r5, r1
 8005d94:	b976      	cbnz	r6, 8005db4 <_Balloc+0x28>
 8005d96:	2010      	movs	r0, #16
 8005d98:	f7ff ffd4 	bl	8005d44 <malloc>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	6260      	str	r0, [r4, #36]	; 0x24
 8005da0:	b920      	cbnz	r0, 8005dac <_Balloc+0x20>
 8005da2:	2166      	movs	r1, #102	; 0x66
 8005da4:	4b17      	ldr	r3, [pc, #92]	; (8005e04 <_Balloc+0x78>)
 8005da6:	4818      	ldr	r0, [pc, #96]	; (8005e08 <_Balloc+0x7c>)
 8005da8:	f000 fdce 	bl	8006948 <__assert_func>
 8005dac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005db0:	6006      	str	r6, [r0, #0]
 8005db2:	60c6      	str	r6, [r0, #12]
 8005db4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005db6:	68f3      	ldr	r3, [r6, #12]
 8005db8:	b183      	cbz	r3, 8005ddc <_Balloc+0x50>
 8005dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005dc2:	b9b8      	cbnz	r0, 8005df4 <_Balloc+0x68>
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	fa01 f605 	lsl.w	r6, r1, r5
 8005dca:	1d72      	adds	r2, r6, #5
 8005dcc:	4620      	mov	r0, r4
 8005dce:	0092      	lsls	r2, r2, #2
 8005dd0:	f000 fb5e 	bl	8006490 <_calloc_r>
 8005dd4:	b160      	cbz	r0, 8005df0 <_Balloc+0x64>
 8005dd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005dda:	e00e      	b.n	8005dfa <_Balloc+0x6e>
 8005ddc:	2221      	movs	r2, #33	; 0x21
 8005dde:	2104      	movs	r1, #4
 8005de0:	4620      	mov	r0, r4
 8005de2:	f000 fb55 	bl	8006490 <_calloc_r>
 8005de6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005de8:	60f0      	str	r0, [r6, #12]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e4      	bne.n	8005dba <_Balloc+0x2e>
 8005df0:	2000      	movs	r0, #0
 8005df2:	bd70      	pop	{r4, r5, r6, pc}
 8005df4:	6802      	ldr	r2, [r0, #0]
 8005df6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e00:	e7f7      	b.n	8005df2 <_Balloc+0x66>
 8005e02:	bf00      	nop
 8005e04:	080083f9 	.word	0x080083f9
 8005e08:	0800847c 	.word	0x0800847c

08005e0c <_Bfree>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e10:	4605      	mov	r5, r0
 8005e12:	460c      	mov	r4, r1
 8005e14:	b976      	cbnz	r6, 8005e34 <_Bfree+0x28>
 8005e16:	2010      	movs	r0, #16
 8005e18:	f7ff ff94 	bl	8005d44 <malloc>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	6268      	str	r0, [r5, #36]	; 0x24
 8005e20:	b920      	cbnz	r0, 8005e2c <_Bfree+0x20>
 8005e22:	218a      	movs	r1, #138	; 0x8a
 8005e24:	4b08      	ldr	r3, [pc, #32]	; (8005e48 <_Bfree+0x3c>)
 8005e26:	4809      	ldr	r0, [pc, #36]	; (8005e4c <_Bfree+0x40>)
 8005e28:	f000 fd8e 	bl	8006948 <__assert_func>
 8005e2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e30:	6006      	str	r6, [r0, #0]
 8005e32:	60c6      	str	r6, [r0, #12]
 8005e34:	b13c      	cbz	r4, 8005e46 <_Bfree+0x3a>
 8005e36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e38:	6862      	ldr	r2, [r4, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e40:	6021      	str	r1, [r4, #0]
 8005e42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e46:	bd70      	pop	{r4, r5, r6, pc}
 8005e48:	080083f9 	.word	0x080083f9
 8005e4c:	0800847c 	.word	0x0800847c

08005e50 <__multadd>:
 8005e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e54:	4607      	mov	r7, r0
 8005e56:	460c      	mov	r4, r1
 8005e58:	461e      	mov	r6, r3
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	690d      	ldr	r5, [r1, #16]
 8005e5e:	f101 0c14 	add.w	ip, r1, #20
 8005e62:	f8dc 3000 	ldr.w	r3, [ip]
 8005e66:	3001      	adds	r0, #1
 8005e68:	b299      	uxth	r1, r3
 8005e6a:	fb02 6101 	mla	r1, r2, r1, r6
 8005e6e:	0c1e      	lsrs	r6, r3, #16
 8005e70:	0c0b      	lsrs	r3, r1, #16
 8005e72:	fb02 3306 	mla	r3, r2, r6, r3
 8005e76:	b289      	uxth	r1, r1
 8005e78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e7c:	4285      	cmp	r5, r0
 8005e7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e82:	f84c 1b04 	str.w	r1, [ip], #4
 8005e86:	dcec      	bgt.n	8005e62 <__multadd+0x12>
 8005e88:	b30e      	cbz	r6, 8005ece <__multadd+0x7e>
 8005e8a:	68a3      	ldr	r3, [r4, #8]
 8005e8c:	42ab      	cmp	r3, r5
 8005e8e:	dc19      	bgt.n	8005ec4 <__multadd+0x74>
 8005e90:	6861      	ldr	r1, [r4, #4]
 8005e92:	4638      	mov	r0, r7
 8005e94:	3101      	adds	r1, #1
 8005e96:	f7ff ff79 	bl	8005d8c <_Balloc>
 8005e9a:	4680      	mov	r8, r0
 8005e9c:	b928      	cbnz	r0, 8005eaa <__multadd+0x5a>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	21b5      	movs	r1, #181	; 0xb5
 8005ea2:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <__multadd+0x84>)
 8005ea4:	480c      	ldr	r0, [pc, #48]	; (8005ed8 <__multadd+0x88>)
 8005ea6:	f000 fd4f 	bl	8006948 <__assert_func>
 8005eaa:	6922      	ldr	r2, [r4, #16]
 8005eac:	f104 010c 	add.w	r1, r4, #12
 8005eb0:	3202      	adds	r2, #2
 8005eb2:	0092      	lsls	r2, r2, #2
 8005eb4:	300c      	adds	r0, #12
 8005eb6:	f7ff ff5b 	bl	8005d70 <memcpy>
 8005eba:	4621      	mov	r1, r4
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	f7ff ffa5 	bl	8005e0c <_Bfree>
 8005ec2:	4644      	mov	r4, r8
 8005ec4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ec8:	3501      	adds	r5, #1
 8005eca:	615e      	str	r6, [r3, #20]
 8005ecc:	6125      	str	r5, [r4, #16]
 8005ece:	4620      	mov	r0, r4
 8005ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ed4:	0800846b 	.word	0x0800846b
 8005ed8:	0800847c 	.word	0x0800847c

08005edc <__hi0bits>:
 8005edc:	0c02      	lsrs	r2, r0, #16
 8005ede:	0412      	lsls	r2, r2, #16
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	b9ca      	cbnz	r2, 8005f18 <__hi0bits+0x3c>
 8005ee4:	0403      	lsls	r3, r0, #16
 8005ee6:	2010      	movs	r0, #16
 8005ee8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005eec:	bf04      	itt	eq
 8005eee:	021b      	lsleq	r3, r3, #8
 8005ef0:	3008      	addeq	r0, #8
 8005ef2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005ef6:	bf04      	itt	eq
 8005ef8:	011b      	lsleq	r3, r3, #4
 8005efa:	3004      	addeq	r0, #4
 8005efc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005f00:	bf04      	itt	eq
 8005f02:	009b      	lsleq	r3, r3, #2
 8005f04:	3002      	addeq	r0, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	db05      	blt.n	8005f16 <__hi0bits+0x3a>
 8005f0a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005f0e:	f100 0001 	add.w	r0, r0, #1
 8005f12:	bf08      	it	eq
 8005f14:	2020      	moveq	r0, #32
 8005f16:	4770      	bx	lr
 8005f18:	2000      	movs	r0, #0
 8005f1a:	e7e5      	b.n	8005ee8 <__hi0bits+0xc>

08005f1c <__lo0bits>:
 8005f1c:	6803      	ldr	r3, [r0, #0]
 8005f1e:	4602      	mov	r2, r0
 8005f20:	f013 0007 	ands.w	r0, r3, #7
 8005f24:	d00b      	beq.n	8005f3e <__lo0bits+0x22>
 8005f26:	07d9      	lsls	r1, r3, #31
 8005f28:	d421      	bmi.n	8005f6e <__lo0bits+0x52>
 8005f2a:	0798      	lsls	r0, r3, #30
 8005f2c:	bf49      	itett	mi
 8005f2e:	085b      	lsrmi	r3, r3, #1
 8005f30:	089b      	lsrpl	r3, r3, #2
 8005f32:	2001      	movmi	r0, #1
 8005f34:	6013      	strmi	r3, [r2, #0]
 8005f36:	bf5c      	itt	pl
 8005f38:	2002      	movpl	r0, #2
 8005f3a:	6013      	strpl	r3, [r2, #0]
 8005f3c:	4770      	bx	lr
 8005f3e:	b299      	uxth	r1, r3
 8005f40:	b909      	cbnz	r1, 8005f46 <__lo0bits+0x2a>
 8005f42:	2010      	movs	r0, #16
 8005f44:	0c1b      	lsrs	r3, r3, #16
 8005f46:	b2d9      	uxtb	r1, r3
 8005f48:	b909      	cbnz	r1, 8005f4e <__lo0bits+0x32>
 8005f4a:	3008      	adds	r0, #8
 8005f4c:	0a1b      	lsrs	r3, r3, #8
 8005f4e:	0719      	lsls	r1, r3, #28
 8005f50:	bf04      	itt	eq
 8005f52:	091b      	lsreq	r3, r3, #4
 8005f54:	3004      	addeq	r0, #4
 8005f56:	0799      	lsls	r1, r3, #30
 8005f58:	bf04      	itt	eq
 8005f5a:	089b      	lsreq	r3, r3, #2
 8005f5c:	3002      	addeq	r0, #2
 8005f5e:	07d9      	lsls	r1, r3, #31
 8005f60:	d403      	bmi.n	8005f6a <__lo0bits+0x4e>
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	f100 0001 	add.w	r0, r0, #1
 8005f68:	d003      	beq.n	8005f72 <__lo0bits+0x56>
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	4770      	bx	lr
 8005f6e:	2000      	movs	r0, #0
 8005f70:	4770      	bx	lr
 8005f72:	2020      	movs	r0, #32
 8005f74:	4770      	bx	lr
	...

08005f78 <__i2b>:
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	f7ff ff05 	bl	8005d8c <_Balloc>
 8005f82:	4602      	mov	r2, r0
 8005f84:	b928      	cbnz	r0, 8005f92 <__i2b+0x1a>
 8005f86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f8a:	4b04      	ldr	r3, [pc, #16]	; (8005f9c <__i2b+0x24>)
 8005f8c:	4804      	ldr	r0, [pc, #16]	; (8005fa0 <__i2b+0x28>)
 8005f8e:	f000 fcdb 	bl	8006948 <__assert_func>
 8005f92:	2301      	movs	r3, #1
 8005f94:	6144      	str	r4, [r0, #20]
 8005f96:	6103      	str	r3, [r0, #16]
 8005f98:	bd10      	pop	{r4, pc}
 8005f9a:	bf00      	nop
 8005f9c:	0800846b 	.word	0x0800846b
 8005fa0:	0800847c 	.word	0x0800847c

08005fa4 <__multiply>:
 8005fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa8:	4691      	mov	r9, r2
 8005faa:	690a      	ldr	r2, [r1, #16]
 8005fac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	bfbe      	ittt	lt
 8005fb6:	460b      	movlt	r3, r1
 8005fb8:	464c      	movlt	r4, r9
 8005fba:	4699      	movlt	r9, r3
 8005fbc:	6927      	ldr	r7, [r4, #16]
 8005fbe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005fc2:	68a3      	ldr	r3, [r4, #8]
 8005fc4:	6861      	ldr	r1, [r4, #4]
 8005fc6:	eb07 060a 	add.w	r6, r7, sl
 8005fca:	42b3      	cmp	r3, r6
 8005fcc:	b085      	sub	sp, #20
 8005fce:	bfb8      	it	lt
 8005fd0:	3101      	addlt	r1, #1
 8005fd2:	f7ff fedb 	bl	8005d8c <_Balloc>
 8005fd6:	b930      	cbnz	r0, 8005fe6 <__multiply+0x42>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	f240 115d 	movw	r1, #349	; 0x15d
 8005fde:	4b43      	ldr	r3, [pc, #268]	; (80060ec <__multiply+0x148>)
 8005fe0:	4843      	ldr	r0, [pc, #268]	; (80060f0 <__multiply+0x14c>)
 8005fe2:	f000 fcb1 	bl	8006948 <__assert_func>
 8005fe6:	f100 0514 	add.w	r5, r0, #20
 8005fea:	462b      	mov	r3, r5
 8005fec:	2200      	movs	r2, #0
 8005fee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ff2:	4543      	cmp	r3, r8
 8005ff4:	d321      	bcc.n	800603a <__multiply+0x96>
 8005ff6:	f104 0314 	add.w	r3, r4, #20
 8005ffa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ffe:	f109 0314 	add.w	r3, r9, #20
 8006002:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006006:	9202      	str	r2, [sp, #8]
 8006008:	1b3a      	subs	r2, r7, r4
 800600a:	3a15      	subs	r2, #21
 800600c:	f022 0203 	bic.w	r2, r2, #3
 8006010:	3204      	adds	r2, #4
 8006012:	f104 0115 	add.w	r1, r4, #21
 8006016:	428f      	cmp	r7, r1
 8006018:	bf38      	it	cc
 800601a:	2204      	movcc	r2, #4
 800601c:	9201      	str	r2, [sp, #4]
 800601e:	9a02      	ldr	r2, [sp, #8]
 8006020:	9303      	str	r3, [sp, #12]
 8006022:	429a      	cmp	r2, r3
 8006024:	d80c      	bhi.n	8006040 <__multiply+0x9c>
 8006026:	2e00      	cmp	r6, #0
 8006028:	dd03      	ble.n	8006032 <__multiply+0x8e>
 800602a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800602e:	2b00      	cmp	r3, #0
 8006030:	d059      	beq.n	80060e6 <__multiply+0x142>
 8006032:	6106      	str	r6, [r0, #16]
 8006034:	b005      	add	sp, #20
 8006036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603a:	f843 2b04 	str.w	r2, [r3], #4
 800603e:	e7d8      	b.n	8005ff2 <__multiply+0x4e>
 8006040:	f8b3 a000 	ldrh.w	sl, [r3]
 8006044:	f1ba 0f00 	cmp.w	sl, #0
 8006048:	d023      	beq.n	8006092 <__multiply+0xee>
 800604a:	46a9      	mov	r9, r5
 800604c:	f04f 0c00 	mov.w	ip, #0
 8006050:	f104 0e14 	add.w	lr, r4, #20
 8006054:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006058:	f8d9 1000 	ldr.w	r1, [r9]
 800605c:	fa1f fb82 	uxth.w	fp, r2
 8006060:	b289      	uxth	r1, r1
 8006062:	fb0a 110b 	mla	r1, sl, fp, r1
 8006066:	4461      	add	r1, ip
 8006068:	f8d9 c000 	ldr.w	ip, [r9]
 800606c:	0c12      	lsrs	r2, r2, #16
 800606e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006072:	fb0a c202 	mla	r2, sl, r2, ip
 8006076:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800607a:	b289      	uxth	r1, r1
 800607c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006080:	4577      	cmp	r7, lr
 8006082:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006086:	f849 1b04 	str.w	r1, [r9], #4
 800608a:	d8e3      	bhi.n	8006054 <__multiply+0xb0>
 800608c:	9a01      	ldr	r2, [sp, #4]
 800608e:	f845 c002 	str.w	ip, [r5, r2]
 8006092:	9a03      	ldr	r2, [sp, #12]
 8006094:	3304      	adds	r3, #4
 8006096:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800609a:	f1b9 0f00 	cmp.w	r9, #0
 800609e:	d020      	beq.n	80060e2 <__multiply+0x13e>
 80060a0:	46ae      	mov	lr, r5
 80060a2:	f04f 0a00 	mov.w	sl, #0
 80060a6:	6829      	ldr	r1, [r5, #0]
 80060a8:	f104 0c14 	add.w	ip, r4, #20
 80060ac:	f8bc b000 	ldrh.w	fp, [ip]
 80060b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80060b4:	b289      	uxth	r1, r1
 80060b6:	fb09 220b 	mla	r2, r9, fp, r2
 80060ba:	4492      	add	sl, r2
 80060bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80060c0:	f84e 1b04 	str.w	r1, [lr], #4
 80060c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80060c8:	f8be 1000 	ldrh.w	r1, [lr]
 80060cc:	0c12      	lsrs	r2, r2, #16
 80060ce:	fb09 1102 	mla	r1, r9, r2, r1
 80060d2:	4567      	cmp	r7, ip
 80060d4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80060d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80060dc:	d8e6      	bhi.n	80060ac <__multiply+0x108>
 80060de:	9a01      	ldr	r2, [sp, #4]
 80060e0:	50a9      	str	r1, [r5, r2]
 80060e2:	3504      	adds	r5, #4
 80060e4:	e79b      	b.n	800601e <__multiply+0x7a>
 80060e6:	3e01      	subs	r6, #1
 80060e8:	e79d      	b.n	8006026 <__multiply+0x82>
 80060ea:	bf00      	nop
 80060ec:	0800846b 	.word	0x0800846b
 80060f0:	0800847c 	.word	0x0800847c

080060f4 <__pow5mult>:
 80060f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060f8:	4615      	mov	r5, r2
 80060fa:	f012 0203 	ands.w	r2, r2, #3
 80060fe:	4606      	mov	r6, r0
 8006100:	460f      	mov	r7, r1
 8006102:	d007      	beq.n	8006114 <__pow5mult+0x20>
 8006104:	4c25      	ldr	r4, [pc, #148]	; (800619c <__pow5mult+0xa8>)
 8006106:	3a01      	subs	r2, #1
 8006108:	2300      	movs	r3, #0
 800610a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800610e:	f7ff fe9f 	bl	8005e50 <__multadd>
 8006112:	4607      	mov	r7, r0
 8006114:	10ad      	asrs	r5, r5, #2
 8006116:	d03d      	beq.n	8006194 <__pow5mult+0xa0>
 8006118:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800611a:	b97c      	cbnz	r4, 800613c <__pow5mult+0x48>
 800611c:	2010      	movs	r0, #16
 800611e:	f7ff fe11 	bl	8005d44 <malloc>
 8006122:	4602      	mov	r2, r0
 8006124:	6270      	str	r0, [r6, #36]	; 0x24
 8006126:	b928      	cbnz	r0, 8006134 <__pow5mult+0x40>
 8006128:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800612c:	4b1c      	ldr	r3, [pc, #112]	; (80061a0 <__pow5mult+0xac>)
 800612e:	481d      	ldr	r0, [pc, #116]	; (80061a4 <__pow5mult+0xb0>)
 8006130:	f000 fc0a 	bl	8006948 <__assert_func>
 8006134:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006138:	6004      	str	r4, [r0, #0]
 800613a:	60c4      	str	r4, [r0, #12]
 800613c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006140:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006144:	b94c      	cbnz	r4, 800615a <__pow5mult+0x66>
 8006146:	f240 2171 	movw	r1, #625	; 0x271
 800614a:	4630      	mov	r0, r6
 800614c:	f7ff ff14 	bl	8005f78 <__i2b>
 8006150:	2300      	movs	r3, #0
 8006152:	4604      	mov	r4, r0
 8006154:	f8c8 0008 	str.w	r0, [r8, #8]
 8006158:	6003      	str	r3, [r0, #0]
 800615a:	f04f 0900 	mov.w	r9, #0
 800615e:	07eb      	lsls	r3, r5, #31
 8006160:	d50a      	bpl.n	8006178 <__pow5mult+0x84>
 8006162:	4639      	mov	r1, r7
 8006164:	4622      	mov	r2, r4
 8006166:	4630      	mov	r0, r6
 8006168:	f7ff ff1c 	bl	8005fa4 <__multiply>
 800616c:	4680      	mov	r8, r0
 800616e:	4639      	mov	r1, r7
 8006170:	4630      	mov	r0, r6
 8006172:	f7ff fe4b 	bl	8005e0c <_Bfree>
 8006176:	4647      	mov	r7, r8
 8006178:	106d      	asrs	r5, r5, #1
 800617a:	d00b      	beq.n	8006194 <__pow5mult+0xa0>
 800617c:	6820      	ldr	r0, [r4, #0]
 800617e:	b938      	cbnz	r0, 8006190 <__pow5mult+0x9c>
 8006180:	4622      	mov	r2, r4
 8006182:	4621      	mov	r1, r4
 8006184:	4630      	mov	r0, r6
 8006186:	f7ff ff0d 	bl	8005fa4 <__multiply>
 800618a:	6020      	str	r0, [r4, #0]
 800618c:	f8c0 9000 	str.w	r9, [r0]
 8006190:	4604      	mov	r4, r0
 8006192:	e7e4      	b.n	800615e <__pow5mult+0x6a>
 8006194:	4638      	mov	r0, r7
 8006196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800619a:	bf00      	nop
 800619c:	080085c8 	.word	0x080085c8
 80061a0:	080083f9 	.word	0x080083f9
 80061a4:	0800847c 	.word	0x0800847c

080061a8 <__lshift>:
 80061a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ac:	460c      	mov	r4, r1
 80061ae:	4607      	mov	r7, r0
 80061b0:	4691      	mov	r9, r2
 80061b2:	6923      	ldr	r3, [r4, #16]
 80061b4:	6849      	ldr	r1, [r1, #4]
 80061b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80061ba:	68a3      	ldr	r3, [r4, #8]
 80061bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061c0:	f108 0601 	add.w	r6, r8, #1
 80061c4:	42b3      	cmp	r3, r6
 80061c6:	db0b      	blt.n	80061e0 <__lshift+0x38>
 80061c8:	4638      	mov	r0, r7
 80061ca:	f7ff fddf 	bl	8005d8c <_Balloc>
 80061ce:	4605      	mov	r5, r0
 80061d0:	b948      	cbnz	r0, 80061e6 <__lshift+0x3e>
 80061d2:	4602      	mov	r2, r0
 80061d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80061d8:	4b29      	ldr	r3, [pc, #164]	; (8006280 <__lshift+0xd8>)
 80061da:	482a      	ldr	r0, [pc, #168]	; (8006284 <__lshift+0xdc>)
 80061dc:	f000 fbb4 	bl	8006948 <__assert_func>
 80061e0:	3101      	adds	r1, #1
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	e7ee      	b.n	80061c4 <__lshift+0x1c>
 80061e6:	2300      	movs	r3, #0
 80061e8:	f100 0114 	add.w	r1, r0, #20
 80061ec:	f100 0210 	add.w	r2, r0, #16
 80061f0:	4618      	mov	r0, r3
 80061f2:	4553      	cmp	r3, sl
 80061f4:	db37      	blt.n	8006266 <__lshift+0xbe>
 80061f6:	6920      	ldr	r0, [r4, #16]
 80061f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061fc:	f104 0314 	add.w	r3, r4, #20
 8006200:	f019 091f 	ands.w	r9, r9, #31
 8006204:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006208:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800620c:	d02f      	beq.n	800626e <__lshift+0xc6>
 800620e:	468a      	mov	sl, r1
 8006210:	f04f 0c00 	mov.w	ip, #0
 8006214:	f1c9 0e20 	rsb	lr, r9, #32
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	fa02 f209 	lsl.w	r2, r2, r9
 800621e:	ea42 020c 	orr.w	r2, r2, ip
 8006222:	f84a 2b04 	str.w	r2, [sl], #4
 8006226:	f853 2b04 	ldr.w	r2, [r3], #4
 800622a:	4298      	cmp	r0, r3
 800622c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006230:	d8f2      	bhi.n	8006218 <__lshift+0x70>
 8006232:	1b03      	subs	r3, r0, r4
 8006234:	3b15      	subs	r3, #21
 8006236:	f023 0303 	bic.w	r3, r3, #3
 800623a:	3304      	adds	r3, #4
 800623c:	f104 0215 	add.w	r2, r4, #21
 8006240:	4290      	cmp	r0, r2
 8006242:	bf38      	it	cc
 8006244:	2304      	movcc	r3, #4
 8006246:	f841 c003 	str.w	ip, [r1, r3]
 800624a:	f1bc 0f00 	cmp.w	ip, #0
 800624e:	d001      	beq.n	8006254 <__lshift+0xac>
 8006250:	f108 0602 	add.w	r6, r8, #2
 8006254:	3e01      	subs	r6, #1
 8006256:	4638      	mov	r0, r7
 8006258:	4621      	mov	r1, r4
 800625a:	612e      	str	r6, [r5, #16]
 800625c:	f7ff fdd6 	bl	8005e0c <_Bfree>
 8006260:	4628      	mov	r0, r5
 8006262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006266:	f842 0f04 	str.w	r0, [r2, #4]!
 800626a:	3301      	adds	r3, #1
 800626c:	e7c1      	b.n	80061f2 <__lshift+0x4a>
 800626e:	3904      	subs	r1, #4
 8006270:	f853 2b04 	ldr.w	r2, [r3], #4
 8006274:	4298      	cmp	r0, r3
 8006276:	f841 2f04 	str.w	r2, [r1, #4]!
 800627a:	d8f9      	bhi.n	8006270 <__lshift+0xc8>
 800627c:	e7ea      	b.n	8006254 <__lshift+0xac>
 800627e:	bf00      	nop
 8006280:	0800846b 	.word	0x0800846b
 8006284:	0800847c 	.word	0x0800847c

08006288 <__mcmp>:
 8006288:	4603      	mov	r3, r0
 800628a:	690a      	ldr	r2, [r1, #16]
 800628c:	6900      	ldr	r0, [r0, #16]
 800628e:	b530      	push	{r4, r5, lr}
 8006290:	1a80      	subs	r0, r0, r2
 8006292:	d10d      	bne.n	80062b0 <__mcmp+0x28>
 8006294:	3314      	adds	r3, #20
 8006296:	3114      	adds	r1, #20
 8006298:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800629c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80062a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80062a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80062a8:	4295      	cmp	r5, r2
 80062aa:	d002      	beq.n	80062b2 <__mcmp+0x2a>
 80062ac:	d304      	bcc.n	80062b8 <__mcmp+0x30>
 80062ae:	2001      	movs	r0, #1
 80062b0:	bd30      	pop	{r4, r5, pc}
 80062b2:	42a3      	cmp	r3, r4
 80062b4:	d3f4      	bcc.n	80062a0 <__mcmp+0x18>
 80062b6:	e7fb      	b.n	80062b0 <__mcmp+0x28>
 80062b8:	f04f 30ff 	mov.w	r0, #4294967295
 80062bc:	e7f8      	b.n	80062b0 <__mcmp+0x28>
	...

080062c0 <__mdiff>:
 80062c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c4:	460d      	mov	r5, r1
 80062c6:	4607      	mov	r7, r0
 80062c8:	4611      	mov	r1, r2
 80062ca:	4628      	mov	r0, r5
 80062cc:	4614      	mov	r4, r2
 80062ce:	f7ff ffdb 	bl	8006288 <__mcmp>
 80062d2:	1e06      	subs	r6, r0, #0
 80062d4:	d111      	bne.n	80062fa <__mdiff+0x3a>
 80062d6:	4631      	mov	r1, r6
 80062d8:	4638      	mov	r0, r7
 80062da:	f7ff fd57 	bl	8005d8c <_Balloc>
 80062de:	4602      	mov	r2, r0
 80062e0:	b928      	cbnz	r0, 80062ee <__mdiff+0x2e>
 80062e2:	f240 2132 	movw	r1, #562	; 0x232
 80062e6:	4b3a      	ldr	r3, [pc, #232]	; (80063d0 <__mdiff+0x110>)
 80062e8:	483a      	ldr	r0, [pc, #232]	; (80063d4 <__mdiff+0x114>)
 80062ea:	f000 fb2d 	bl	8006948 <__assert_func>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80062f4:	4610      	mov	r0, r2
 80062f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fa:	bfa4      	itt	ge
 80062fc:	4623      	movge	r3, r4
 80062fe:	462c      	movge	r4, r5
 8006300:	4638      	mov	r0, r7
 8006302:	6861      	ldr	r1, [r4, #4]
 8006304:	bfa6      	itte	ge
 8006306:	461d      	movge	r5, r3
 8006308:	2600      	movge	r6, #0
 800630a:	2601      	movlt	r6, #1
 800630c:	f7ff fd3e 	bl	8005d8c <_Balloc>
 8006310:	4602      	mov	r2, r0
 8006312:	b918      	cbnz	r0, 800631c <__mdiff+0x5c>
 8006314:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006318:	4b2d      	ldr	r3, [pc, #180]	; (80063d0 <__mdiff+0x110>)
 800631a:	e7e5      	b.n	80062e8 <__mdiff+0x28>
 800631c:	f102 0814 	add.w	r8, r2, #20
 8006320:	46c2      	mov	sl, r8
 8006322:	f04f 0c00 	mov.w	ip, #0
 8006326:	6927      	ldr	r7, [r4, #16]
 8006328:	60c6      	str	r6, [r0, #12]
 800632a:	692e      	ldr	r6, [r5, #16]
 800632c:	f104 0014 	add.w	r0, r4, #20
 8006330:	f105 0914 	add.w	r9, r5, #20
 8006334:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006338:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800633c:	3410      	adds	r4, #16
 800633e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006342:	f859 3b04 	ldr.w	r3, [r9], #4
 8006346:	fa1f f18b 	uxth.w	r1, fp
 800634a:	448c      	add	ip, r1
 800634c:	b299      	uxth	r1, r3
 800634e:	0c1b      	lsrs	r3, r3, #16
 8006350:	ebac 0101 	sub.w	r1, ip, r1
 8006354:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006358:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800635c:	b289      	uxth	r1, r1
 800635e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006362:	454e      	cmp	r6, r9
 8006364:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006368:	f84a 3b04 	str.w	r3, [sl], #4
 800636c:	d8e7      	bhi.n	800633e <__mdiff+0x7e>
 800636e:	1b73      	subs	r3, r6, r5
 8006370:	3b15      	subs	r3, #21
 8006372:	f023 0303 	bic.w	r3, r3, #3
 8006376:	3515      	adds	r5, #21
 8006378:	3304      	adds	r3, #4
 800637a:	42ae      	cmp	r6, r5
 800637c:	bf38      	it	cc
 800637e:	2304      	movcc	r3, #4
 8006380:	4418      	add	r0, r3
 8006382:	4443      	add	r3, r8
 8006384:	461e      	mov	r6, r3
 8006386:	4605      	mov	r5, r0
 8006388:	4575      	cmp	r5, lr
 800638a:	d30e      	bcc.n	80063aa <__mdiff+0xea>
 800638c:	f10e 0103 	add.w	r1, lr, #3
 8006390:	1a09      	subs	r1, r1, r0
 8006392:	f021 0103 	bic.w	r1, r1, #3
 8006396:	3803      	subs	r0, #3
 8006398:	4586      	cmp	lr, r0
 800639a:	bf38      	it	cc
 800639c:	2100      	movcc	r1, #0
 800639e:	4419      	add	r1, r3
 80063a0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80063a4:	b18b      	cbz	r3, 80063ca <__mdiff+0x10a>
 80063a6:	6117      	str	r7, [r2, #16]
 80063a8:	e7a4      	b.n	80062f4 <__mdiff+0x34>
 80063aa:	f855 8b04 	ldr.w	r8, [r5], #4
 80063ae:	fa1f f188 	uxth.w	r1, r8
 80063b2:	4461      	add	r1, ip
 80063b4:	140c      	asrs	r4, r1, #16
 80063b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80063ba:	b289      	uxth	r1, r1
 80063bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80063c0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80063c4:	f846 1b04 	str.w	r1, [r6], #4
 80063c8:	e7de      	b.n	8006388 <__mdiff+0xc8>
 80063ca:	3f01      	subs	r7, #1
 80063cc:	e7e8      	b.n	80063a0 <__mdiff+0xe0>
 80063ce:	bf00      	nop
 80063d0:	0800846b 	.word	0x0800846b
 80063d4:	0800847c 	.word	0x0800847c

080063d8 <__d2b>:
 80063d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80063dc:	2101      	movs	r1, #1
 80063de:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80063e2:	4690      	mov	r8, r2
 80063e4:	461d      	mov	r5, r3
 80063e6:	f7ff fcd1 	bl	8005d8c <_Balloc>
 80063ea:	4604      	mov	r4, r0
 80063ec:	b930      	cbnz	r0, 80063fc <__d2b+0x24>
 80063ee:	4602      	mov	r2, r0
 80063f0:	f240 310a 	movw	r1, #778	; 0x30a
 80063f4:	4b24      	ldr	r3, [pc, #144]	; (8006488 <__d2b+0xb0>)
 80063f6:	4825      	ldr	r0, [pc, #148]	; (800648c <__d2b+0xb4>)
 80063f8:	f000 faa6 	bl	8006948 <__assert_func>
 80063fc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006400:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006404:	bb2d      	cbnz	r5, 8006452 <__d2b+0x7a>
 8006406:	9301      	str	r3, [sp, #4]
 8006408:	f1b8 0300 	subs.w	r3, r8, #0
 800640c:	d026      	beq.n	800645c <__d2b+0x84>
 800640e:	4668      	mov	r0, sp
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	f7ff fd83 	bl	8005f1c <__lo0bits>
 8006416:	9900      	ldr	r1, [sp, #0]
 8006418:	b1f0      	cbz	r0, 8006458 <__d2b+0x80>
 800641a:	9a01      	ldr	r2, [sp, #4]
 800641c:	f1c0 0320 	rsb	r3, r0, #32
 8006420:	fa02 f303 	lsl.w	r3, r2, r3
 8006424:	430b      	orrs	r3, r1
 8006426:	40c2      	lsrs	r2, r0
 8006428:	6163      	str	r3, [r4, #20]
 800642a:	9201      	str	r2, [sp, #4]
 800642c:	9b01      	ldr	r3, [sp, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	bf14      	ite	ne
 8006432:	2102      	movne	r1, #2
 8006434:	2101      	moveq	r1, #1
 8006436:	61a3      	str	r3, [r4, #24]
 8006438:	6121      	str	r1, [r4, #16]
 800643a:	b1c5      	cbz	r5, 800646e <__d2b+0x96>
 800643c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006440:	4405      	add	r5, r0
 8006442:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006446:	603d      	str	r5, [r7, #0]
 8006448:	6030      	str	r0, [r6, #0]
 800644a:	4620      	mov	r0, r4
 800644c:	b002      	add	sp, #8
 800644e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006456:	e7d6      	b.n	8006406 <__d2b+0x2e>
 8006458:	6161      	str	r1, [r4, #20]
 800645a:	e7e7      	b.n	800642c <__d2b+0x54>
 800645c:	a801      	add	r0, sp, #4
 800645e:	f7ff fd5d 	bl	8005f1c <__lo0bits>
 8006462:	2101      	movs	r1, #1
 8006464:	9b01      	ldr	r3, [sp, #4]
 8006466:	6121      	str	r1, [r4, #16]
 8006468:	6163      	str	r3, [r4, #20]
 800646a:	3020      	adds	r0, #32
 800646c:	e7e5      	b.n	800643a <__d2b+0x62>
 800646e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006472:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006476:	6038      	str	r0, [r7, #0]
 8006478:	6918      	ldr	r0, [r3, #16]
 800647a:	f7ff fd2f 	bl	8005edc <__hi0bits>
 800647e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006482:	6031      	str	r1, [r6, #0]
 8006484:	e7e1      	b.n	800644a <__d2b+0x72>
 8006486:	bf00      	nop
 8006488:	0800846b 	.word	0x0800846b
 800648c:	0800847c 	.word	0x0800847c

08006490 <_calloc_r>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	fba1 5402 	umull	r5, r4, r1, r2
 8006496:	b934      	cbnz	r4, 80064a6 <_calloc_r+0x16>
 8006498:	4629      	mov	r1, r5
 800649a:	f000 f875 	bl	8006588 <_malloc_r>
 800649e:	4606      	mov	r6, r0
 80064a0:	b928      	cbnz	r0, 80064ae <_calloc_r+0x1e>
 80064a2:	4630      	mov	r0, r6
 80064a4:	bd70      	pop	{r4, r5, r6, pc}
 80064a6:	220c      	movs	r2, #12
 80064a8:	2600      	movs	r6, #0
 80064aa:	6002      	str	r2, [r0, #0]
 80064ac:	e7f9      	b.n	80064a2 <_calloc_r+0x12>
 80064ae:	462a      	mov	r2, r5
 80064b0:	4621      	mov	r1, r4
 80064b2:	f7fe f93f 	bl	8004734 <memset>
 80064b6:	e7f4      	b.n	80064a2 <_calloc_r+0x12>

080064b8 <_free_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4605      	mov	r5, r0
 80064bc:	2900      	cmp	r1, #0
 80064be:	d040      	beq.n	8006542 <_free_r+0x8a>
 80064c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064c4:	1f0c      	subs	r4, r1, #4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	bfb8      	it	lt
 80064ca:	18e4      	addlt	r4, r4, r3
 80064cc:	f000 fa98 	bl	8006a00 <__malloc_lock>
 80064d0:	4a1c      	ldr	r2, [pc, #112]	; (8006544 <_free_r+0x8c>)
 80064d2:	6813      	ldr	r3, [r2, #0]
 80064d4:	b933      	cbnz	r3, 80064e4 <_free_r+0x2c>
 80064d6:	6063      	str	r3, [r4, #4]
 80064d8:	6014      	str	r4, [r2, #0]
 80064da:	4628      	mov	r0, r5
 80064dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064e0:	f000 ba94 	b.w	8006a0c <__malloc_unlock>
 80064e4:	42a3      	cmp	r3, r4
 80064e6:	d908      	bls.n	80064fa <_free_r+0x42>
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	1821      	adds	r1, r4, r0
 80064ec:	428b      	cmp	r3, r1
 80064ee:	bf01      	itttt	eq
 80064f0:	6819      	ldreq	r1, [r3, #0]
 80064f2:	685b      	ldreq	r3, [r3, #4]
 80064f4:	1809      	addeq	r1, r1, r0
 80064f6:	6021      	streq	r1, [r4, #0]
 80064f8:	e7ed      	b.n	80064d6 <_free_r+0x1e>
 80064fa:	461a      	mov	r2, r3
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	b10b      	cbz	r3, 8006504 <_free_r+0x4c>
 8006500:	42a3      	cmp	r3, r4
 8006502:	d9fa      	bls.n	80064fa <_free_r+0x42>
 8006504:	6811      	ldr	r1, [r2, #0]
 8006506:	1850      	adds	r0, r2, r1
 8006508:	42a0      	cmp	r0, r4
 800650a:	d10b      	bne.n	8006524 <_free_r+0x6c>
 800650c:	6820      	ldr	r0, [r4, #0]
 800650e:	4401      	add	r1, r0
 8006510:	1850      	adds	r0, r2, r1
 8006512:	4283      	cmp	r3, r0
 8006514:	6011      	str	r1, [r2, #0]
 8006516:	d1e0      	bne.n	80064da <_free_r+0x22>
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	4401      	add	r1, r0
 800651e:	6011      	str	r1, [r2, #0]
 8006520:	6053      	str	r3, [r2, #4]
 8006522:	e7da      	b.n	80064da <_free_r+0x22>
 8006524:	d902      	bls.n	800652c <_free_r+0x74>
 8006526:	230c      	movs	r3, #12
 8006528:	602b      	str	r3, [r5, #0]
 800652a:	e7d6      	b.n	80064da <_free_r+0x22>
 800652c:	6820      	ldr	r0, [r4, #0]
 800652e:	1821      	adds	r1, r4, r0
 8006530:	428b      	cmp	r3, r1
 8006532:	bf01      	itttt	eq
 8006534:	6819      	ldreq	r1, [r3, #0]
 8006536:	685b      	ldreq	r3, [r3, #4]
 8006538:	1809      	addeq	r1, r1, r0
 800653a:	6021      	streq	r1, [r4, #0]
 800653c:	6063      	str	r3, [r4, #4]
 800653e:	6054      	str	r4, [r2, #4]
 8006540:	e7cb      	b.n	80064da <_free_r+0x22>
 8006542:	bd38      	pop	{r3, r4, r5, pc}
 8006544:	20000344 	.word	0x20000344

08006548 <sbrk_aligned>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	4e0e      	ldr	r6, [pc, #56]	; (8006584 <sbrk_aligned+0x3c>)
 800654c:	460c      	mov	r4, r1
 800654e:	6831      	ldr	r1, [r6, #0]
 8006550:	4605      	mov	r5, r0
 8006552:	b911      	cbnz	r1, 800655a <sbrk_aligned+0x12>
 8006554:	f000 f9e8 	bl	8006928 <_sbrk_r>
 8006558:	6030      	str	r0, [r6, #0]
 800655a:	4621      	mov	r1, r4
 800655c:	4628      	mov	r0, r5
 800655e:	f000 f9e3 	bl	8006928 <_sbrk_r>
 8006562:	1c43      	adds	r3, r0, #1
 8006564:	d00a      	beq.n	800657c <sbrk_aligned+0x34>
 8006566:	1cc4      	adds	r4, r0, #3
 8006568:	f024 0403 	bic.w	r4, r4, #3
 800656c:	42a0      	cmp	r0, r4
 800656e:	d007      	beq.n	8006580 <sbrk_aligned+0x38>
 8006570:	1a21      	subs	r1, r4, r0
 8006572:	4628      	mov	r0, r5
 8006574:	f000 f9d8 	bl	8006928 <_sbrk_r>
 8006578:	3001      	adds	r0, #1
 800657a:	d101      	bne.n	8006580 <sbrk_aligned+0x38>
 800657c:	f04f 34ff 	mov.w	r4, #4294967295
 8006580:	4620      	mov	r0, r4
 8006582:	bd70      	pop	{r4, r5, r6, pc}
 8006584:	20000348 	.word	0x20000348

08006588 <_malloc_r>:
 8006588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800658c:	1ccd      	adds	r5, r1, #3
 800658e:	f025 0503 	bic.w	r5, r5, #3
 8006592:	3508      	adds	r5, #8
 8006594:	2d0c      	cmp	r5, #12
 8006596:	bf38      	it	cc
 8006598:	250c      	movcc	r5, #12
 800659a:	2d00      	cmp	r5, #0
 800659c:	4607      	mov	r7, r0
 800659e:	db01      	blt.n	80065a4 <_malloc_r+0x1c>
 80065a0:	42a9      	cmp	r1, r5
 80065a2:	d905      	bls.n	80065b0 <_malloc_r+0x28>
 80065a4:	230c      	movs	r3, #12
 80065a6:	2600      	movs	r6, #0
 80065a8:	603b      	str	r3, [r7, #0]
 80065aa:	4630      	mov	r0, r6
 80065ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b0:	4e2e      	ldr	r6, [pc, #184]	; (800666c <_malloc_r+0xe4>)
 80065b2:	f000 fa25 	bl	8006a00 <__malloc_lock>
 80065b6:	6833      	ldr	r3, [r6, #0]
 80065b8:	461c      	mov	r4, r3
 80065ba:	bb34      	cbnz	r4, 800660a <_malloc_r+0x82>
 80065bc:	4629      	mov	r1, r5
 80065be:	4638      	mov	r0, r7
 80065c0:	f7ff ffc2 	bl	8006548 <sbrk_aligned>
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	4604      	mov	r4, r0
 80065c8:	d14d      	bne.n	8006666 <_malloc_r+0xde>
 80065ca:	6834      	ldr	r4, [r6, #0]
 80065cc:	4626      	mov	r6, r4
 80065ce:	2e00      	cmp	r6, #0
 80065d0:	d140      	bne.n	8006654 <_malloc_r+0xcc>
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	4631      	mov	r1, r6
 80065d6:	4638      	mov	r0, r7
 80065d8:	eb04 0803 	add.w	r8, r4, r3
 80065dc:	f000 f9a4 	bl	8006928 <_sbrk_r>
 80065e0:	4580      	cmp	r8, r0
 80065e2:	d13a      	bne.n	800665a <_malloc_r+0xd2>
 80065e4:	6821      	ldr	r1, [r4, #0]
 80065e6:	3503      	adds	r5, #3
 80065e8:	1a6d      	subs	r5, r5, r1
 80065ea:	f025 0503 	bic.w	r5, r5, #3
 80065ee:	3508      	adds	r5, #8
 80065f0:	2d0c      	cmp	r5, #12
 80065f2:	bf38      	it	cc
 80065f4:	250c      	movcc	r5, #12
 80065f6:	4638      	mov	r0, r7
 80065f8:	4629      	mov	r1, r5
 80065fa:	f7ff ffa5 	bl	8006548 <sbrk_aligned>
 80065fe:	3001      	adds	r0, #1
 8006600:	d02b      	beq.n	800665a <_malloc_r+0xd2>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	442b      	add	r3, r5
 8006606:	6023      	str	r3, [r4, #0]
 8006608:	e00e      	b.n	8006628 <_malloc_r+0xa0>
 800660a:	6822      	ldr	r2, [r4, #0]
 800660c:	1b52      	subs	r2, r2, r5
 800660e:	d41e      	bmi.n	800664e <_malloc_r+0xc6>
 8006610:	2a0b      	cmp	r2, #11
 8006612:	d916      	bls.n	8006642 <_malloc_r+0xba>
 8006614:	1961      	adds	r1, r4, r5
 8006616:	42a3      	cmp	r3, r4
 8006618:	6025      	str	r5, [r4, #0]
 800661a:	bf18      	it	ne
 800661c:	6059      	strne	r1, [r3, #4]
 800661e:	6863      	ldr	r3, [r4, #4]
 8006620:	bf08      	it	eq
 8006622:	6031      	streq	r1, [r6, #0]
 8006624:	5162      	str	r2, [r4, r5]
 8006626:	604b      	str	r3, [r1, #4]
 8006628:	4638      	mov	r0, r7
 800662a:	f104 060b 	add.w	r6, r4, #11
 800662e:	f000 f9ed 	bl	8006a0c <__malloc_unlock>
 8006632:	f026 0607 	bic.w	r6, r6, #7
 8006636:	1d23      	adds	r3, r4, #4
 8006638:	1af2      	subs	r2, r6, r3
 800663a:	d0b6      	beq.n	80065aa <_malloc_r+0x22>
 800663c:	1b9b      	subs	r3, r3, r6
 800663e:	50a3      	str	r3, [r4, r2]
 8006640:	e7b3      	b.n	80065aa <_malloc_r+0x22>
 8006642:	6862      	ldr	r2, [r4, #4]
 8006644:	42a3      	cmp	r3, r4
 8006646:	bf0c      	ite	eq
 8006648:	6032      	streq	r2, [r6, #0]
 800664a:	605a      	strne	r2, [r3, #4]
 800664c:	e7ec      	b.n	8006628 <_malloc_r+0xa0>
 800664e:	4623      	mov	r3, r4
 8006650:	6864      	ldr	r4, [r4, #4]
 8006652:	e7b2      	b.n	80065ba <_malloc_r+0x32>
 8006654:	4634      	mov	r4, r6
 8006656:	6876      	ldr	r6, [r6, #4]
 8006658:	e7b9      	b.n	80065ce <_malloc_r+0x46>
 800665a:	230c      	movs	r3, #12
 800665c:	4638      	mov	r0, r7
 800665e:	603b      	str	r3, [r7, #0]
 8006660:	f000 f9d4 	bl	8006a0c <__malloc_unlock>
 8006664:	e7a1      	b.n	80065aa <_malloc_r+0x22>
 8006666:	6025      	str	r5, [r4, #0]
 8006668:	e7de      	b.n	8006628 <_malloc_r+0xa0>
 800666a:	bf00      	nop
 800666c:	20000344 	.word	0x20000344

08006670 <__ssputs_r>:
 8006670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006674:	688e      	ldr	r6, [r1, #8]
 8006676:	4682      	mov	sl, r0
 8006678:	429e      	cmp	r6, r3
 800667a:	460c      	mov	r4, r1
 800667c:	4690      	mov	r8, r2
 800667e:	461f      	mov	r7, r3
 8006680:	d838      	bhi.n	80066f4 <__ssputs_r+0x84>
 8006682:	898a      	ldrh	r2, [r1, #12]
 8006684:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006688:	d032      	beq.n	80066f0 <__ssputs_r+0x80>
 800668a:	6825      	ldr	r5, [r4, #0]
 800668c:	6909      	ldr	r1, [r1, #16]
 800668e:	3301      	adds	r3, #1
 8006690:	eba5 0901 	sub.w	r9, r5, r1
 8006694:	6965      	ldr	r5, [r4, #20]
 8006696:	444b      	add	r3, r9
 8006698:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800669c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066a0:	106d      	asrs	r5, r5, #1
 80066a2:	429d      	cmp	r5, r3
 80066a4:	bf38      	it	cc
 80066a6:	461d      	movcc	r5, r3
 80066a8:	0553      	lsls	r3, r2, #21
 80066aa:	d531      	bpl.n	8006710 <__ssputs_r+0xa0>
 80066ac:	4629      	mov	r1, r5
 80066ae:	f7ff ff6b 	bl	8006588 <_malloc_r>
 80066b2:	4606      	mov	r6, r0
 80066b4:	b950      	cbnz	r0, 80066cc <__ssputs_r+0x5c>
 80066b6:	230c      	movs	r3, #12
 80066b8:	f04f 30ff 	mov.w	r0, #4294967295
 80066bc:	f8ca 3000 	str.w	r3, [sl]
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066c6:	81a3      	strh	r3, [r4, #12]
 80066c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066cc:	464a      	mov	r2, r9
 80066ce:	6921      	ldr	r1, [r4, #16]
 80066d0:	f7ff fb4e 	bl	8005d70 <memcpy>
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066de:	81a3      	strh	r3, [r4, #12]
 80066e0:	6126      	str	r6, [r4, #16]
 80066e2:	444e      	add	r6, r9
 80066e4:	6026      	str	r6, [r4, #0]
 80066e6:	463e      	mov	r6, r7
 80066e8:	6165      	str	r5, [r4, #20]
 80066ea:	eba5 0509 	sub.w	r5, r5, r9
 80066ee:	60a5      	str	r5, [r4, #8]
 80066f0:	42be      	cmp	r6, r7
 80066f2:	d900      	bls.n	80066f6 <__ssputs_r+0x86>
 80066f4:	463e      	mov	r6, r7
 80066f6:	4632      	mov	r2, r6
 80066f8:	4641      	mov	r1, r8
 80066fa:	6820      	ldr	r0, [r4, #0]
 80066fc:	f000 f966 	bl	80069cc <memmove>
 8006700:	68a3      	ldr	r3, [r4, #8]
 8006702:	2000      	movs	r0, #0
 8006704:	1b9b      	subs	r3, r3, r6
 8006706:	60a3      	str	r3, [r4, #8]
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	4433      	add	r3, r6
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	e7db      	b.n	80066c8 <__ssputs_r+0x58>
 8006710:	462a      	mov	r2, r5
 8006712:	f000 f981 	bl	8006a18 <_realloc_r>
 8006716:	4606      	mov	r6, r0
 8006718:	2800      	cmp	r0, #0
 800671a:	d1e1      	bne.n	80066e0 <__ssputs_r+0x70>
 800671c:	4650      	mov	r0, sl
 800671e:	6921      	ldr	r1, [r4, #16]
 8006720:	f7ff feca 	bl	80064b8 <_free_r>
 8006724:	e7c7      	b.n	80066b6 <__ssputs_r+0x46>
	...

08006728 <_svfiprintf_r>:
 8006728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672c:	4698      	mov	r8, r3
 800672e:	898b      	ldrh	r3, [r1, #12]
 8006730:	4607      	mov	r7, r0
 8006732:	061b      	lsls	r3, r3, #24
 8006734:	460d      	mov	r5, r1
 8006736:	4614      	mov	r4, r2
 8006738:	b09d      	sub	sp, #116	; 0x74
 800673a:	d50e      	bpl.n	800675a <_svfiprintf_r+0x32>
 800673c:	690b      	ldr	r3, [r1, #16]
 800673e:	b963      	cbnz	r3, 800675a <_svfiprintf_r+0x32>
 8006740:	2140      	movs	r1, #64	; 0x40
 8006742:	f7ff ff21 	bl	8006588 <_malloc_r>
 8006746:	6028      	str	r0, [r5, #0]
 8006748:	6128      	str	r0, [r5, #16]
 800674a:	b920      	cbnz	r0, 8006756 <_svfiprintf_r+0x2e>
 800674c:	230c      	movs	r3, #12
 800674e:	603b      	str	r3, [r7, #0]
 8006750:	f04f 30ff 	mov.w	r0, #4294967295
 8006754:	e0d1      	b.n	80068fa <_svfiprintf_r+0x1d2>
 8006756:	2340      	movs	r3, #64	; 0x40
 8006758:	616b      	str	r3, [r5, #20]
 800675a:	2300      	movs	r3, #0
 800675c:	9309      	str	r3, [sp, #36]	; 0x24
 800675e:	2320      	movs	r3, #32
 8006760:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006764:	2330      	movs	r3, #48	; 0x30
 8006766:	f04f 0901 	mov.w	r9, #1
 800676a:	f8cd 800c 	str.w	r8, [sp, #12]
 800676e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006914 <_svfiprintf_r+0x1ec>
 8006772:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006776:	4623      	mov	r3, r4
 8006778:	469a      	mov	sl, r3
 800677a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800677e:	b10a      	cbz	r2, 8006784 <_svfiprintf_r+0x5c>
 8006780:	2a25      	cmp	r2, #37	; 0x25
 8006782:	d1f9      	bne.n	8006778 <_svfiprintf_r+0x50>
 8006784:	ebba 0b04 	subs.w	fp, sl, r4
 8006788:	d00b      	beq.n	80067a2 <_svfiprintf_r+0x7a>
 800678a:	465b      	mov	r3, fp
 800678c:	4622      	mov	r2, r4
 800678e:	4629      	mov	r1, r5
 8006790:	4638      	mov	r0, r7
 8006792:	f7ff ff6d 	bl	8006670 <__ssputs_r>
 8006796:	3001      	adds	r0, #1
 8006798:	f000 80aa 	beq.w	80068f0 <_svfiprintf_r+0x1c8>
 800679c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800679e:	445a      	add	r2, fp
 80067a0:	9209      	str	r2, [sp, #36]	; 0x24
 80067a2:	f89a 3000 	ldrb.w	r3, [sl]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 80a2 	beq.w	80068f0 <_svfiprintf_r+0x1c8>
 80067ac:	2300      	movs	r3, #0
 80067ae:	f04f 32ff 	mov.w	r2, #4294967295
 80067b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067b6:	f10a 0a01 	add.w	sl, sl, #1
 80067ba:	9304      	str	r3, [sp, #16]
 80067bc:	9307      	str	r3, [sp, #28]
 80067be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067c2:	931a      	str	r3, [sp, #104]	; 0x68
 80067c4:	4654      	mov	r4, sl
 80067c6:	2205      	movs	r2, #5
 80067c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067cc:	4851      	ldr	r0, [pc, #324]	; (8006914 <_svfiprintf_r+0x1ec>)
 80067ce:	f7ff fac1 	bl	8005d54 <memchr>
 80067d2:	9a04      	ldr	r2, [sp, #16]
 80067d4:	b9d8      	cbnz	r0, 800680e <_svfiprintf_r+0xe6>
 80067d6:	06d0      	lsls	r0, r2, #27
 80067d8:	bf44      	itt	mi
 80067da:	2320      	movmi	r3, #32
 80067dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067e0:	0711      	lsls	r1, r2, #28
 80067e2:	bf44      	itt	mi
 80067e4:	232b      	movmi	r3, #43	; 0x2b
 80067e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067ea:	f89a 3000 	ldrb.w	r3, [sl]
 80067ee:	2b2a      	cmp	r3, #42	; 0x2a
 80067f0:	d015      	beq.n	800681e <_svfiprintf_r+0xf6>
 80067f2:	4654      	mov	r4, sl
 80067f4:	2000      	movs	r0, #0
 80067f6:	f04f 0c0a 	mov.w	ip, #10
 80067fa:	9a07      	ldr	r2, [sp, #28]
 80067fc:	4621      	mov	r1, r4
 80067fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006802:	3b30      	subs	r3, #48	; 0x30
 8006804:	2b09      	cmp	r3, #9
 8006806:	d94e      	bls.n	80068a6 <_svfiprintf_r+0x17e>
 8006808:	b1b0      	cbz	r0, 8006838 <_svfiprintf_r+0x110>
 800680a:	9207      	str	r2, [sp, #28]
 800680c:	e014      	b.n	8006838 <_svfiprintf_r+0x110>
 800680e:	eba0 0308 	sub.w	r3, r0, r8
 8006812:	fa09 f303 	lsl.w	r3, r9, r3
 8006816:	4313      	orrs	r3, r2
 8006818:	46a2      	mov	sl, r4
 800681a:	9304      	str	r3, [sp, #16]
 800681c:	e7d2      	b.n	80067c4 <_svfiprintf_r+0x9c>
 800681e:	9b03      	ldr	r3, [sp, #12]
 8006820:	1d19      	adds	r1, r3, #4
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	9103      	str	r1, [sp, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	bfbb      	ittet	lt
 800682a:	425b      	neglt	r3, r3
 800682c:	f042 0202 	orrlt.w	r2, r2, #2
 8006830:	9307      	strge	r3, [sp, #28]
 8006832:	9307      	strlt	r3, [sp, #28]
 8006834:	bfb8      	it	lt
 8006836:	9204      	strlt	r2, [sp, #16]
 8006838:	7823      	ldrb	r3, [r4, #0]
 800683a:	2b2e      	cmp	r3, #46	; 0x2e
 800683c:	d10c      	bne.n	8006858 <_svfiprintf_r+0x130>
 800683e:	7863      	ldrb	r3, [r4, #1]
 8006840:	2b2a      	cmp	r3, #42	; 0x2a
 8006842:	d135      	bne.n	80068b0 <_svfiprintf_r+0x188>
 8006844:	9b03      	ldr	r3, [sp, #12]
 8006846:	3402      	adds	r4, #2
 8006848:	1d1a      	adds	r2, r3, #4
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	9203      	str	r2, [sp, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	bfb8      	it	lt
 8006852:	f04f 33ff 	movlt.w	r3, #4294967295
 8006856:	9305      	str	r3, [sp, #20]
 8006858:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006918 <_svfiprintf_r+0x1f0>
 800685c:	2203      	movs	r2, #3
 800685e:	4650      	mov	r0, sl
 8006860:	7821      	ldrb	r1, [r4, #0]
 8006862:	f7ff fa77 	bl	8005d54 <memchr>
 8006866:	b140      	cbz	r0, 800687a <_svfiprintf_r+0x152>
 8006868:	2340      	movs	r3, #64	; 0x40
 800686a:	eba0 000a 	sub.w	r0, r0, sl
 800686e:	fa03 f000 	lsl.w	r0, r3, r0
 8006872:	9b04      	ldr	r3, [sp, #16]
 8006874:	3401      	adds	r4, #1
 8006876:	4303      	orrs	r3, r0
 8006878:	9304      	str	r3, [sp, #16]
 800687a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800687e:	2206      	movs	r2, #6
 8006880:	4826      	ldr	r0, [pc, #152]	; (800691c <_svfiprintf_r+0x1f4>)
 8006882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006886:	f7ff fa65 	bl	8005d54 <memchr>
 800688a:	2800      	cmp	r0, #0
 800688c:	d038      	beq.n	8006900 <_svfiprintf_r+0x1d8>
 800688e:	4b24      	ldr	r3, [pc, #144]	; (8006920 <_svfiprintf_r+0x1f8>)
 8006890:	bb1b      	cbnz	r3, 80068da <_svfiprintf_r+0x1b2>
 8006892:	9b03      	ldr	r3, [sp, #12]
 8006894:	3307      	adds	r3, #7
 8006896:	f023 0307 	bic.w	r3, r3, #7
 800689a:	3308      	adds	r3, #8
 800689c:	9303      	str	r3, [sp, #12]
 800689e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a0:	4433      	add	r3, r6
 80068a2:	9309      	str	r3, [sp, #36]	; 0x24
 80068a4:	e767      	b.n	8006776 <_svfiprintf_r+0x4e>
 80068a6:	460c      	mov	r4, r1
 80068a8:	2001      	movs	r0, #1
 80068aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80068ae:	e7a5      	b.n	80067fc <_svfiprintf_r+0xd4>
 80068b0:	2300      	movs	r3, #0
 80068b2:	f04f 0c0a 	mov.w	ip, #10
 80068b6:	4619      	mov	r1, r3
 80068b8:	3401      	adds	r4, #1
 80068ba:	9305      	str	r3, [sp, #20]
 80068bc:	4620      	mov	r0, r4
 80068be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068c2:	3a30      	subs	r2, #48	; 0x30
 80068c4:	2a09      	cmp	r2, #9
 80068c6:	d903      	bls.n	80068d0 <_svfiprintf_r+0x1a8>
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d0c5      	beq.n	8006858 <_svfiprintf_r+0x130>
 80068cc:	9105      	str	r1, [sp, #20]
 80068ce:	e7c3      	b.n	8006858 <_svfiprintf_r+0x130>
 80068d0:	4604      	mov	r4, r0
 80068d2:	2301      	movs	r3, #1
 80068d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80068d8:	e7f0      	b.n	80068bc <_svfiprintf_r+0x194>
 80068da:	ab03      	add	r3, sp, #12
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	462a      	mov	r2, r5
 80068e0:	4638      	mov	r0, r7
 80068e2:	4b10      	ldr	r3, [pc, #64]	; (8006924 <_svfiprintf_r+0x1fc>)
 80068e4:	a904      	add	r1, sp, #16
 80068e6:	f7fd ffcb 	bl	8004880 <_printf_float>
 80068ea:	1c42      	adds	r2, r0, #1
 80068ec:	4606      	mov	r6, r0
 80068ee:	d1d6      	bne.n	800689e <_svfiprintf_r+0x176>
 80068f0:	89ab      	ldrh	r3, [r5, #12]
 80068f2:	065b      	lsls	r3, r3, #25
 80068f4:	f53f af2c 	bmi.w	8006750 <_svfiprintf_r+0x28>
 80068f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068fa:	b01d      	add	sp, #116	; 0x74
 80068fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006900:	ab03      	add	r3, sp, #12
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	462a      	mov	r2, r5
 8006906:	4638      	mov	r0, r7
 8006908:	4b06      	ldr	r3, [pc, #24]	; (8006924 <_svfiprintf_r+0x1fc>)
 800690a:	a904      	add	r1, sp, #16
 800690c:	f7fe fa54 	bl	8004db8 <_printf_i>
 8006910:	e7eb      	b.n	80068ea <_svfiprintf_r+0x1c2>
 8006912:	bf00      	nop
 8006914:	080085d4 	.word	0x080085d4
 8006918:	080085da 	.word	0x080085da
 800691c:	080085de 	.word	0x080085de
 8006920:	08004881 	.word	0x08004881
 8006924:	08006671 	.word	0x08006671

08006928 <_sbrk_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	2300      	movs	r3, #0
 800692c:	4d05      	ldr	r5, [pc, #20]	; (8006944 <_sbrk_r+0x1c>)
 800692e:	4604      	mov	r4, r0
 8006930:	4608      	mov	r0, r1
 8006932:	602b      	str	r3, [r5, #0]
 8006934:	f7fb febe 	bl	80026b4 <_sbrk>
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	d102      	bne.n	8006942 <_sbrk_r+0x1a>
 800693c:	682b      	ldr	r3, [r5, #0]
 800693e:	b103      	cbz	r3, 8006942 <_sbrk_r+0x1a>
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	bd38      	pop	{r3, r4, r5, pc}
 8006944:	2000034c 	.word	0x2000034c

08006948 <__assert_func>:
 8006948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800694a:	4614      	mov	r4, r2
 800694c:	461a      	mov	r2, r3
 800694e:	4b09      	ldr	r3, [pc, #36]	; (8006974 <__assert_func+0x2c>)
 8006950:	4605      	mov	r5, r0
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68d8      	ldr	r0, [r3, #12]
 8006956:	b14c      	cbz	r4, 800696c <__assert_func+0x24>
 8006958:	4b07      	ldr	r3, [pc, #28]	; (8006978 <__assert_func+0x30>)
 800695a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800695e:	9100      	str	r1, [sp, #0]
 8006960:	462b      	mov	r3, r5
 8006962:	4906      	ldr	r1, [pc, #24]	; (800697c <__assert_func+0x34>)
 8006964:	f000 f80e 	bl	8006984 <fiprintf>
 8006968:	f000 faaa 	bl	8006ec0 <abort>
 800696c:	4b04      	ldr	r3, [pc, #16]	; (8006980 <__assert_func+0x38>)
 800696e:	461c      	mov	r4, r3
 8006970:	e7f3      	b.n	800695a <__assert_func+0x12>
 8006972:	bf00      	nop
 8006974:	2000004c 	.word	0x2000004c
 8006978:	080085e5 	.word	0x080085e5
 800697c:	080085f2 	.word	0x080085f2
 8006980:	08008620 	.word	0x08008620

08006984 <fiprintf>:
 8006984:	b40e      	push	{r1, r2, r3}
 8006986:	b503      	push	{r0, r1, lr}
 8006988:	4601      	mov	r1, r0
 800698a:	ab03      	add	r3, sp, #12
 800698c:	4805      	ldr	r0, [pc, #20]	; (80069a4 <fiprintf+0x20>)
 800698e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006992:	6800      	ldr	r0, [r0, #0]
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	f000 f895 	bl	8006ac4 <_vfiprintf_r>
 800699a:	b002      	add	sp, #8
 800699c:	f85d eb04 	ldr.w	lr, [sp], #4
 80069a0:	b003      	add	sp, #12
 80069a2:	4770      	bx	lr
 80069a4:	2000004c 	.word	0x2000004c

080069a8 <__ascii_mbtowc>:
 80069a8:	b082      	sub	sp, #8
 80069aa:	b901      	cbnz	r1, 80069ae <__ascii_mbtowc+0x6>
 80069ac:	a901      	add	r1, sp, #4
 80069ae:	b142      	cbz	r2, 80069c2 <__ascii_mbtowc+0x1a>
 80069b0:	b14b      	cbz	r3, 80069c6 <__ascii_mbtowc+0x1e>
 80069b2:	7813      	ldrb	r3, [r2, #0]
 80069b4:	600b      	str	r3, [r1, #0]
 80069b6:	7812      	ldrb	r2, [r2, #0]
 80069b8:	1e10      	subs	r0, r2, #0
 80069ba:	bf18      	it	ne
 80069bc:	2001      	movne	r0, #1
 80069be:	b002      	add	sp, #8
 80069c0:	4770      	bx	lr
 80069c2:	4610      	mov	r0, r2
 80069c4:	e7fb      	b.n	80069be <__ascii_mbtowc+0x16>
 80069c6:	f06f 0001 	mvn.w	r0, #1
 80069ca:	e7f8      	b.n	80069be <__ascii_mbtowc+0x16>

080069cc <memmove>:
 80069cc:	4288      	cmp	r0, r1
 80069ce:	b510      	push	{r4, lr}
 80069d0:	eb01 0402 	add.w	r4, r1, r2
 80069d4:	d902      	bls.n	80069dc <memmove+0x10>
 80069d6:	4284      	cmp	r4, r0
 80069d8:	4623      	mov	r3, r4
 80069da:	d807      	bhi.n	80069ec <memmove+0x20>
 80069dc:	1e43      	subs	r3, r0, #1
 80069de:	42a1      	cmp	r1, r4
 80069e0:	d008      	beq.n	80069f4 <memmove+0x28>
 80069e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069ea:	e7f8      	b.n	80069de <memmove+0x12>
 80069ec:	4601      	mov	r1, r0
 80069ee:	4402      	add	r2, r0
 80069f0:	428a      	cmp	r2, r1
 80069f2:	d100      	bne.n	80069f6 <memmove+0x2a>
 80069f4:	bd10      	pop	{r4, pc}
 80069f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069fe:	e7f7      	b.n	80069f0 <memmove+0x24>

08006a00 <__malloc_lock>:
 8006a00:	4801      	ldr	r0, [pc, #4]	; (8006a08 <__malloc_lock+0x8>)
 8006a02:	f000 bc19 	b.w	8007238 <__retarget_lock_acquire_recursive>
 8006a06:	bf00      	nop
 8006a08:	20000350 	.word	0x20000350

08006a0c <__malloc_unlock>:
 8006a0c:	4801      	ldr	r0, [pc, #4]	; (8006a14 <__malloc_unlock+0x8>)
 8006a0e:	f000 bc14 	b.w	800723a <__retarget_lock_release_recursive>
 8006a12:	bf00      	nop
 8006a14:	20000350 	.word	0x20000350

08006a18 <_realloc_r>:
 8006a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a1c:	4680      	mov	r8, r0
 8006a1e:	4614      	mov	r4, r2
 8006a20:	460e      	mov	r6, r1
 8006a22:	b921      	cbnz	r1, 8006a2e <_realloc_r+0x16>
 8006a24:	4611      	mov	r1, r2
 8006a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2a:	f7ff bdad 	b.w	8006588 <_malloc_r>
 8006a2e:	b92a      	cbnz	r2, 8006a3c <_realloc_r+0x24>
 8006a30:	f7ff fd42 	bl	80064b8 <_free_r>
 8006a34:	4625      	mov	r5, r4
 8006a36:	4628      	mov	r0, r5
 8006a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a3c:	f000 fc64 	bl	8007308 <_malloc_usable_size_r>
 8006a40:	4284      	cmp	r4, r0
 8006a42:	4607      	mov	r7, r0
 8006a44:	d802      	bhi.n	8006a4c <_realloc_r+0x34>
 8006a46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a4a:	d812      	bhi.n	8006a72 <_realloc_r+0x5a>
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	4640      	mov	r0, r8
 8006a50:	f7ff fd9a 	bl	8006588 <_malloc_r>
 8006a54:	4605      	mov	r5, r0
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d0ed      	beq.n	8006a36 <_realloc_r+0x1e>
 8006a5a:	42bc      	cmp	r4, r7
 8006a5c:	4622      	mov	r2, r4
 8006a5e:	4631      	mov	r1, r6
 8006a60:	bf28      	it	cs
 8006a62:	463a      	movcs	r2, r7
 8006a64:	f7ff f984 	bl	8005d70 <memcpy>
 8006a68:	4631      	mov	r1, r6
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	f7ff fd24 	bl	80064b8 <_free_r>
 8006a70:	e7e1      	b.n	8006a36 <_realloc_r+0x1e>
 8006a72:	4635      	mov	r5, r6
 8006a74:	e7df      	b.n	8006a36 <_realloc_r+0x1e>

08006a76 <__sfputc_r>:
 8006a76:	6893      	ldr	r3, [r2, #8]
 8006a78:	b410      	push	{r4}
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	6093      	str	r3, [r2, #8]
 8006a80:	da07      	bge.n	8006a92 <__sfputc_r+0x1c>
 8006a82:	6994      	ldr	r4, [r2, #24]
 8006a84:	42a3      	cmp	r3, r4
 8006a86:	db01      	blt.n	8006a8c <__sfputc_r+0x16>
 8006a88:	290a      	cmp	r1, #10
 8006a8a:	d102      	bne.n	8006a92 <__sfputc_r+0x1c>
 8006a8c:	bc10      	pop	{r4}
 8006a8e:	f000 b949 	b.w	8006d24 <__swbuf_r>
 8006a92:	6813      	ldr	r3, [r2, #0]
 8006a94:	1c58      	adds	r0, r3, #1
 8006a96:	6010      	str	r0, [r2, #0]
 8006a98:	7019      	strb	r1, [r3, #0]
 8006a9a:	4608      	mov	r0, r1
 8006a9c:	bc10      	pop	{r4}
 8006a9e:	4770      	bx	lr

08006aa0 <__sfputs_r>:
 8006aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	460f      	mov	r7, r1
 8006aa6:	4614      	mov	r4, r2
 8006aa8:	18d5      	adds	r5, r2, r3
 8006aaa:	42ac      	cmp	r4, r5
 8006aac:	d101      	bne.n	8006ab2 <__sfputs_r+0x12>
 8006aae:	2000      	movs	r0, #0
 8006ab0:	e007      	b.n	8006ac2 <__sfputs_r+0x22>
 8006ab2:	463a      	mov	r2, r7
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aba:	f7ff ffdc 	bl	8006a76 <__sfputc_r>
 8006abe:	1c43      	adds	r3, r0, #1
 8006ac0:	d1f3      	bne.n	8006aaa <__sfputs_r+0xa>
 8006ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ac4 <_vfiprintf_r>:
 8006ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac8:	460d      	mov	r5, r1
 8006aca:	4614      	mov	r4, r2
 8006acc:	4698      	mov	r8, r3
 8006ace:	4606      	mov	r6, r0
 8006ad0:	b09d      	sub	sp, #116	; 0x74
 8006ad2:	b118      	cbz	r0, 8006adc <_vfiprintf_r+0x18>
 8006ad4:	6983      	ldr	r3, [r0, #24]
 8006ad6:	b90b      	cbnz	r3, 8006adc <_vfiprintf_r+0x18>
 8006ad8:	f000 fb10 	bl	80070fc <__sinit>
 8006adc:	4b89      	ldr	r3, [pc, #548]	; (8006d04 <_vfiprintf_r+0x240>)
 8006ade:	429d      	cmp	r5, r3
 8006ae0:	d11b      	bne.n	8006b1a <_vfiprintf_r+0x56>
 8006ae2:	6875      	ldr	r5, [r6, #4]
 8006ae4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ae6:	07d9      	lsls	r1, r3, #31
 8006ae8:	d405      	bmi.n	8006af6 <_vfiprintf_r+0x32>
 8006aea:	89ab      	ldrh	r3, [r5, #12]
 8006aec:	059a      	lsls	r2, r3, #22
 8006aee:	d402      	bmi.n	8006af6 <_vfiprintf_r+0x32>
 8006af0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006af2:	f000 fba1 	bl	8007238 <__retarget_lock_acquire_recursive>
 8006af6:	89ab      	ldrh	r3, [r5, #12]
 8006af8:	071b      	lsls	r3, r3, #28
 8006afa:	d501      	bpl.n	8006b00 <_vfiprintf_r+0x3c>
 8006afc:	692b      	ldr	r3, [r5, #16]
 8006afe:	b9eb      	cbnz	r3, 8006b3c <_vfiprintf_r+0x78>
 8006b00:	4629      	mov	r1, r5
 8006b02:	4630      	mov	r0, r6
 8006b04:	f000 f96e 	bl	8006de4 <__swsetup_r>
 8006b08:	b1c0      	cbz	r0, 8006b3c <_vfiprintf_r+0x78>
 8006b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b0c:	07dc      	lsls	r4, r3, #31
 8006b0e:	d50e      	bpl.n	8006b2e <_vfiprintf_r+0x6a>
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
 8006b14:	b01d      	add	sp, #116	; 0x74
 8006b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1a:	4b7b      	ldr	r3, [pc, #492]	; (8006d08 <_vfiprintf_r+0x244>)
 8006b1c:	429d      	cmp	r5, r3
 8006b1e:	d101      	bne.n	8006b24 <_vfiprintf_r+0x60>
 8006b20:	68b5      	ldr	r5, [r6, #8]
 8006b22:	e7df      	b.n	8006ae4 <_vfiprintf_r+0x20>
 8006b24:	4b79      	ldr	r3, [pc, #484]	; (8006d0c <_vfiprintf_r+0x248>)
 8006b26:	429d      	cmp	r5, r3
 8006b28:	bf08      	it	eq
 8006b2a:	68f5      	ldreq	r5, [r6, #12]
 8006b2c:	e7da      	b.n	8006ae4 <_vfiprintf_r+0x20>
 8006b2e:	89ab      	ldrh	r3, [r5, #12]
 8006b30:	0598      	lsls	r0, r3, #22
 8006b32:	d4ed      	bmi.n	8006b10 <_vfiprintf_r+0x4c>
 8006b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b36:	f000 fb80 	bl	800723a <__retarget_lock_release_recursive>
 8006b3a:	e7e9      	b.n	8006b10 <_vfiprintf_r+0x4c>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b40:	2320      	movs	r3, #32
 8006b42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b46:	2330      	movs	r3, #48	; 0x30
 8006b48:	f04f 0901 	mov.w	r9, #1
 8006b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b50:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006d10 <_vfiprintf_r+0x24c>
 8006b54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b58:	4623      	mov	r3, r4
 8006b5a:	469a      	mov	sl, r3
 8006b5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b60:	b10a      	cbz	r2, 8006b66 <_vfiprintf_r+0xa2>
 8006b62:	2a25      	cmp	r2, #37	; 0x25
 8006b64:	d1f9      	bne.n	8006b5a <_vfiprintf_r+0x96>
 8006b66:	ebba 0b04 	subs.w	fp, sl, r4
 8006b6a:	d00b      	beq.n	8006b84 <_vfiprintf_r+0xc0>
 8006b6c:	465b      	mov	r3, fp
 8006b6e:	4622      	mov	r2, r4
 8006b70:	4629      	mov	r1, r5
 8006b72:	4630      	mov	r0, r6
 8006b74:	f7ff ff94 	bl	8006aa0 <__sfputs_r>
 8006b78:	3001      	adds	r0, #1
 8006b7a:	f000 80aa 	beq.w	8006cd2 <_vfiprintf_r+0x20e>
 8006b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b80:	445a      	add	r2, fp
 8006b82:	9209      	str	r2, [sp, #36]	; 0x24
 8006b84:	f89a 3000 	ldrb.w	r3, [sl]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 80a2 	beq.w	8006cd2 <_vfiprintf_r+0x20e>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f04f 32ff 	mov.w	r2, #4294967295
 8006b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b98:	f10a 0a01 	add.w	sl, sl, #1
 8006b9c:	9304      	str	r3, [sp, #16]
 8006b9e:	9307      	str	r3, [sp, #28]
 8006ba0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ba4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ba6:	4654      	mov	r4, sl
 8006ba8:	2205      	movs	r2, #5
 8006baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bae:	4858      	ldr	r0, [pc, #352]	; (8006d10 <_vfiprintf_r+0x24c>)
 8006bb0:	f7ff f8d0 	bl	8005d54 <memchr>
 8006bb4:	9a04      	ldr	r2, [sp, #16]
 8006bb6:	b9d8      	cbnz	r0, 8006bf0 <_vfiprintf_r+0x12c>
 8006bb8:	06d1      	lsls	r1, r2, #27
 8006bba:	bf44      	itt	mi
 8006bbc:	2320      	movmi	r3, #32
 8006bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bc2:	0713      	lsls	r3, r2, #28
 8006bc4:	bf44      	itt	mi
 8006bc6:	232b      	movmi	r3, #43	; 0x2b
 8006bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd2:	d015      	beq.n	8006c00 <_vfiprintf_r+0x13c>
 8006bd4:	4654      	mov	r4, sl
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	f04f 0c0a 	mov.w	ip, #10
 8006bdc:	9a07      	ldr	r2, [sp, #28]
 8006bde:	4621      	mov	r1, r4
 8006be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006be4:	3b30      	subs	r3, #48	; 0x30
 8006be6:	2b09      	cmp	r3, #9
 8006be8:	d94e      	bls.n	8006c88 <_vfiprintf_r+0x1c4>
 8006bea:	b1b0      	cbz	r0, 8006c1a <_vfiprintf_r+0x156>
 8006bec:	9207      	str	r2, [sp, #28]
 8006bee:	e014      	b.n	8006c1a <_vfiprintf_r+0x156>
 8006bf0:	eba0 0308 	sub.w	r3, r0, r8
 8006bf4:	fa09 f303 	lsl.w	r3, r9, r3
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	46a2      	mov	sl, r4
 8006bfc:	9304      	str	r3, [sp, #16]
 8006bfe:	e7d2      	b.n	8006ba6 <_vfiprintf_r+0xe2>
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	1d19      	adds	r1, r3, #4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	9103      	str	r1, [sp, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bfbb      	ittet	lt
 8006c0c:	425b      	neglt	r3, r3
 8006c0e:	f042 0202 	orrlt.w	r2, r2, #2
 8006c12:	9307      	strge	r3, [sp, #28]
 8006c14:	9307      	strlt	r3, [sp, #28]
 8006c16:	bfb8      	it	lt
 8006c18:	9204      	strlt	r2, [sp, #16]
 8006c1a:	7823      	ldrb	r3, [r4, #0]
 8006c1c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c1e:	d10c      	bne.n	8006c3a <_vfiprintf_r+0x176>
 8006c20:	7863      	ldrb	r3, [r4, #1]
 8006c22:	2b2a      	cmp	r3, #42	; 0x2a
 8006c24:	d135      	bne.n	8006c92 <_vfiprintf_r+0x1ce>
 8006c26:	9b03      	ldr	r3, [sp, #12]
 8006c28:	3402      	adds	r4, #2
 8006c2a:	1d1a      	adds	r2, r3, #4
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	9203      	str	r2, [sp, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	bfb8      	it	lt
 8006c34:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c38:	9305      	str	r3, [sp, #20]
 8006c3a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006d14 <_vfiprintf_r+0x250>
 8006c3e:	2203      	movs	r2, #3
 8006c40:	4650      	mov	r0, sl
 8006c42:	7821      	ldrb	r1, [r4, #0]
 8006c44:	f7ff f886 	bl	8005d54 <memchr>
 8006c48:	b140      	cbz	r0, 8006c5c <_vfiprintf_r+0x198>
 8006c4a:	2340      	movs	r3, #64	; 0x40
 8006c4c:	eba0 000a 	sub.w	r0, r0, sl
 8006c50:	fa03 f000 	lsl.w	r0, r3, r0
 8006c54:	9b04      	ldr	r3, [sp, #16]
 8006c56:	3401      	adds	r4, #1
 8006c58:	4303      	orrs	r3, r0
 8006c5a:	9304      	str	r3, [sp, #16]
 8006c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c60:	2206      	movs	r2, #6
 8006c62:	482d      	ldr	r0, [pc, #180]	; (8006d18 <_vfiprintf_r+0x254>)
 8006c64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c68:	f7ff f874 	bl	8005d54 <memchr>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d03f      	beq.n	8006cf0 <_vfiprintf_r+0x22c>
 8006c70:	4b2a      	ldr	r3, [pc, #168]	; (8006d1c <_vfiprintf_r+0x258>)
 8006c72:	bb1b      	cbnz	r3, 8006cbc <_vfiprintf_r+0x1f8>
 8006c74:	9b03      	ldr	r3, [sp, #12]
 8006c76:	3307      	adds	r3, #7
 8006c78:	f023 0307 	bic.w	r3, r3, #7
 8006c7c:	3308      	adds	r3, #8
 8006c7e:	9303      	str	r3, [sp, #12]
 8006c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c82:	443b      	add	r3, r7
 8006c84:	9309      	str	r3, [sp, #36]	; 0x24
 8006c86:	e767      	b.n	8006b58 <_vfiprintf_r+0x94>
 8006c88:	460c      	mov	r4, r1
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c90:	e7a5      	b.n	8006bde <_vfiprintf_r+0x11a>
 8006c92:	2300      	movs	r3, #0
 8006c94:	f04f 0c0a 	mov.w	ip, #10
 8006c98:	4619      	mov	r1, r3
 8006c9a:	3401      	adds	r4, #1
 8006c9c:	9305      	str	r3, [sp, #20]
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ca4:	3a30      	subs	r2, #48	; 0x30
 8006ca6:	2a09      	cmp	r2, #9
 8006ca8:	d903      	bls.n	8006cb2 <_vfiprintf_r+0x1ee>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0c5      	beq.n	8006c3a <_vfiprintf_r+0x176>
 8006cae:	9105      	str	r1, [sp, #20]
 8006cb0:	e7c3      	b.n	8006c3a <_vfiprintf_r+0x176>
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cba:	e7f0      	b.n	8006c9e <_vfiprintf_r+0x1da>
 8006cbc:	ab03      	add	r3, sp, #12
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	462a      	mov	r2, r5
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	4b16      	ldr	r3, [pc, #88]	; (8006d20 <_vfiprintf_r+0x25c>)
 8006cc6:	a904      	add	r1, sp, #16
 8006cc8:	f7fd fdda 	bl	8004880 <_printf_float>
 8006ccc:	4607      	mov	r7, r0
 8006cce:	1c78      	adds	r0, r7, #1
 8006cd0:	d1d6      	bne.n	8006c80 <_vfiprintf_r+0x1bc>
 8006cd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cd4:	07d9      	lsls	r1, r3, #31
 8006cd6:	d405      	bmi.n	8006ce4 <_vfiprintf_r+0x220>
 8006cd8:	89ab      	ldrh	r3, [r5, #12]
 8006cda:	059a      	lsls	r2, r3, #22
 8006cdc:	d402      	bmi.n	8006ce4 <_vfiprintf_r+0x220>
 8006cde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ce0:	f000 faab 	bl	800723a <__retarget_lock_release_recursive>
 8006ce4:	89ab      	ldrh	r3, [r5, #12]
 8006ce6:	065b      	lsls	r3, r3, #25
 8006ce8:	f53f af12 	bmi.w	8006b10 <_vfiprintf_r+0x4c>
 8006cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cee:	e711      	b.n	8006b14 <_vfiprintf_r+0x50>
 8006cf0:	ab03      	add	r3, sp, #12
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	462a      	mov	r2, r5
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	4b09      	ldr	r3, [pc, #36]	; (8006d20 <_vfiprintf_r+0x25c>)
 8006cfa:	a904      	add	r1, sp, #16
 8006cfc:	f7fe f85c 	bl	8004db8 <_printf_i>
 8006d00:	e7e4      	b.n	8006ccc <_vfiprintf_r+0x208>
 8006d02:	bf00      	nop
 8006d04:	0800874c 	.word	0x0800874c
 8006d08:	0800876c 	.word	0x0800876c
 8006d0c:	0800872c 	.word	0x0800872c
 8006d10:	080085d4 	.word	0x080085d4
 8006d14:	080085da 	.word	0x080085da
 8006d18:	080085de 	.word	0x080085de
 8006d1c:	08004881 	.word	0x08004881
 8006d20:	08006aa1 	.word	0x08006aa1

08006d24 <__swbuf_r>:
 8006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d26:	460e      	mov	r6, r1
 8006d28:	4614      	mov	r4, r2
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	b118      	cbz	r0, 8006d36 <__swbuf_r+0x12>
 8006d2e:	6983      	ldr	r3, [r0, #24]
 8006d30:	b90b      	cbnz	r3, 8006d36 <__swbuf_r+0x12>
 8006d32:	f000 f9e3 	bl	80070fc <__sinit>
 8006d36:	4b21      	ldr	r3, [pc, #132]	; (8006dbc <__swbuf_r+0x98>)
 8006d38:	429c      	cmp	r4, r3
 8006d3a:	d12b      	bne.n	8006d94 <__swbuf_r+0x70>
 8006d3c:	686c      	ldr	r4, [r5, #4]
 8006d3e:	69a3      	ldr	r3, [r4, #24]
 8006d40:	60a3      	str	r3, [r4, #8]
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	071a      	lsls	r2, r3, #28
 8006d46:	d52f      	bpl.n	8006da8 <__swbuf_r+0x84>
 8006d48:	6923      	ldr	r3, [r4, #16]
 8006d4a:	b36b      	cbz	r3, 8006da8 <__swbuf_r+0x84>
 8006d4c:	6923      	ldr	r3, [r4, #16]
 8006d4e:	6820      	ldr	r0, [r4, #0]
 8006d50:	b2f6      	uxtb	r6, r6
 8006d52:	1ac0      	subs	r0, r0, r3
 8006d54:	6963      	ldr	r3, [r4, #20]
 8006d56:	4637      	mov	r7, r6
 8006d58:	4283      	cmp	r3, r0
 8006d5a:	dc04      	bgt.n	8006d66 <__swbuf_r+0x42>
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	4628      	mov	r0, r5
 8006d60:	f000 f938 	bl	8006fd4 <_fflush_r>
 8006d64:	bb30      	cbnz	r0, 8006db4 <__swbuf_r+0x90>
 8006d66:	68a3      	ldr	r3, [r4, #8]
 8006d68:	3001      	adds	r0, #1
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	60a3      	str	r3, [r4, #8]
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	6022      	str	r2, [r4, #0]
 8006d74:	701e      	strb	r6, [r3, #0]
 8006d76:	6963      	ldr	r3, [r4, #20]
 8006d78:	4283      	cmp	r3, r0
 8006d7a:	d004      	beq.n	8006d86 <__swbuf_r+0x62>
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	07db      	lsls	r3, r3, #31
 8006d80:	d506      	bpl.n	8006d90 <__swbuf_r+0x6c>
 8006d82:	2e0a      	cmp	r6, #10
 8006d84:	d104      	bne.n	8006d90 <__swbuf_r+0x6c>
 8006d86:	4621      	mov	r1, r4
 8006d88:	4628      	mov	r0, r5
 8006d8a:	f000 f923 	bl	8006fd4 <_fflush_r>
 8006d8e:	b988      	cbnz	r0, 8006db4 <__swbuf_r+0x90>
 8006d90:	4638      	mov	r0, r7
 8006d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d94:	4b0a      	ldr	r3, [pc, #40]	; (8006dc0 <__swbuf_r+0x9c>)
 8006d96:	429c      	cmp	r4, r3
 8006d98:	d101      	bne.n	8006d9e <__swbuf_r+0x7a>
 8006d9a:	68ac      	ldr	r4, [r5, #8]
 8006d9c:	e7cf      	b.n	8006d3e <__swbuf_r+0x1a>
 8006d9e:	4b09      	ldr	r3, [pc, #36]	; (8006dc4 <__swbuf_r+0xa0>)
 8006da0:	429c      	cmp	r4, r3
 8006da2:	bf08      	it	eq
 8006da4:	68ec      	ldreq	r4, [r5, #12]
 8006da6:	e7ca      	b.n	8006d3e <__swbuf_r+0x1a>
 8006da8:	4621      	mov	r1, r4
 8006daa:	4628      	mov	r0, r5
 8006dac:	f000 f81a 	bl	8006de4 <__swsetup_r>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d0cb      	beq.n	8006d4c <__swbuf_r+0x28>
 8006db4:	f04f 37ff 	mov.w	r7, #4294967295
 8006db8:	e7ea      	b.n	8006d90 <__swbuf_r+0x6c>
 8006dba:	bf00      	nop
 8006dbc:	0800874c 	.word	0x0800874c
 8006dc0:	0800876c 	.word	0x0800876c
 8006dc4:	0800872c 	.word	0x0800872c

08006dc8 <__ascii_wctomb>:
 8006dc8:	4603      	mov	r3, r0
 8006dca:	4608      	mov	r0, r1
 8006dcc:	b141      	cbz	r1, 8006de0 <__ascii_wctomb+0x18>
 8006dce:	2aff      	cmp	r2, #255	; 0xff
 8006dd0:	d904      	bls.n	8006ddc <__ascii_wctomb+0x14>
 8006dd2:	228a      	movs	r2, #138	; 0x8a
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	4770      	bx	lr
 8006ddc:	2001      	movs	r0, #1
 8006dde:	700a      	strb	r2, [r1, #0]
 8006de0:	4770      	bx	lr
	...

08006de4 <__swsetup_r>:
 8006de4:	4b32      	ldr	r3, [pc, #200]	; (8006eb0 <__swsetup_r+0xcc>)
 8006de6:	b570      	push	{r4, r5, r6, lr}
 8006de8:	681d      	ldr	r5, [r3, #0]
 8006dea:	4606      	mov	r6, r0
 8006dec:	460c      	mov	r4, r1
 8006dee:	b125      	cbz	r5, 8006dfa <__swsetup_r+0x16>
 8006df0:	69ab      	ldr	r3, [r5, #24]
 8006df2:	b913      	cbnz	r3, 8006dfa <__swsetup_r+0x16>
 8006df4:	4628      	mov	r0, r5
 8006df6:	f000 f981 	bl	80070fc <__sinit>
 8006dfa:	4b2e      	ldr	r3, [pc, #184]	; (8006eb4 <__swsetup_r+0xd0>)
 8006dfc:	429c      	cmp	r4, r3
 8006dfe:	d10f      	bne.n	8006e20 <__swsetup_r+0x3c>
 8006e00:	686c      	ldr	r4, [r5, #4]
 8006e02:	89a3      	ldrh	r3, [r4, #12]
 8006e04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e08:	0719      	lsls	r1, r3, #28
 8006e0a:	d42c      	bmi.n	8006e66 <__swsetup_r+0x82>
 8006e0c:	06dd      	lsls	r5, r3, #27
 8006e0e:	d411      	bmi.n	8006e34 <__swsetup_r+0x50>
 8006e10:	2309      	movs	r3, #9
 8006e12:	6033      	str	r3, [r6, #0]
 8006e14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e18:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1c:	81a3      	strh	r3, [r4, #12]
 8006e1e:	e03e      	b.n	8006e9e <__swsetup_r+0xba>
 8006e20:	4b25      	ldr	r3, [pc, #148]	; (8006eb8 <__swsetup_r+0xd4>)
 8006e22:	429c      	cmp	r4, r3
 8006e24:	d101      	bne.n	8006e2a <__swsetup_r+0x46>
 8006e26:	68ac      	ldr	r4, [r5, #8]
 8006e28:	e7eb      	b.n	8006e02 <__swsetup_r+0x1e>
 8006e2a:	4b24      	ldr	r3, [pc, #144]	; (8006ebc <__swsetup_r+0xd8>)
 8006e2c:	429c      	cmp	r4, r3
 8006e2e:	bf08      	it	eq
 8006e30:	68ec      	ldreq	r4, [r5, #12]
 8006e32:	e7e6      	b.n	8006e02 <__swsetup_r+0x1e>
 8006e34:	0758      	lsls	r0, r3, #29
 8006e36:	d512      	bpl.n	8006e5e <__swsetup_r+0x7a>
 8006e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e3a:	b141      	cbz	r1, 8006e4e <__swsetup_r+0x6a>
 8006e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e40:	4299      	cmp	r1, r3
 8006e42:	d002      	beq.n	8006e4a <__swsetup_r+0x66>
 8006e44:	4630      	mov	r0, r6
 8006e46:	f7ff fb37 	bl	80064b8 <_free_r>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	6363      	str	r3, [r4, #52]	; 0x34
 8006e4e:	89a3      	ldrh	r3, [r4, #12]
 8006e50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e54:	81a3      	strh	r3, [r4, #12]
 8006e56:	2300      	movs	r3, #0
 8006e58:	6063      	str	r3, [r4, #4]
 8006e5a:	6923      	ldr	r3, [r4, #16]
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	f043 0308 	orr.w	r3, r3, #8
 8006e64:	81a3      	strh	r3, [r4, #12]
 8006e66:	6923      	ldr	r3, [r4, #16]
 8006e68:	b94b      	cbnz	r3, 8006e7e <__swsetup_r+0x9a>
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e74:	d003      	beq.n	8006e7e <__swsetup_r+0x9a>
 8006e76:	4621      	mov	r1, r4
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f000 fa05 	bl	8007288 <__smakebuf_r>
 8006e7e:	89a0      	ldrh	r0, [r4, #12]
 8006e80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e84:	f010 0301 	ands.w	r3, r0, #1
 8006e88:	d00a      	beq.n	8006ea0 <__swsetup_r+0xbc>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60a3      	str	r3, [r4, #8]
 8006e8e:	6963      	ldr	r3, [r4, #20]
 8006e90:	425b      	negs	r3, r3
 8006e92:	61a3      	str	r3, [r4, #24]
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	b943      	cbnz	r3, 8006eaa <__swsetup_r+0xc6>
 8006e98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e9c:	d1ba      	bne.n	8006e14 <__swsetup_r+0x30>
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	0781      	lsls	r1, r0, #30
 8006ea2:	bf58      	it	pl
 8006ea4:	6963      	ldrpl	r3, [r4, #20]
 8006ea6:	60a3      	str	r3, [r4, #8]
 8006ea8:	e7f4      	b.n	8006e94 <__swsetup_r+0xb0>
 8006eaa:	2000      	movs	r0, #0
 8006eac:	e7f7      	b.n	8006e9e <__swsetup_r+0xba>
 8006eae:	bf00      	nop
 8006eb0:	2000004c 	.word	0x2000004c
 8006eb4:	0800874c 	.word	0x0800874c
 8006eb8:	0800876c 	.word	0x0800876c
 8006ebc:	0800872c 	.word	0x0800872c

08006ec0 <abort>:
 8006ec0:	2006      	movs	r0, #6
 8006ec2:	b508      	push	{r3, lr}
 8006ec4:	f000 fa50 	bl	8007368 <raise>
 8006ec8:	2001      	movs	r0, #1
 8006eca:	f7fb fb7f 	bl	80025cc <_exit>
	...

08006ed0 <__sflush_r>:
 8006ed0:	898a      	ldrh	r2, [r1, #12]
 8006ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	0710      	lsls	r0, r2, #28
 8006ed8:	460c      	mov	r4, r1
 8006eda:	d457      	bmi.n	8006f8c <__sflush_r+0xbc>
 8006edc:	684b      	ldr	r3, [r1, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	dc04      	bgt.n	8006eec <__sflush_r+0x1c>
 8006ee2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	dc01      	bgt.n	8006eec <__sflush_r+0x1c>
 8006ee8:	2000      	movs	r0, #0
 8006eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eee:	2e00      	cmp	r6, #0
 8006ef0:	d0fa      	beq.n	8006ee8 <__sflush_r+0x18>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ef8:	682f      	ldr	r7, [r5, #0]
 8006efa:	602b      	str	r3, [r5, #0]
 8006efc:	d032      	beq.n	8006f64 <__sflush_r+0x94>
 8006efe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	075a      	lsls	r2, r3, #29
 8006f04:	d505      	bpl.n	8006f12 <__sflush_r+0x42>
 8006f06:	6863      	ldr	r3, [r4, #4]
 8006f08:	1ac0      	subs	r0, r0, r3
 8006f0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f0c:	b10b      	cbz	r3, 8006f12 <__sflush_r+0x42>
 8006f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f10:	1ac0      	subs	r0, r0, r3
 8006f12:	2300      	movs	r3, #0
 8006f14:	4602      	mov	r2, r0
 8006f16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f18:	4628      	mov	r0, r5
 8006f1a:	6a21      	ldr	r1, [r4, #32]
 8006f1c:	47b0      	blx	r6
 8006f1e:	1c43      	adds	r3, r0, #1
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	d106      	bne.n	8006f32 <__sflush_r+0x62>
 8006f24:	6829      	ldr	r1, [r5, #0]
 8006f26:	291d      	cmp	r1, #29
 8006f28:	d82c      	bhi.n	8006f84 <__sflush_r+0xb4>
 8006f2a:	4a29      	ldr	r2, [pc, #164]	; (8006fd0 <__sflush_r+0x100>)
 8006f2c:	40ca      	lsrs	r2, r1
 8006f2e:	07d6      	lsls	r6, r2, #31
 8006f30:	d528      	bpl.n	8006f84 <__sflush_r+0xb4>
 8006f32:	2200      	movs	r2, #0
 8006f34:	6062      	str	r2, [r4, #4]
 8006f36:	6922      	ldr	r2, [r4, #16]
 8006f38:	04d9      	lsls	r1, r3, #19
 8006f3a:	6022      	str	r2, [r4, #0]
 8006f3c:	d504      	bpl.n	8006f48 <__sflush_r+0x78>
 8006f3e:	1c42      	adds	r2, r0, #1
 8006f40:	d101      	bne.n	8006f46 <__sflush_r+0x76>
 8006f42:	682b      	ldr	r3, [r5, #0]
 8006f44:	b903      	cbnz	r3, 8006f48 <__sflush_r+0x78>
 8006f46:	6560      	str	r0, [r4, #84]	; 0x54
 8006f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f4a:	602f      	str	r7, [r5, #0]
 8006f4c:	2900      	cmp	r1, #0
 8006f4e:	d0cb      	beq.n	8006ee8 <__sflush_r+0x18>
 8006f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f54:	4299      	cmp	r1, r3
 8006f56:	d002      	beq.n	8006f5e <__sflush_r+0x8e>
 8006f58:	4628      	mov	r0, r5
 8006f5a:	f7ff faad 	bl	80064b8 <_free_r>
 8006f5e:	2000      	movs	r0, #0
 8006f60:	6360      	str	r0, [r4, #52]	; 0x34
 8006f62:	e7c2      	b.n	8006eea <__sflush_r+0x1a>
 8006f64:	6a21      	ldr	r1, [r4, #32]
 8006f66:	2301      	movs	r3, #1
 8006f68:	4628      	mov	r0, r5
 8006f6a:	47b0      	blx	r6
 8006f6c:	1c41      	adds	r1, r0, #1
 8006f6e:	d1c7      	bne.n	8006f00 <__sflush_r+0x30>
 8006f70:	682b      	ldr	r3, [r5, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0c4      	beq.n	8006f00 <__sflush_r+0x30>
 8006f76:	2b1d      	cmp	r3, #29
 8006f78:	d001      	beq.n	8006f7e <__sflush_r+0xae>
 8006f7a:	2b16      	cmp	r3, #22
 8006f7c:	d101      	bne.n	8006f82 <__sflush_r+0xb2>
 8006f7e:	602f      	str	r7, [r5, #0]
 8006f80:	e7b2      	b.n	8006ee8 <__sflush_r+0x18>
 8006f82:	89a3      	ldrh	r3, [r4, #12]
 8006f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f88:	81a3      	strh	r3, [r4, #12]
 8006f8a:	e7ae      	b.n	8006eea <__sflush_r+0x1a>
 8006f8c:	690f      	ldr	r7, [r1, #16]
 8006f8e:	2f00      	cmp	r7, #0
 8006f90:	d0aa      	beq.n	8006ee8 <__sflush_r+0x18>
 8006f92:	0793      	lsls	r3, r2, #30
 8006f94:	bf18      	it	ne
 8006f96:	2300      	movne	r3, #0
 8006f98:	680e      	ldr	r6, [r1, #0]
 8006f9a:	bf08      	it	eq
 8006f9c:	694b      	ldreq	r3, [r1, #20]
 8006f9e:	1bf6      	subs	r6, r6, r7
 8006fa0:	600f      	str	r7, [r1, #0]
 8006fa2:	608b      	str	r3, [r1, #8]
 8006fa4:	2e00      	cmp	r6, #0
 8006fa6:	dd9f      	ble.n	8006ee8 <__sflush_r+0x18>
 8006fa8:	4633      	mov	r3, r6
 8006faa:	463a      	mov	r2, r7
 8006fac:	4628      	mov	r0, r5
 8006fae:	6a21      	ldr	r1, [r4, #32]
 8006fb0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006fb4:	47e0      	blx	ip
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	dc06      	bgt.n	8006fc8 <__sflush_r+0xf8>
 8006fba:	89a3      	ldrh	r3, [r4, #12]
 8006fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc4:	81a3      	strh	r3, [r4, #12]
 8006fc6:	e790      	b.n	8006eea <__sflush_r+0x1a>
 8006fc8:	4407      	add	r7, r0
 8006fca:	1a36      	subs	r6, r6, r0
 8006fcc:	e7ea      	b.n	8006fa4 <__sflush_r+0xd4>
 8006fce:	bf00      	nop
 8006fd0:	20400001 	.word	0x20400001

08006fd4 <_fflush_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	690b      	ldr	r3, [r1, #16]
 8006fd8:	4605      	mov	r5, r0
 8006fda:	460c      	mov	r4, r1
 8006fdc:	b913      	cbnz	r3, 8006fe4 <_fflush_r+0x10>
 8006fde:	2500      	movs	r5, #0
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
 8006fe4:	b118      	cbz	r0, 8006fee <_fflush_r+0x1a>
 8006fe6:	6983      	ldr	r3, [r0, #24]
 8006fe8:	b90b      	cbnz	r3, 8006fee <_fflush_r+0x1a>
 8006fea:	f000 f887 	bl	80070fc <__sinit>
 8006fee:	4b14      	ldr	r3, [pc, #80]	; (8007040 <_fflush_r+0x6c>)
 8006ff0:	429c      	cmp	r4, r3
 8006ff2:	d11b      	bne.n	800702c <_fflush_r+0x58>
 8006ff4:	686c      	ldr	r4, [r5, #4]
 8006ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0ef      	beq.n	8006fde <_fflush_r+0xa>
 8006ffe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007000:	07d0      	lsls	r0, r2, #31
 8007002:	d404      	bmi.n	800700e <_fflush_r+0x3a>
 8007004:	0599      	lsls	r1, r3, #22
 8007006:	d402      	bmi.n	800700e <_fflush_r+0x3a>
 8007008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800700a:	f000 f915 	bl	8007238 <__retarget_lock_acquire_recursive>
 800700e:	4628      	mov	r0, r5
 8007010:	4621      	mov	r1, r4
 8007012:	f7ff ff5d 	bl	8006ed0 <__sflush_r>
 8007016:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007018:	4605      	mov	r5, r0
 800701a:	07da      	lsls	r2, r3, #31
 800701c:	d4e0      	bmi.n	8006fe0 <_fflush_r+0xc>
 800701e:	89a3      	ldrh	r3, [r4, #12]
 8007020:	059b      	lsls	r3, r3, #22
 8007022:	d4dd      	bmi.n	8006fe0 <_fflush_r+0xc>
 8007024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007026:	f000 f908 	bl	800723a <__retarget_lock_release_recursive>
 800702a:	e7d9      	b.n	8006fe0 <_fflush_r+0xc>
 800702c:	4b05      	ldr	r3, [pc, #20]	; (8007044 <_fflush_r+0x70>)
 800702e:	429c      	cmp	r4, r3
 8007030:	d101      	bne.n	8007036 <_fflush_r+0x62>
 8007032:	68ac      	ldr	r4, [r5, #8]
 8007034:	e7df      	b.n	8006ff6 <_fflush_r+0x22>
 8007036:	4b04      	ldr	r3, [pc, #16]	; (8007048 <_fflush_r+0x74>)
 8007038:	429c      	cmp	r4, r3
 800703a:	bf08      	it	eq
 800703c:	68ec      	ldreq	r4, [r5, #12]
 800703e:	e7da      	b.n	8006ff6 <_fflush_r+0x22>
 8007040:	0800874c 	.word	0x0800874c
 8007044:	0800876c 	.word	0x0800876c
 8007048:	0800872c 	.word	0x0800872c

0800704c <std>:
 800704c:	2300      	movs	r3, #0
 800704e:	b510      	push	{r4, lr}
 8007050:	4604      	mov	r4, r0
 8007052:	e9c0 3300 	strd	r3, r3, [r0]
 8007056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800705a:	6083      	str	r3, [r0, #8]
 800705c:	8181      	strh	r1, [r0, #12]
 800705e:	6643      	str	r3, [r0, #100]	; 0x64
 8007060:	81c2      	strh	r2, [r0, #14]
 8007062:	6183      	str	r3, [r0, #24]
 8007064:	4619      	mov	r1, r3
 8007066:	2208      	movs	r2, #8
 8007068:	305c      	adds	r0, #92	; 0x5c
 800706a:	f7fd fb63 	bl	8004734 <memset>
 800706e:	4b05      	ldr	r3, [pc, #20]	; (8007084 <std+0x38>)
 8007070:	6224      	str	r4, [r4, #32]
 8007072:	6263      	str	r3, [r4, #36]	; 0x24
 8007074:	4b04      	ldr	r3, [pc, #16]	; (8007088 <std+0x3c>)
 8007076:	62a3      	str	r3, [r4, #40]	; 0x28
 8007078:	4b04      	ldr	r3, [pc, #16]	; (800708c <std+0x40>)
 800707a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800707c:	4b04      	ldr	r3, [pc, #16]	; (8007090 <std+0x44>)
 800707e:	6323      	str	r3, [r4, #48]	; 0x30
 8007080:	bd10      	pop	{r4, pc}
 8007082:	bf00      	nop
 8007084:	080073a1 	.word	0x080073a1
 8007088:	080073c3 	.word	0x080073c3
 800708c:	080073fb 	.word	0x080073fb
 8007090:	0800741f 	.word	0x0800741f

08007094 <_cleanup_r>:
 8007094:	4901      	ldr	r1, [pc, #4]	; (800709c <_cleanup_r+0x8>)
 8007096:	f000 b8af 	b.w	80071f8 <_fwalk_reent>
 800709a:	bf00      	nop
 800709c:	08006fd5 	.word	0x08006fd5

080070a0 <__sfmoreglue>:
 80070a0:	2268      	movs	r2, #104	; 0x68
 80070a2:	b570      	push	{r4, r5, r6, lr}
 80070a4:	1e4d      	subs	r5, r1, #1
 80070a6:	4355      	muls	r5, r2
 80070a8:	460e      	mov	r6, r1
 80070aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070ae:	f7ff fa6b 	bl	8006588 <_malloc_r>
 80070b2:	4604      	mov	r4, r0
 80070b4:	b140      	cbz	r0, 80070c8 <__sfmoreglue+0x28>
 80070b6:	2100      	movs	r1, #0
 80070b8:	e9c0 1600 	strd	r1, r6, [r0]
 80070bc:	300c      	adds	r0, #12
 80070be:	60a0      	str	r0, [r4, #8]
 80070c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070c4:	f7fd fb36 	bl	8004734 <memset>
 80070c8:	4620      	mov	r0, r4
 80070ca:	bd70      	pop	{r4, r5, r6, pc}

080070cc <__sfp_lock_acquire>:
 80070cc:	4801      	ldr	r0, [pc, #4]	; (80070d4 <__sfp_lock_acquire+0x8>)
 80070ce:	f000 b8b3 	b.w	8007238 <__retarget_lock_acquire_recursive>
 80070d2:	bf00      	nop
 80070d4:	20000351 	.word	0x20000351

080070d8 <__sfp_lock_release>:
 80070d8:	4801      	ldr	r0, [pc, #4]	; (80070e0 <__sfp_lock_release+0x8>)
 80070da:	f000 b8ae 	b.w	800723a <__retarget_lock_release_recursive>
 80070de:	bf00      	nop
 80070e0:	20000351 	.word	0x20000351

080070e4 <__sinit_lock_acquire>:
 80070e4:	4801      	ldr	r0, [pc, #4]	; (80070ec <__sinit_lock_acquire+0x8>)
 80070e6:	f000 b8a7 	b.w	8007238 <__retarget_lock_acquire_recursive>
 80070ea:	bf00      	nop
 80070ec:	20000352 	.word	0x20000352

080070f0 <__sinit_lock_release>:
 80070f0:	4801      	ldr	r0, [pc, #4]	; (80070f8 <__sinit_lock_release+0x8>)
 80070f2:	f000 b8a2 	b.w	800723a <__retarget_lock_release_recursive>
 80070f6:	bf00      	nop
 80070f8:	20000352 	.word	0x20000352

080070fc <__sinit>:
 80070fc:	b510      	push	{r4, lr}
 80070fe:	4604      	mov	r4, r0
 8007100:	f7ff fff0 	bl	80070e4 <__sinit_lock_acquire>
 8007104:	69a3      	ldr	r3, [r4, #24]
 8007106:	b11b      	cbz	r3, 8007110 <__sinit+0x14>
 8007108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800710c:	f7ff bff0 	b.w	80070f0 <__sinit_lock_release>
 8007110:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007114:	6523      	str	r3, [r4, #80]	; 0x50
 8007116:	4b13      	ldr	r3, [pc, #76]	; (8007164 <__sinit+0x68>)
 8007118:	4a13      	ldr	r2, [pc, #76]	; (8007168 <__sinit+0x6c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	62a2      	str	r2, [r4, #40]	; 0x28
 800711e:	42a3      	cmp	r3, r4
 8007120:	bf08      	it	eq
 8007122:	2301      	moveq	r3, #1
 8007124:	4620      	mov	r0, r4
 8007126:	bf08      	it	eq
 8007128:	61a3      	streq	r3, [r4, #24]
 800712a:	f000 f81f 	bl	800716c <__sfp>
 800712e:	6060      	str	r0, [r4, #4]
 8007130:	4620      	mov	r0, r4
 8007132:	f000 f81b 	bl	800716c <__sfp>
 8007136:	60a0      	str	r0, [r4, #8]
 8007138:	4620      	mov	r0, r4
 800713a:	f000 f817 	bl	800716c <__sfp>
 800713e:	2200      	movs	r2, #0
 8007140:	2104      	movs	r1, #4
 8007142:	60e0      	str	r0, [r4, #12]
 8007144:	6860      	ldr	r0, [r4, #4]
 8007146:	f7ff ff81 	bl	800704c <std>
 800714a:	2201      	movs	r2, #1
 800714c:	2109      	movs	r1, #9
 800714e:	68a0      	ldr	r0, [r4, #8]
 8007150:	f7ff ff7c 	bl	800704c <std>
 8007154:	2202      	movs	r2, #2
 8007156:	2112      	movs	r1, #18
 8007158:	68e0      	ldr	r0, [r4, #12]
 800715a:	f7ff ff77 	bl	800704c <std>
 800715e:	2301      	movs	r3, #1
 8007160:	61a3      	str	r3, [r4, #24]
 8007162:	e7d1      	b.n	8007108 <__sinit+0xc>
 8007164:	080083b4 	.word	0x080083b4
 8007168:	08007095 	.word	0x08007095

0800716c <__sfp>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	4607      	mov	r7, r0
 8007170:	f7ff ffac 	bl	80070cc <__sfp_lock_acquire>
 8007174:	4b1e      	ldr	r3, [pc, #120]	; (80071f0 <__sfp+0x84>)
 8007176:	681e      	ldr	r6, [r3, #0]
 8007178:	69b3      	ldr	r3, [r6, #24]
 800717a:	b913      	cbnz	r3, 8007182 <__sfp+0x16>
 800717c:	4630      	mov	r0, r6
 800717e:	f7ff ffbd 	bl	80070fc <__sinit>
 8007182:	3648      	adds	r6, #72	; 0x48
 8007184:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007188:	3b01      	subs	r3, #1
 800718a:	d503      	bpl.n	8007194 <__sfp+0x28>
 800718c:	6833      	ldr	r3, [r6, #0]
 800718e:	b30b      	cbz	r3, 80071d4 <__sfp+0x68>
 8007190:	6836      	ldr	r6, [r6, #0]
 8007192:	e7f7      	b.n	8007184 <__sfp+0x18>
 8007194:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007198:	b9d5      	cbnz	r5, 80071d0 <__sfp+0x64>
 800719a:	4b16      	ldr	r3, [pc, #88]	; (80071f4 <__sfp+0x88>)
 800719c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071a0:	60e3      	str	r3, [r4, #12]
 80071a2:	6665      	str	r5, [r4, #100]	; 0x64
 80071a4:	f000 f847 	bl	8007236 <__retarget_lock_init_recursive>
 80071a8:	f7ff ff96 	bl	80070d8 <__sfp_lock_release>
 80071ac:	2208      	movs	r2, #8
 80071ae:	4629      	mov	r1, r5
 80071b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80071b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80071b8:	6025      	str	r5, [r4, #0]
 80071ba:	61a5      	str	r5, [r4, #24]
 80071bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071c0:	f7fd fab8 	bl	8004734 <memset>
 80071c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071cc:	4620      	mov	r0, r4
 80071ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071d0:	3468      	adds	r4, #104	; 0x68
 80071d2:	e7d9      	b.n	8007188 <__sfp+0x1c>
 80071d4:	2104      	movs	r1, #4
 80071d6:	4638      	mov	r0, r7
 80071d8:	f7ff ff62 	bl	80070a0 <__sfmoreglue>
 80071dc:	4604      	mov	r4, r0
 80071de:	6030      	str	r0, [r6, #0]
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d1d5      	bne.n	8007190 <__sfp+0x24>
 80071e4:	f7ff ff78 	bl	80070d8 <__sfp_lock_release>
 80071e8:	230c      	movs	r3, #12
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	e7ee      	b.n	80071cc <__sfp+0x60>
 80071ee:	bf00      	nop
 80071f0:	080083b4 	.word	0x080083b4
 80071f4:	ffff0001 	.word	0xffff0001

080071f8 <_fwalk_reent>:
 80071f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071fc:	4606      	mov	r6, r0
 80071fe:	4688      	mov	r8, r1
 8007200:	2700      	movs	r7, #0
 8007202:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007206:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800720a:	f1b9 0901 	subs.w	r9, r9, #1
 800720e:	d505      	bpl.n	800721c <_fwalk_reent+0x24>
 8007210:	6824      	ldr	r4, [r4, #0]
 8007212:	2c00      	cmp	r4, #0
 8007214:	d1f7      	bne.n	8007206 <_fwalk_reent+0xe>
 8007216:	4638      	mov	r0, r7
 8007218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800721c:	89ab      	ldrh	r3, [r5, #12]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d907      	bls.n	8007232 <_fwalk_reent+0x3a>
 8007222:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007226:	3301      	adds	r3, #1
 8007228:	d003      	beq.n	8007232 <_fwalk_reent+0x3a>
 800722a:	4629      	mov	r1, r5
 800722c:	4630      	mov	r0, r6
 800722e:	47c0      	blx	r8
 8007230:	4307      	orrs	r7, r0
 8007232:	3568      	adds	r5, #104	; 0x68
 8007234:	e7e9      	b.n	800720a <_fwalk_reent+0x12>

08007236 <__retarget_lock_init_recursive>:
 8007236:	4770      	bx	lr

08007238 <__retarget_lock_acquire_recursive>:
 8007238:	4770      	bx	lr

0800723a <__retarget_lock_release_recursive>:
 800723a:	4770      	bx	lr

0800723c <__swhatbuf_r>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	460e      	mov	r6, r1
 8007240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007244:	4614      	mov	r4, r2
 8007246:	2900      	cmp	r1, #0
 8007248:	461d      	mov	r5, r3
 800724a:	b096      	sub	sp, #88	; 0x58
 800724c:	da08      	bge.n	8007260 <__swhatbuf_r+0x24>
 800724e:	2200      	movs	r2, #0
 8007250:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007254:	602a      	str	r2, [r5, #0]
 8007256:	061a      	lsls	r2, r3, #24
 8007258:	d410      	bmi.n	800727c <__swhatbuf_r+0x40>
 800725a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800725e:	e00e      	b.n	800727e <__swhatbuf_r+0x42>
 8007260:	466a      	mov	r2, sp
 8007262:	f000 f903 	bl	800746c <_fstat_r>
 8007266:	2800      	cmp	r0, #0
 8007268:	dbf1      	blt.n	800724e <__swhatbuf_r+0x12>
 800726a:	9a01      	ldr	r2, [sp, #4]
 800726c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007270:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007274:	425a      	negs	r2, r3
 8007276:	415a      	adcs	r2, r3
 8007278:	602a      	str	r2, [r5, #0]
 800727a:	e7ee      	b.n	800725a <__swhatbuf_r+0x1e>
 800727c:	2340      	movs	r3, #64	; 0x40
 800727e:	2000      	movs	r0, #0
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	b016      	add	sp, #88	; 0x58
 8007284:	bd70      	pop	{r4, r5, r6, pc}
	...

08007288 <__smakebuf_r>:
 8007288:	898b      	ldrh	r3, [r1, #12]
 800728a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800728c:	079d      	lsls	r5, r3, #30
 800728e:	4606      	mov	r6, r0
 8007290:	460c      	mov	r4, r1
 8007292:	d507      	bpl.n	80072a4 <__smakebuf_r+0x1c>
 8007294:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	6123      	str	r3, [r4, #16]
 800729c:	2301      	movs	r3, #1
 800729e:	6163      	str	r3, [r4, #20]
 80072a0:	b002      	add	sp, #8
 80072a2:	bd70      	pop	{r4, r5, r6, pc}
 80072a4:	466a      	mov	r2, sp
 80072a6:	ab01      	add	r3, sp, #4
 80072a8:	f7ff ffc8 	bl	800723c <__swhatbuf_r>
 80072ac:	9900      	ldr	r1, [sp, #0]
 80072ae:	4605      	mov	r5, r0
 80072b0:	4630      	mov	r0, r6
 80072b2:	f7ff f969 	bl	8006588 <_malloc_r>
 80072b6:	b948      	cbnz	r0, 80072cc <__smakebuf_r+0x44>
 80072b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072bc:	059a      	lsls	r2, r3, #22
 80072be:	d4ef      	bmi.n	80072a0 <__smakebuf_r+0x18>
 80072c0:	f023 0303 	bic.w	r3, r3, #3
 80072c4:	f043 0302 	orr.w	r3, r3, #2
 80072c8:	81a3      	strh	r3, [r4, #12]
 80072ca:	e7e3      	b.n	8007294 <__smakebuf_r+0xc>
 80072cc:	4b0d      	ldr	r3, [pc, #52]	; (8007304 <__smakebuf_r+0x7c>)
 80072ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80072d0:	89a3      	ldrh	r3, [r4, #12]
 80072d2:	6020      	str	r0, [r4, #0]
 80072d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d8:	81a3      	strh	r3, [r4, #12]
 80072da:	9b00      	ldr	r3, [sp, #0]
 80072dc:	6120      	str	r0, [r4, #16]
 80072de:	6163      	str	r3, [r4, #20]
 80072e0:	9b01      	ldr	r3, [sp, #4]
 80072e2:	b15b      	cbz	r3, 80072fc <__smakebuf_r+0x74>
 80072e4:	4630      	mov	r0, r6
 80072e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072ea:	f000 f8d1 	bl	8007490 <_isatty_r>
 80072ee:	b128      	cbz	r0, 80072fc <__smakebuf_r+0x74>
 80072f0:	89a3      	ldrh	r3, [r4, #12]
 80072f2:	f023 0303 	bic.w	r3, r3, #3
 80072f6:	f043 0301 	orr.w	r3, r3, #1
 80072fa:	81a3      	strh	r3, [r4, #12]
 80072fc:	89a0      	ldrh	r0, [r4, #12]
 80072fe:	4305      	orrs	r5, r0
 8007300:	81a5      	strh	r5, [r4, #12]
 8007302:	e7cd      	b.n	80072a0 <__smakebuf_r+0x18>
 8007304:	08007095 	.word	0x08007095

08007308 <_malloc_usable_size_r>:
 8007308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800730c:	1f18      	subs	r0, r3, #4
 800730e:	2b00      	cmp	r3, #0
 8007310:	bfbc      	itt	lt
 8007312:	580b      	ldrlt	r3, [r1, r0]
 8007314:	18c0      	addlt	r0, r0, r3
 8007316:	4770      	bx	lr

08007318 <_raise_r>:
 8007318:	291f      	cmp	r1, #31
 800731a:	b538      	push	{r3, r4, r5, lr}
 800731c:	4604      	mov	r4, r0
 800731e:	460d      	mov	r5, r1
 8007320:	d904      	bls.n	800732c <_raise_r+0x14>
 8007322:	2316      	movs	r3, #22
 8007324:	6003      	str	r3, [r0, #0]
 8007326:	f04f 30ff 	mov.w	r0, #4294967295
 800732a:	bd38      	pop	{r3, r4, r5, pc}
 800732c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800732e:	b112      	cbz	r2, 8007336 <_raise_r+0x1e>
 8007330:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007334:	b94b      	cbnz	r3, 800734a <_raise_r+0x32>
 8007336:	4620      	mov	r0, r4
 8007338:	f000 f830 	bl	800739c <_getpid_r>
 800733c:	462a      	mov	r2, r5
 800733e:	4601      	mov	r1, r0
 8007340:	4620      	mov	r0, r4
 8007342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007346:	f000 b817 	b.w	8007378 <_kill_r>
 800734a:	2b01      	cmp	r3, #1
 800734c:	d00a      	beq.n	8007364 <_raise_r+0x4c>
 800734e:	1c59      	adds	r1, r3, #1
 8007350:	d103      	bne.n	800735a <_raise_r+0x42>
 8007352:	2316      	movs	r3, #22
 8007354:	6003      	str	r3, [r0, #0]
 8007356:	2001      	movs	r0, #1
 8007358:	e7e7      	b.n	800732a <_raise_r+0x12>
 800735a:	2400      	movs	r4, #0
 800735c:	4628      	mov	r0, r5
 800735e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007362:	4798      	blx	r3
 8007364:	2000      	movs	r0, #0
 8007366:	e7e0      	b.n	800732a <_raise_r+0x12>

08007368 <raise>:
 8007368:	4b02      	ldr	r3, [pc, #8]	; (8007374 <raise+0xc>)
 800736a:	4601      	mov	r1, r0
 800736c:	6818      	ldr	r0, [r3, #0]
 800736e:	f7ff bfd3 	b.w	8007318 <_raise_r>
 8007372:	bf00      	nop
 8007374:	2000004c 	.word	0x2000004c

08007378 <_kill_r>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	2300      	movs	r3, #0
 800737c:	4d06      	ldr	r5, [pc, #24]	; (8007398 <_kill_r+0x20>)
 800737e:	4604      	mov	r4, r0
 8007380:	4608      	mov	r0, r1
 8007382:	4611      	mov	r1, r2
 8007384:	602b      	str	r3, [r5, #0]
 8007386:	f7fb f911 	bl	80025ac <_kill>
 800738a:	1c43      	adds	r3, r0, #1
 800738c:	d102      	bne.n	8007394 <_kill_r+0x1c>
 800738e:	682b      	ldr	r3, [r5, #0]
 8007390:	b103      	cbz	r3, 8007394 <_kill_r+0x1c>
 8007392:	6023      	str	r3, [r4, #0]
 8007394:	bd38      	pop	{r3, r4, r5, pc}
 8007396:	bf00      	nop
 8007398:	2000034c 	.word	0x2000034c

0800739c <_getpid_r>:
 800739c:	f7fb b8ff 	b.w	800259e <_getpid>

080073a0 <__sread>:
 80073a0:	b510      	push	{r4, lr}
 80073a2:	460c      	mov	r4, r1
 80073a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a8:	f000 f894 	bl	80074d4 <_read_r>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	bfab      	itete	ge
 80073b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073b2:	89a3      	ldrhlt	r3, [r4, #12]
 80073b4:	181b      	addge	r3, r3, r0
 80073b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073ba:	bfac      	ite	ge
 80073bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80073be:	81a3      	strhlt	r3, [r4, #12]
 80073c0:	bd10      	pop	{r4, pc}

080073c2 <__swrite>:
 80073c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c6:	461f      	mov	r7, r3
 80073c8:	898b      	ldrh	r3, [r1, #12]
 80073ca:	4605      	mov	r5, r0
 80073cc:	05db      	lsls	r3, r3, #23
 80073ce:	460c      	mov	r4, r1
 80073d0:	4616      	mov	r6, r2
 80073d2:	d505      	bpl.n	80073e0 <__swrite+0x1e>
 80073d4:	2302      	movs	r3, #2
 80073d6:	2200      	movs	r2, #0
 80073d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073dc:	f000 f868 	bl	80074b0 <_lseek_r>
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	4632      	mov	r2, r6
 80073e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073e8:	81a3      	strh	r3, [r4, #12]
 80073ea:	4628      	mov	r0, r5
 80073ec:	463b      	mov	r3, r7
 80073ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073f6:	f000 b817 	b.w	8007428 <_write_r>

080073fa <__sseek>:
 80073fa:	b510      	push	{r4, lr}
 80073fc:	460c      	mov	r4, r1
 80073fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007402:	f000 f855 	bl	80074b0 <_lseek_r>
 8007406:	1c43      	adds	r3, r0, #1
 8007408:	89a3      	ldrh	r3, [r4, #12]
 800740a:	bf15      	itete	ne
 800740c:	6560      	strne	r0, [r4, #84]	; 0x54
 800740e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007416:	81a3      	strheq	r3, [r4, #12]
 8007418:	bf18      	it	ne
 800741a:	81a3      	strhne	r3, [r4, #12]
 800741c:	bd10      	pop	{r4, pc}

0800741e <__sclose>:
 800741e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007422:	f000 b813 	b.w	800744c <_close_r>
	...

08007428 <_write_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4604      	mov	r4, r0
 800742c:	4608      	mov	r0, r1
 800742e:	4611      	mov	r1, r2
 8007430:	2200      	movs	r2, #0
 8007432:	4d05      	ldr	r5, [pc, #20]	; (8007448 <_write_r+0x20>)
 8007434:	602a      	str	r2, [r5, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	f7fb f8ef 	bl	800261a <_write>
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d102      	bne.n	8007446 <_write_r+0x1e>
 8007440:	682b      	ldr	r3, [r5, #0]
 8007442:	b103      	cbz	r3, 8007446 <_write_r+0x1e>
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	2000034c 	.word	0x2000034c

0800744c <_close_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	2300      	movs	r3, #0
 8007450:	4d05      	ldr	r5, [pc, #20]	; (8007468 <_close_r+0x1c>)
 8007452:	4604      	mov	r4, r0
 8007454:	4608      	mov	r0, r1
 8007456:	602b      	str	r3, [r5, #0]
 8007458:	f7fb f8fb 	bl	8002652 <_close>
 800745c:	1c43      	adds	r3, r0, #1
 800745e:	d102      	bne.n	8007466 <_close_r+0x1a>
 8007460:	682b      	ldr	r3, [r5, #0]
 8007462:	b103      	cbz	r3, 8007466 <_close_r+0x1a>
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	bd38      	pop	{r3, r4, r5, pc}
 8007468:	2000034c 	.word	0x2000034c

0800746c <_fstat_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	2300      	movs	r3, #0
 8007470:	4d06      	ldr	r5, [pc, #24]	; (800748c <_fstat_r+0x20>)
 8007472:	4604      	mov	r4, r0
 8007474:	4608      	mov	r0, r1
 8007476:	4611      	mov	r1, r2
 8007478:	602b      	str	r3, [r5, #0]
 800747a:	f7fb f8f5 	bl	8002668 <_fstat>
 800747e:	1c43      	adds	r3, r0, #1
 8007480:	d102      	bne.n	8007488 <_fstat_r+0x1c>
 8007482:	682b      	ldr	r3, [r5, #0]
 8007484:	b103      	cbz	r3, 8007488 <_fstat_r+0x1c>
 8007486:	6023      	str	r3, [r4, #0]
 8007488:	bd38      	pop	{r3, r4, r5, pc}
 800748a:	bf00      	nop
 800748c:	2000034c 	.word	0x2000034c

08007490 <_isatty_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	2300      	movs	r3, #0
 8007494:	4d05      	ldr	r5, [pc, #20]	; (80074ac <_isatty_r+0x1c>)
 8007496:	4604      	mov	r4, r0
 8007498:	4608      	mov	r0, r1
 800749a:	602b      	str	r3, [r5, #0]
 800749c:	f7fb f8f3 	bl	8002686 <_isatty>
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	d102      	bne.n	80074aa <_isatty_r+0x1a>
 80074a4:	682b      	ldr	r3, [r5, #0]
 80074a6:	b103      	cbz	r3, 80074aa <_isatty_r+0x1a>
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
 80074ac:	2000034c 	.word	0x2000034c

080074b0 <_lseek_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4604      	mov	r4, r0
 80074b4:	4608      	mov	r0, r1
 80074b6:	4611      	mov	r1, r2
 80074b8:	2200      	movs	r2, #0
 80074ba:	4d05      	ldr	r5, [pc, #20]	; (80074d0 <_lseek_r+0x20>)
 80074bc:	602a      	str	r2, [r5, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	f7fb f8eb 	bl	800269a <_lseek>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_lseek_r+0x1e>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_lseek_r+0x1e>
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	2000034c 	.word	0x2000034c

080074d4 <_read_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	4604      	mov	r4, r0
 80074d8:	4608      	mov	r0, r1
 80074da:	4611      	mov	r1, r2
 80074dc:	2200      	movs	r2, #0
 80074de:	4d05      	ldr	r5, [pc, #20]	; (80074f4 <_read_r+0x20>)
 80074e0:	602a      	str	r2, [r5, #0]
 80074e2:	461a      	mov	r2, r3
 80074e4:	f7fb f87c 	bl	80025e0 <_read>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_read_r+0x1e>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_read_r+0x1e>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	2000034c 	.word	0x2000034c

080074f8 <pow>:
 80074f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074fc:	4614      	mov	r4, r2
 80074fe:	461d      	mov	r5, r3
 8007500:	4680      	mov	r8, r0
 8007502:	4689      	mov	r9, r1
 8007504:	f000 f884 	bl	8007610 <__ieee754_pow>
 8007508:	4622      	mov	r2, r4
 800750a:	4606      	mov	r6, r0
 800750c:	460f      	mov	r7, r1
 800750e:	462b      	mov	r3, r5
 8007510:	4620      	mov	r0, r4
 8007512:	4629      	mov	r1, r5
 8007514:	f7f9 fa7a 	bl	8000a0c <__aeabi_dcmpun>
 8007518:	bbc8      	cbnz	r0, 800758e <pow+0x96>
 800751a:	2200      	movs	r2, #0
 800751c:	2300      	movs	r3, #0
 800751e:	4640      	mov	r0, r8
 8007520:	4649      	mov	r1, r9
 8007522:	f7f9 fa41 	bl	80009a8 <__aeabi_dcmpeq>
 8007526:	b1b8      	cbz	r0, 8007558 <pow+0x60>
 8007528:	2200      	movs	r2, #0
 800752a:	2300      	movs	r3, #0
 800752c:	4620      	mov	r0, r4
 800752e:	4629      	mov	r1, r5
 8007530:	f7f9 fa3a 	bl	80009a8 <__aeabi_dcmpeq>
 8007534:	2800      	cmp	r0, #0
 8007536:	d141      	bne.n	80075bc <pow+0xc4>
 8007538:	4620      	mov	r0, r4
 800753a:	4629      	mov	r1, r5
 800753c:	f000 fe5d 	bl	80081fa <finite>
 8007540:	b328      	cbz	r0, 800758e <pow+0x96>
 8007542:	2200      	movs	r2, #0
 8007544:	2300      	movs	r3, #0
 8007546:	4620      	mov	r0, r4
 8007548:	4629      	mov	r1, r5
 800754a:	f7f9 fa37 	bl	80009bc <__aeabi_dcmplt>
 800754e:	b1f0      	cbz	r0, 800758e <pow+0x96>
 8007550:	f7fd f8c6 	bl	80046e0 <__errno>
 8007554:	2322      	movs	r3, #34	; 0x22
 8007556:	e019      	b.n	800758c <pow+0x94>
 8007558:	4630      	mov	r0, r6
 800755a:	4639      	mov	r1, r7
 800755c:	f000 fe4d 	bl	80081fa <finite>
 8007560:	b9c8      	cbnz	r0, 8007596 <pow+0x9e>
 8007562:	4640      	mov	r0, r8
 8007564:	4649      	mov	r1, r9
 8007566:	f000 fe48 	bl	80081fa <finite>
 800756a:	b1a0      	cbz	r0, 8007596 <pow+0x9e>
 800756c:	4620      	mov	r0, r4
 800756e:	4629      	mov	r1, r5
 8007570:	f000 fe43 	bl	80081fa <finite>
 8007574:	b178      	cbz	r0, 8007596 <pow+0x9e>
 8007576:	4632      	mov	r2, r6
 8007578:	463b      	mov	r3, r7
 800757a:	4630      	mov	r0, r6
 800757c:	4639      	mov	r1, r7
 800757e:	f7f9 fa45 	bl	8000a0c <__aeabi_dcmpun>
 8007582:	2800      	cmp	r0, #0
 8007584:	d0e4      	beq.n	8007550 <pow+0x58>
 8007586:	f7fd f8ab 	bl	80046e0 <__errno>
 800758a:	2321      	movs	r3, #33	; 0x21
 800758c:	6003      	str	r3, [r0, #0]
 800758e:	4630      	mov	r0, r6
 8007590:	4639      	mov	r1, r7
 8007592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007596:	2200      	movs	r2, #0
 8007598:	2300      	movs	r3, #0
 800759a:	4630      	mov	r0, r6
 800759c:	4639      	mov	r1, r7
 800759e:	f7f9 fa03 	bl	80009a8 <__aeabi_dcmpeq>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d0f3      	beq.n	800758e <pow+0x96>
 80075a6:	4640      	mov	r0, r8
 80075a8:	4649      	mov	r1, r9
 80075aa:	f000 fe26 	bl	80081fa <finite>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d0ed      	beq.n	800758e <pow+0x96>
 80075b2:	4620      	mov	r0, r4
 80075b4:	4629      	mov	r1, r5
 80075b6:	f000 fe20 	bl	80081fa <finite>
 80075ba:	e7c8      	b.n	800754e <pow+0x56>
 80075bc:	2600      	movs	r6, #0
 80075be:	4f01      	ldr	r7, [pc, #4]	; (80075c4 <pow+0xcc>)
 80075c0:	e7e5      	b.n	800758e <pow+0x96>
 80075c2:	bf00      	nop
 80075c4:	3ff00000 	.word	0x3ff00000

080075c8 <sqrt>:
 80075c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ca:	4606      	mov	r6, r0
 80075cc:	460f      	mov	r7, r1
 80075ce:	f000 fd35 	bl	800803c <__ieee754_sqrt>
 80075d2:	4632      	mov	r2, r6
 80075d4:	4604      	mov	r4, r0
 80075d6:	460d      	mov	r5, r1
 80075d8:	463b      	mov	r3, r7
 80075da:	4630      	mov	r0, r6
 80075dc:	4639      	mov	r1, r7
 80075de:	f7f9 fa15 	bl	8000a0c <__aeabi_dcmpun>
 80075e2:	b990      	cbnz	r0, 800760a <sqrt+0x42>
 80075e4:	2200      	movs	r2, #0
 80075e6:	2300      	movs	r3, #0
 80075e8:	4630      	mov	r0, r6
 80075ea:	4639      	mov	r1, r7
 80075ec:	f7f9 f9e6 	bl	80009bc <__aeabi_dcmplt>
 80075f0:	b158      	cbz	r0, 800760a <sqrt+0x42>
 80075f2:	f7fd f875 	bl	80046e0 <__errno>
 80075f6:	2321      	movs	r3, #33	; 0x21
 80075f8:	2200      	movs	r2, #0
 80075fa:	6003      	str	r3, [r0, #0]
 80075fc:	2300      	movs	r3, #0
 80075fe:	4610      	mov	r0, r2
 8007600:	4619      	mov	r1, r3
 8007602:	f7f9 f893 	bl	800072c <__aeabi_ddiv>
 8007606:	4604      	mov	r4, r0
 8007608:	460d      	mov	r5, r1
 800760a:	4620      	mov	r0, r4
 800760c:	4629      	mov	r1, r5
 800760e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007610 <__ieee754_pow>:
 8007610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	b093      	sub	sp, #76	; 0x4c
 8007616:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800761a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800761e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8007622:	4689      	mov	r9, r1
 8007624:	ea56 0102 	orrs.w	r1, r6, r2
 8007628:	4680      	mov	r8, r0
 800762a:	d111      	bne.n	8007650 <__ieee754_pow+0x40>
 800762c:	1803      	adds	r3, r0, r0
 800762e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8007632:	4152      	adcs	r2, r2
 8007634:	4299      	cmp	r1, r3
 8007636:	4b82      	ldr	r3, [pc, #520]	; (8007840 <__ieee754_pow+0x230>)
 8007638:	4193      	sbcs	r3, r2
 800763a:	f080 84b9 	bcs.w	8007fb0 <__ieee754_pow+0x9a0>
 800763e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007642:	4640      	mov	r0, r8
 8007644:	4649      	mov	r1, r9
 8007646:	f7f8 fd91 	bl	800016c <__adddf3>
 800764a:	4683      	mov	fp, r0
 800764c:	468c      	mov	ip, r1
 800764e:	e06f      	b.n	8007730 <__ieee754_pow+0x120>
 8007650:	4b7c      	ldr	r3, [pc, #496]	; (8007844 <__ieee754_pow+0x234>)
 8007652:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8007656:	429c      	cmp	r4, r3
 8007658:	464d      	mov	r5, r9
 800765a:	4682      	mov	sl, r0
 800765c:	dc06      	bgt.n	800766c <__ieee754_pow+0x5c>
 800765e:	d101      	bne.n	8007664 <__ieee754_pow+0x54>
 8007660:	2800      	cmp	r0, #0
 8007662:	d1ec      	bne.n	800763e <__ieee754_pow+0x2e>
 8007664:	429e      	cmp	r6, r3
 8007666:	dc01      	bgt.n	800766c <__ieee754_pow+0x5c>
 8007668:	d10f      	bne.n	800768a <__ieee754_pow+0x7a>
 800766a:	b172      	cbz	r2, 800768a <__ieee754_pow+0x7a>
 800766c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007670:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007674:	ea55 050a 	orrs.w	r5, r5, sl
 8007678:	d1e1      	bne.n	800763e <__ieee754_pow+0x2e>
 800767a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800767e:	18db      	adds	r3, r3, r3
 8007680:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007684:	4152      	adcs	r2, r2
 8007686:	429d      	cmp	r5, r3
 8007688:	e7d5      	b.n	8007636 <__ieee754_pow+0x26>
 800768a:	2d00      	cmp	r5, #0
 800768c:	da39      	bge.n	8007702 <__ieee754_pow+0xf2>
 800768e:	4b6e      	ldr	r3, [pc, #440]	; (8007848 <__ieee754_pow+0x238>)
 8007690:	429e      	cmp	r6, r3
 8007692:	dc52      	bgt.n	800773a <__ieee754_pow+0x12a>
 8007694:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007698:	429e      	cmp	r6, r3
 800769a:	f340 849c 	ble.w	8007fd6 <__ieee754_pow+0x9c6>
 800769e:	1533      	asrs	r3, r6, #20
 80076a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80076a4:	2b14      	cmp	r3, #20
 80076a6:	dd0f      	ble.n	80076c8 <__ieee754_pow+0xb8>
 80076a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80076ac:	fa22 f103 	lsr.w	r1, r2, r3
 80076b0:	fa01 f303 	lsl.w	r3, r1, r3
 80076b4:	4293      	cmp	r3, r2
 80076b6:	f040 848e 	bne.w	8007fd6 <__ieee754_pow+0x9c6>
 80076ba:	f001 0101 	and.w	r1, r1, #1
 80076be:	f1c1 0302 	rsb	r3, r1, #2
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	b182      	cbz	r2, 80076e8 <__ieee754_pow+0xd8>
 80076c6:	e05d      	b.n	8007784 <__ieee754_pow+0x174>
 80076c8:	2a00      	cmp	r2, #0
 80076ca:	d159      	bne.n	8007780 <__ieee754_pow+0x170>
 80076cc:	f1c3 0314 	rsb	r3, r3, #20
 80076d0:	fa46 f103 	asr.w	r1, r6, r3
 80076d4:	fa01 f303 	lsl.w	r3, r1, r3
 80076d8:	42b3      	cmp	r3, r6
 80076da:	f040 8479 	bne.w	8007fd0 <__ieee754_pow+0x9c0>
 80076de:	f001 0101 	and.w	r1, r1, #1
 80076e2:	f1c1 0302 	rsb	r3, r1, #2
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	4b58      	ldr	r3, [pc, #352]	; (800784c <__ieee754_pow+0x23c>)
 80076ea:	429e      	cmp	r6, r3
 80076ec:	d132      	bne.n	8007754 <__ieee754_pow+0x144>
 80076ee:	2f00      	cmp	r7, #0
 80076f0:	f280 846a 	bge.w	8007fc8 <__ieee754_pow+0x9b8>
 80076f4:	4642      	mov	r2, r8
 80076f6:	464b      	mov	r3, r9
 80076f8:	2000      	movs	r0, #0
 80076fa:	4954      	ldr	r1, [pc, #336]	; (800784c <__ieee754_pow+0x23c>)
 80076fc:	f7f9 f816 	bl	800072c <__aeabi_ddiv>
 8007700:	e7a3      	b.n	800764a <__ieee754_pow+0x3a>
 8007702:	2300      	movs	r3, #0
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	2a00      	cmp	r2, #0
 8007708:	d13c      	bne.n	8007784 <__ieee754_pow+0x174>
 800770a:	4b4e      	ldr	r3, [pc, #312]	; (8007844 <__ieee754_pow+0x234>)
 800770c:	429e      	cmp	r6, r3
 800770e:	d1eb      	bne.n	80076e8 <__ieee754_pow+0xd8>
 8007710:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007714:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007718:	ea53 030a 	orrs.w	r3, r3, sl
 800771c:	f000 8448 	beq.w	8007fb0 <__ieee754_pow+0x9a0>
 8007720:	4b4b      	ldr	r3, [pc, #300]	; (8007850 <__ieee754_pow+0x240>)
 8007722:	429c      	cmp	r4, r3
 8007724:	dd0b      	ble.n	800773e <__ieee754_pow+0x12e>
 8007726:	2f00      	cmp	r7, #0
 8007728:	f2c0 8448 	blt.w	8007fbc <__ieee754_pow+0x9ac>
 800772c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007730:	4658      	mov	r0, fp
 8007732:	4661      	mov	r1, ip
 8007734:	b013      	add	sp, #76	; 0x4c
 8007736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773a:	2302      	movs	r3, #2
 800773c:	e7e2      	b.n	8007704 <__ieee754_pow+0xf4>
 800773e:	2f00      	cmp	r7, #0
 8007740:	f04f 0b00 	mov.w	fp, #0
 8007744:	f04f 0c00 	mov.w	ip, #0
 8007748:	daf2      	bge.n	8007730 <__ieee754_pow+0x120>
 800774a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800774e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007752:	e7ed      	b.n	8007730 <__ieee754_pow+0x120>
 8007754:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007758:	d106      	bne.n	8007768 <__ieee754_pow+0x158>
 800775a:	4642      	mov	r2, r8
 800775c:	464b      	mov	r3, r9
 800775e:	4640      	mov	r0, r8
 8007760:	4649      	mov	r1, r9
 8007762:	f7f8 feb9 	bl	80004d8 <__aeabi_dmul>
 8007766:	e770      	b.n	800764a <__ieee754_pow+0x3a>
 8007768:	4b3a      	ldr	r3, [pc, #232]	; (8007854 <__ieee754_pow+0x244>)
 800776a:	429f      	cmp	r7, r3
 800776c:	d10a      	bne.n	8007784 <__ieee754_pow+0x174>
 800776e:	2d00      	cmp	r5, #0
 8007770:	db08      	blt.n	8007784 <__ieee754_pow+0x174>
 8007772:	4640      	mov	r0, r8
 8007774:	4649      	mov	r1, r9
 8007776:	b013      	add	sp, #76	; 0x4c
 8007778:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	f000 bc5e 	b.w	800803c <__ieee754_sqrt>
 8007780:	2300      	movs	r3, #0
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	4640      	mov	r0, r8
 8007786:	4649      	mov	r1, r9
 8007788:	f000 fd34 	bl	80081f4 <fabs>
 800778c:	4683      	mov	fp, r0
 800778e:	468c      	mov	ip, r1
 8007790:	f1ba 0f00 	cmp.w	sl, #0
 8007794:	d128      	bne.n	80077e8 <__ieee754_pow+0x1d8>
 8007796:	b124      	cbz	r4, 80077a2 <__ieee754_pow+0x192>
 8007798:	4b2c      	ldr	r3, [pc, #176]	; (800784c <__ieee754_pow+0x23c>)
 800779a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800779e:	429a      	cmp	r2, r3
 80077a0:	d122      	bne.n	80077e8 <__ieee754_pow+0x1d8>
 80077a2:	2f00      	cmp	r7, #0
 80077a4:	da07      	bge.n	80077b6 <__ieee754_pow+0x1a6>
 80077a6:	465a      	mov	r2, fp
 80077a8:	4663      	mov	r3, ip
 80077aa:	2000      	movs	r0, #0
 80077ac:	4927      	ldr	r1, [pc, #156]	; (800784c <__ieee754_pow+0x23c>)
 80077ae:	f7f8 ffbd 	bl	800072c <__aeabi_ddiv>
 80077b2:	4683      	mov	fp, r0
 80077b4:	468c      	mov	ip, r1
 80077b6:	2d00      	cmp	r5, #0
 80077b8:	daba      	bge.n	8007730 <__ieee754_pow+0x120>
 80077ba:	9b00      	ldr	r3, [sp, #0]
 80077bc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80077c0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80077c4:	4323      	orrs	r3, r4
 80077c6:	d108      	bne.n	80077da <__ieee754_pow+0x1ca>
 80077c8:	465a      	mov	r2, fp
 80077ca:	4663      	mov	r3, ip
 80077cc:	4658      	mov	r0, fp
 80077ce:	4661      	mov	r1, ip
 80077d0:	f7f8 fcca 	bl	8000168 <__aeabi_dsub>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	e790      	b.n	80076fc <__ieee754_pow+0xec>
 80077da:	9b00      	ldr	r3, [sp, #0]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d1a7      	bne.n	8007730 <__ieee754_pow+0x120>
 80077e0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80077e4:	469c      	mov	ip, r3
 80077e6:	e7a3      	b.n	8007730 <__ieee754_pow+0x120>
 80077e8:	0feb      	lsrs	r3, r5, #31
 80077ea:	3b01      	subs	r3, #1
 80077ec:	930c      	str	r3, [sp, #48]	; 0x30
 80077ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077f0:	9b00      	ldr	r3, [sp, #0]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	d104      	bne.n	8007800 <__ieee754_pow+0x1f0>
 80077f6:	4642      	mov	r2, r8
 80077f8:	464b      	mov	r3, r9
 80077fa:	4640      	mov	r0, r8
 80077fc:	4649      	mov	r1, r9
 80077fe:	e7e7      	b.n	80077d0 <__ieee754_pow+0x1c0>
 8007800:	4b15      	ldr	r3, [pc, #84]	; (8007858 <__ieee754_pow+0x248>)
 8007802:	429e      	cmp	r6, r3
 8007804:	f340 80f6 	ble.w	80079f4 <__ieee754_pow+0x3e4>
 8007808:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800780c:	429e      	cmp	r6, r3
 800780e:	4b10      	ldr	r3, [pc, #64]	; (8007850 <__ieee754_pow+0x240>)
 8007810:	dd09      	ble.n	8007826 <__ieee754_pow+0x216>
 8007812:	429c      	cmp	r4, r3
 8007814:	dc0c      	bgt.n	8007830 <__ieee754_pow+0x220>
 8007816:	2f00      	cmp	r7, #0
 8007818:	da0c      	bge.n	8007834 <__ieee754_pow+0x224>
 800781a:	2000      	movs	r0, #0
 800781c:	b013      	add	sp, #76	; 0x4c
 800781e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007822:	f000 bce2 	b.w	80081ea <__math_oflow>
 8007826:	429c      	cmp	r4, r3
 8007828:	dbf5      	blt.n	8007816 <__ieee754_pow+0x206>
 800782a:	4b08      	ldr	r3, [pc, #32]	; (800784c <__ieee754_pow+0x23c>)
 800782c:	429c      	cmp	r4, r3
 800782e:	dd15      	ble.n	800785c <__ieee754_pow+0x24c>
 8007830:	2f00      	cmp	r7, #0
 8007832:	dcf2      	bgt.n	800781a <__ieee754_pow+0x20a>
 8007834:	2000      	movs	r0, #0
 8007836:	b013      	add	sp, #76	; 0x4c
 8007838:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783c:	f000 bcd0 	b.w	80081e0 <__math_uflow>
 8007840:	fff00000 	.word	0xfff00000
 8007844:	7ff00000 	.word	0x7ff00000
 8007848:	433fffff 	.word	0x433fffff
 800784c:	3ff00000 	.word	0x3ff00000
 8007850:	3fefffff 	.word	0x3fefffff
 8007854:	3fe00000 	.word	0x3fe00000
 8007858:	41e00000 	.word	0x41e00000
 800785c:	4661      	mov	r1, ip
 800785e:	2200      	movs	r2, #0
 8007860:	4658      	mov	r0, fp
 8007862:	4b5f      	ldr	r3, [pc, #380]	; (80079e0 <__ieee754_pow+0x3d0>)
 8007864:	f7f8 fc80 	bl	8000168 <__aeabi_dsub>
 8007868:	a355      	add	r3, pc, #340	; (adr r3, 80079c0 <__ieee754_pow+0x3b0>)
 800786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786e:	4604      	mov	r4, r0
 8007870:	460d      	mov	r5, r1
 8007872:	f7f8 fe31 	bl	80004d8 <__aeabi_dmul>
 8007876:	a354      	add	r3, pc, #336	; (adr r3, 80079c8 <__ieee754_pow+0x3b8>)
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	4606      	mov	r6, r0
 800787e:	460f      	mov	r7, r1
 8007880:	4620      	mov	r0, r4
 8007882:	4629      	mov	r1, r5
 8007884:	f7f8 fe28 	bl	80004d8 <__aeabi_dmul>
 8007888:	2200      	movs	r2, #0
 800788a:	4682      	mov	sl, r0
 800788c:	468b      	mov	fp, r1
 800788e:	4620      	mov	r0, r4
 8007890:	4629      	mov	r1, r5
 8007892:	4b54      	ldr	r3, [pc, #336]	; (80079e4 <__ieee754_pow+0x3d4>)
 8007894:	f7f8 fe20 	bl	80004d8 <__aeabi_dmul>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	a14c      	add	r1, pc, #304	; (adr r1, 80079d0 <__ieee754_pow+0x3c0>)
 800789e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078a2:	f7f8 fc61 	bl	8000168 <__aeabi_dsub>
 80078a6:	4622      	mov	r2, r4
 80078a8:	462b      	mov	r3, r5
 80078aa:	f7f8 fe15 	bl	80004d8 <__aeabi_dmul>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	2000      	movs	r0, #0
 80078b4:	494c      	ldr	r1, [pc, #304]	; (80079e8 <__ieee754_pow+0x3d8>)
 80078b6:	f7f8 fc57 	bl	8000168 <__aeabi_dsub>
 80078ba:	4622      	mov	r2, r4
 80078bc:	462b      	mov	r3, r5
 80078be:	4680      	mov	r8, r0
 80078c0:	4689      	mov	r9, r1
 80078c2:	4620      	mov	r0, r4
 80078c4:	4629      	mov	r1, r5
 80078c6:	f7f8 fe07 	bl	80004d8 <__aeabi_dmul>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	4640      	mov	r0, r8
 80078d0:	4649      	mov	r1, r9
 80078d2:	f7f8 fe01 	bl	80004d8 <__aeabi_dmul>
 80078d6:	a340      	add	r3, pc, #256	; (adr r3, 80079d8 <__ieee754_pow+0x3c8>)
 80078d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078dc:	f7f8 fdfc 	bl	80004d8 <__aeabi_dmul>
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	4650      	mov	r0, sl
 80078e6:	4659      	mov	r1, fp
 80078e8:	f7f8 fc3e 	bl	8000168 <__aeabi_dsub>
 80078ec:	f04f 0a00 	mov.w	sl, #0
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	4604      	mov	r4, r0
 80078f6:	460d      	mov	r5, r1
 80078f8:	4630      	mov	r0, r6
 80078fa:	4639      	mov	r1, r7
 80078fc:	f7f8 fc36 	bl	800016c <__adddf3>
 8007900:	4632      	mov	r2, r6
 8007902:	463b      	mov	r3, r7
 8007904:	4650      	mov	r0, sl
 8007906:	468b      	mov	fp, r1
 8007908:	f7f8 fc2e 	bl	8000168 <__aeabi_dsub>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	4620      	mov	r0, r4
 8007912:	4629      	mov	r1, r5
 8007914:	f7f8 fc28 	bl	8000168 <__aeabi_dsub>
 8007918:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800791c:	9b00      	ldr	r3, [sp, #0]
 800791e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007920:	3b01      	subs	r3, #1
 8007922:	4313      	orrs	r3, r2
 8007924:	f04f 0600 	mov.w	r6, #0
 8007928:	f04f 0200 	mov.w	r2, #0
 800792c:	bf0c      	ite	eq
 800792e:	4b2f      	ldreq	r3, [pc, #188]	; (80079ec <__ieee754_pow+0x3dc>)
 8007930:	4b2b      	ldrne	r3, [pc, #172]	; (80079e0 <__ieee754_pow+0x3d0>)
 8007932:	4604      	mov	r4, r0
 8007934:	460d      	mov	r5, r1
 8007936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800793a:	e9cd 2300 	strd	r2, r3, [sp]
 800793e:	4632      	mov	r2, r6
 8007940:	463b      	mov	r3, r7
 8007942:	f7f8 fc11 	bl	8000168 <__aeabi_dsub>
 8007946:	4652      	mov	r2, sl
 8007948:	465b      	mov	r3, fp
 800794a:	f7f8 fdc5 	bl	80004d8 <__aeabi_dmul>
 800794e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007952:	4680      	mov	r8, r0
 8007954:	4689      	mov	r9, r1
 8007956:	4620      	mov	r0, r4
 8007958:	4629      	mov	r1, r5
 800795a:	f7f8 fdbd 	bl	80004d8 <__aeabi_dmul>
 800795e:	4602      	mov	r2, r0
 8007960:	460b      	mov	r3, r1
 8007962:	4640      	mov	r0, r8
 8007964:	4649      	mov	r1, r9
 8007966:	f7f8 fc01 	bl	800016c <__adddf3>
 800796a:	4632      	mov	r2, r6
 800796c:	463b      	mov	r3, r7
 800796e:	4680      	mov	r8, r0
 8007970:	4689      	mov	r9, r1
 8007972:	4650      	mov	r0, sl
 8007974:	4659      	mov	r1, fp
 8007976:	f7f8 fdaf 	bl	80004d8 <__aeabi_dmul>
 800797a:	4604      	mov	r4, r0
 800797c:	460d      	mov	r5, r1
 800797e:	460b      	mov	r3, r1
 8007980:	4602      	mov	r2, r0
 8007982:	4649      	mov	r1, r9
 8007984:	4640      	mov	r0, r8
 8007986:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800798a:	f7f8 fbef 	bl	800016c <__adddf3>
 800798e:	4b18      	ldr	r3, [pc, #96]	; (80079f0 <__ieee754_pow+0x3e0>)
 8007990:	4682      	mov	sl, r0
 8007992:	4299      	cmp	r1, r3
 8007994:	460f      	mov	r7, r1
 8007996:	460e      	mov	r6, r1
 8007998:	f340 82e5 	ble.w	8007f66 <__ieee754_pow+0x956>
 800799c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80079a0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80079a4:	4303      	orrs	r3, r0
 80079a6:	f000 81df 	beq.w	8007d68 <__ieee754_pow+0x758>
 80079aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079ae:	2200      	movs	r2, #0
 80079b0:	2300      	movs	r3, #0
 80079b2:	f7f9 f803 	bl	80009bc <__aeabi_dcmplt>
 80079b6:	3800      	subs	r0, #0
 80079b8:	bf18      	it	ne
 80079ba:	2001      	movne	r0, #1
 80079bc:	e72e      	b.n	800781c <__ieee754_pow+0x20c>
 80079be:	bf00      	nop
 80079c0:	60000000 	.word	0x60000000
 80079c4:	3ff71547 	.word	0x3ff71547
 80079c8:	f85ddf44 	.word	0xf85ddf44
 80079cc:	3e54ae0b 	.word	0x3e54ae0b
 80079d0:	55555555 	.word	0x55555555
 80079d4:	3fd55555 	.word	0x3fd55555
 80079d8:	652b82fe 	.word	0x652b82fe
 80079dc:	3ff71547 	.word	0x3ff71547
 80079e0:	3ff00000 	.word	0x3ff00000
 80079e4:	3fd00000 	.word	0x3fd00000
 80079e8:	3fe00000 	.word	0x3fe00000
 80079ec:	bff00000 	.word	0xbff00000
 80079f0:	408fffff 	.word	0x408fffff
 80079f4:	4bd2      	ldr	r3, [pc, #840]	; (8007d40 <__ieee754_pow+0x730>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	402b      	ands	r3, r5
 80079fa:	b943      	cbnz	r3, 8007a0e <__ieee754_pow+0x3fe>
 80079fc:	4658      	mov	r0, fp
 80079fe:	4661      	mov	r1, ip
 8007a00:	4bd0      	ldr	r3, [pc, #832]	; (8007d44 <__ieee754_pow+0x734>)
 8007a02:	f7f8 fd69 	bl	80004d8 <__aeabi_dmul>
 8007a06:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007a0a:	4683      	mov	fp, r0
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	1523      	asrs	r3, r4, #20
 8007a10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007a14:	4413      	add	r3, r2
 8007a16:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a18:	4bcb      	ldr	r3, [pc, #812]	; (8007d48 <__ieee754_pow+0x738>)
 8007a1a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007a1e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007a22:	429c      	cmp	r4, r3
 8007a24:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007a28:	dd08      	ble.n	8007a3c <__ieee754_pow+0x42c>
 8007a2a:	4bc8      	ldr	r3, [pc, #800]	; (8007d4c <__ieee754_pow+0x73c>)
 8007a2c:	429c      	cmp	r4, r3
 8007a2e:	f340 8199 	ble.w	8007d64 <__ieee754_pow+0x754>
 8007a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a34:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007a38:	3301      	adds	r3, #1
 8007a3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a3c:	2600      	movs	r6, #0
 8007a3e:	00f3      	lsls	r3, r6, #3
 8007a40:	930d      	str	r3, [sp, #52]	; 0x34
 8007a42:	4bc3      	ldr	r3, [pc, #780]	; (8007d50 <__ieee754_pow+0x740>)
 8007a44:	4658      	mov	r0, fp
 8007a46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a4e:	4629      	mov	r1, r5
 8007a50:	461a      	mov	r2, r3
 8007a52:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007a56:	4623      	mov	r3, r4
 8007a58:	f7f8 fb86 	bl	8000168 <__aeabi_dsub>
 8007a5c:	46da      	mov	sl, fp
 8007a5e:	462b      	mov	r3, r5
 8007a60:	4652      	mov	r2, sl
 8007a62:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007a66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a6a:	f7f8 fb7f 	bl	800016c <__adddf3>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	2000      	movs	r0, #0
 8007a74:	49b7      	ldr	r1, [pc, #732]	; (8007d54 <__ieee754_pow+0x744>)
 8007a76:	f7f8 fe59 	bl	800072c <__aeabi_ddiv>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a82:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007a86:	f7f8 fd27 	bl	80004d8 <__aeabi_dmul>
 8007a8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007a8e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007a92:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a96:	2300      	movs	r3, #0
 8007a98:	2200      	movs	r2, #0
 8007a9a:	46ab      	mov	fp, r5
 8007a9c:	106d      	asrs	r5, r5, #1
 8007a9e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007aa2:	9304      	str	r3, [sp, #16]
 8007aa4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007aa8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007aac:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007ab0:	4640      	mov	r0, r8
 8007ab2:	4649      	mov	r1, r9
 8007ab4:	4614      	mov	r4, r2
 8007ab6:	461d      	mov	r5, r3
 8007ab8:	f7f8 fd0e 	bl	80004d8 <__aeabi_dmul>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007ac4:	f7f8 fb50 	bl	8000168 <__aeabi_dsub>
 8007ac8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007acc:	4606      	mov	r6, r0
 8007ace:	460f      	mov	r7, r1
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	f7f8 fb48 	bl	8000168 <__aeabi_dsub>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	4650      	mov	r0, sl
 8007ade:	4659      	mov	r1, fp
 8007ae0:	f7f8 fb42 	bl	8000168 <__aeabi_dsub>
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	f7f8 fcf6 	bl	80004d8 <__aeabi_dmul>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	4630      	mov	r0, r6
 8007af2:	4639      	mov	r1, r7
 8007af4:	f7f8 fb38 	bl	8000168 <__aeabi_dsub>
 8007af8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007afc:	f7f8 fcec 	bl	80004d8 <__aeabi_dmul>
 8007b00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b04:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b08:	4610      	mov	r0, r2
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	f7f8 fce4 	bl	80004d8 <__aeabi_dmul>
 8007b10:	a379      	add	r3, pc, #484	; (adr r3, 8007cf8 <__ieee754_pow+0x6e8>)
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	4604      	mov	r4, r0
 8007b18:	460d      	mov	r5, r1
 8007b1a:	f7f8 fcdd 	bl	80004d8 <__aeabi_dmul>
 8007b1e:	a378      	add	r3, pc, #480	; (adr r3, 8007d00 <__ieee754_pow+0x6f0>)
 8007b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b24:	f7f8 fb22 	bl	800016c <__adddf3>
 8007b28:	4622      	mov	r2, r4
 8007b2a:	462b      	mov	r3, r5
 8007b2c:	f7f8 fcd4 	bl	80004d8 <__aeabi_dmul>
 8007b30:	a375      	add	r3, pc, #468	; (adr r3, 8007d08 <__ieee754_pow+0x6f8>)
 8007b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b36:	f7f8 fb19 	bl	800016c <__adddf3>
 8007b3a:	4622      	mov	r2, r4
 8007b3c:	462b      	mov	r3, r5
 8007b3e:	f7f8 fccb 	bl	80004d8 <__aeabi_dmul>
 8007b42:	a373      	add	r3, pc, #460	; (adr r3, 8007d10 <__ieee754_pow+0x700>)
 8007b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b48:	f7f8 fb10 	bl	800016c <__adddf3>
 8007b4c:	4622      	mov	r2, r4
 8007b4e:	462b      	mov	r3, r5
 8007b50:	f7f8 fcc2 	bl	80004d8 <__aeabi_dmul>
 8007b54:	a370      	add	r3, pc, #448	; (adr r3, 8007d18 <__ieee754_pow+0x708>)
 8007b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5a:	f7f8 fb07 	bl	800016c <__adddf3>
 8007b5e:	4622      	mov	r2, r4
 8007b60:	462b      	mov	r3, r5
 8007b62:	f7f8 fcb9 	bl	80004d8 <__aeabi_dmul>
 8007b66:	a36e      	add	r3, pc, #440	; (adr r3, 8007d20 <__ieee754_pow+0x710>)
 8007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6c:	f7f8 fafe 	bl	800016c <__adddf3>
 8007b70:	4622      	mov	r2, r4
 8007b72:	4606      	mov	r6, r0
 8007b74:	460f      	mov	r7, r1
 8007b76:	462b      	mov	r3, r5
 8007b78:	4620      	mov	r0, r4
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	f7f8 fcac 	bl	80004d8 <__aeabi_dmul>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4630      	mov	r0, r6
 8007b86:	4639      	mov	r1, r7
 8007b88:	f7f8 fca6 	bl	80004d8 <__aeabi_dmul>
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	460d      	mov	r5, r1
 8007b90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b94:	4642      	mov	r2, r8
 8007b96:	464b      	mov	r3, r9
 8007b98:	f7f8 fae8 	bl	800016c <__adddf3>
 8007b9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ba0:	f7f8 fc9a 	bl	80004d8 <__aeabi_dmul>
 8007ba4:	4622      	mov	r2, r4
 8007ba6:	462b      	mov	r3, r5
 8007ba8:	f7f8 fae0 	bl	800016c <__adddf3>
 8007bac:	4642      	mov	r2, r8
 8007bae:	4606      	mov	r6, r0
 8007bb0:	460f      	mov	r7, r1
 8007bb2:	464b      	mov	r3, r9
 8007bb4:	4640      	mov	r0, r8
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	f7f8 fc8e 	bl	80004d8 <__aeabi_dmul>
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	4b66      	ldr	r3, [pc, #408]	; (8007d58 <__ieee754_pow+0x748>)
 8007bc0:	4682      	mov	sl, r0
 8007bc2:	468b      	mov	fp, r1
 8007bc4:	f7f8 fad2 	bl	800016c <__adddf3>
 8007bc8:	4632      	mov	r2, r6
 8007bca:	463b      	mov	r3, r7
 8007bcc:	f7f8 face 	bl	800016c <__adddf3>
 8007bd0:	2400      	movs	r4, #0
 8007bd2:	460d      	mov	r5, r1
 8007bd4:	4622      	mov	r2, r4
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4640      	mov	r0, r8
 8007bda:	4649      	mov	r1, r9
 8007bdc:	f7f8 fc7c 	bl	80004d8 <__aeabi_dmul>
 8007be0:	2200      	movs	r2, #0
 8007be2:	4680      	mov	r8, r0
 8007be4:	4689      	mov	r9, r1
 8007be6:	4620      	mov	r0, r4
 8007be8:	4629      	mov	r1, r5
 8007bea:	4b5b      	ldr	r3, [pc, #364]	; (8007d58 <__ieee754_pow+0x748>)
 8007bec:	f7f8 fabc 	bl	8000168 <__aeabi_dsub>
 8007bf0:	4652      	mov	r2, sl
 8007bf2:	465b      	mov	r3, fp
 8007bf4:	f7f8 fab8 	bl	8000168 <__aeabi_dsub>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	4639      	mov	r1, r7
 8007c00:	f7f8 fab2 	bl	8000168 <__aeabi_dsub>
 8007c04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c08:	f7f8 fc66 	bl	80004d8 <__aeabi_dmul>
 8007c0c:	4622      	mov	r2, r4
 8007c0e:	4606      	mov	r6, r0
 8007c10:	460f      	mov	r7, r1
 8007c12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c16:	462b      	mov	r3, r5
 8007c18:	f7f8 fc5e 	bl	80004d8 <__aeabi_dmul>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4630      	mov	r0, r6
 8007c22:	4639      	mov	r1, r7
 8007c24:	f7f8 faa2 	bl	800016c <__adddf3>
 8007c28:	2400      	movs	r4, #0
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	460f      	mov	r7, r1
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	4640      	mov	r0, r8
 8007c34:	4649      	mov	r1, r9
 8007c36:	f7f8 fa99 	bl	800016c <__adddf3>
 8007c3a:	a33b      	add	r3, pc, #236	; (adr r3, 8007d28 <__ieee754_pow+0x718>)
 8007c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c40:	4620      	mov	r0, r4
 8007c42:	460d      	mov	r5, r1
 8007c44:	f7f8 fc48 	bl	80004d8 <__aeabi_dmul>
 8007c48:	4642      	mov	r2, r8
 8007c4a:	464b      	mov	r3, r9
 8007c4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c50:	4620      	mov	r0, r4
 8007c52:	4629      	mov	r1, r5
 8007c54:	f7f8 fa88 	bl	8000168 <__aeabi_dsub>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	4639      	mov	r1, r7
 8007c60:	f7f8 fa82 	bl	8000168 <__aeabi_dsub>
 8007c64:	a332      	add	r3, pc, #200	; (adr r3, 8007d30 <__ieee754_pow+0x720>)
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f7f8 fc35 	bl	80004d8 <__aeabi_dmul>
 8007c6e:	a332      	add	r3, pc, #200	; (adr r3, 8007d38 <__ieee754_pow+0x728>)
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	4606      	mov	r6, r0
 8007c76:	460f      	mov	r7, r1
 8007c78:	4620      	mov	r0, r4
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	f7f8 fc2c 	bl	80004d8 <__aeabi_dmul>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	4630      	mov	r0, r6
 8007c86:	4639      	mov	r1, r7
 8007c88:	f7f8 fa70 	bl	800016c <__adddf3>
 8007c8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c8e:	4b33      	ldr	r3, [pc, #204]	; (8007d5c <__ieee754_pow+0x74c>)
 8007c90:	f04f 0a00 	mov.w	sl, #0
 8007c94:	4413      	add	r3, r2
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	f7f8 fa67 	bl	800016c <__adddf3>
 8007c9e:	4680      	mov	r8, r0
 8007ca0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007ca2:	4689      	mov	r9, r1
 8007ca4:	f7f8 fbae 	bl	8000404 <__aeabi_i2d>
 8007ca8:	4604      	mov	r4, r0
 8007caa:	460d      	mov	r5, r1
 8007cac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cae:	4b2c      	ldr	r3, [pc, #176]	; (8007d60 <__ieee754_pow+0x750>)
 8007cb0:	4413      	add	r3, r2
 8007cb2:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007cb6:	4642      	mov	r2, r8
 8007cb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cbc:	464b      	mov	r3, r9
 8007cbe:	f7f8 fa55 	bl	800016c <__adddf3>
 8007cc2:	4632      	mov	r2, r6
 8007cc4:	463b      	mov	r3, r7
 8007cc6:	f7f8 fa51 	bl	800016c <__adddf3>
 8007cca:	4622      	mov	r2, r4
 8007ccc:	462b      	mov	r3, r5
 8007cce:	f7f8 fa4d 	bl	800016c <__adddf3>
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	462b      	mov	r3, r5
 8007cd6:	4650      	mov	r0, sl
 8007cd8:	468b      	mov	fp, r1
 8007cda:	f7f8 fa45 	bl	8000168 <__aeabi_dsub>
 8007cde:	4632      	mov	r2, r6
 8007ce0:	463b      	mov	r3, r7
 8007ce2:	f7f8 fa41 	bl	8000168 <__aeabi_dsub>
 8007ce6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cea:	f7f8 fa3d 	bl	8000168 <__aeabi_dsub>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	e60d      	b.n	8007914 <__ieee754_pow+0x304>
 8007cf8:	4a454eef 	.word	0x4a454eef
 8007cfc:	3fca7e28 	.word	0x3fca7e28
 8007d00:	93c9db65 	.word	0x93c9db65
 8007d04:	3fcd864a 	.word	0x3fcd864a
 8007d08:	a91d4101 	.word	0xa91d4101
 8007d0c:	3fd17460 	.word	0x3fd17460
 8007d10:	518f264d 	.word	0x518f264d
 8007d14:	3fd55555 	.word	0x3fd55555
 8007d18:	db6fabff 	.word	0xdb6fabff
 8007d1c:	3fdb6db6 	.word	0x3fdb6db6
 8007d20:	33333303 	.word	0x33333303
 8007d24:	3fe33333 	.word	0x3fe33333
 8007d28:	e0000000 	.word	0xe0000000
 8007d2c:	3feec709 	.word	0x3feec709
 8007d30:	dc3a03fd 	.word	0xdc3a03fd
 8007d34:	3feec709 	.word	0x3feec709
 8007d38:	145b01f5 	.word	0x145b01f5
 8007d3c:	be3e2fe0 	.word	0xbe3e2fe0
 8007d40:	7ff00000 	.word	0x7ff00000
 8007d44:	43400000 	.word	0x43400000
 8007d48:	0003988e 	.word	0x0003988e
 8007d4c:	000bb679 	.word	0x000bb679
 8007d50:	08008790 	.word	0x08008790
 8007d54:	3ff00000 	.word	0x3ff00000
 8007d58:	40080000 	.word	0x40080000
 8007d5c:	080087b0 	.word	0x080087b0
 8007d60:	080087a0 	.word	0x080087a0
 8007d64:	2601      	movs	r6, #1
 8007d66:	e66a      	b.n	8007a3e <__ieee754_pow+0x42e>
 8007d68:	a39d      	add	r3, pc, #628	; (adr r3, 8007fe0 <__ieee754_pow+0x9d0>)
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	4640      	mov	r0, r8
 8007d70:	4649      	mov	r1, r9
 8007d72:	f7f8 f9fb 	bl	800016c <__adddf3>
 8007d76:	4622      	mov	r2, r4
 8007d78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d7c:	462b      	mov	r3, r5
 8007d7e:	4650      	mov	r0, sl
 8007d80:	4639      	mov	r1, r7
 8007d82:	f7f8 f9f1 	bl	8000168 <__aeabi_dsub>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d8e:	f7f8 fe33 	bl	80009f8 <__aeabi_dcmpgt>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	f47f ae09 	bne.w	80079aa <__ieee754_pow+0x39a>
 8007d98:	4aa3      	ldr	r2, [pc, #652]	; (8008028 <__ieee754_pow+0xa18>)
 8007d9a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	f340 8101 	ble.w	8007fa6 <__ieee754_pow+0x996>
 8007da4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007da8:	2000      	movs	r0, #0
 8007daa:	151b      	asrs	r3, r3, #20
 8007dac:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007db0:	fa4a f303 	asr.w	r3, sl, r3
 8007db4:	4433      	add	r3, r6
 8007db6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007dba:	4f9c      	ldr	r7, [pc, #624]	; (800802c <__ieee754_pow+0xa1c>)
 8007dbc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007dc0:	4117      	asrs	r7, r2
 8007dc2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007dc6:	ea23 0107 	bic.w	r1, r3, r7
 8007dca:	f1c2 0214 	rsb	r2, r2, #20
 8007dce:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	fa4a fa02 	asr.w	sl, sl, r2
 8007dd8:	2e00      	cmp	r6, #0
 8007dda:	4602      	mov	r2, r0
 8007ddc:	4629      	mov	r1, r5
 8007dde:	4620      	mov	r0, r4
 8007de0:	bfb8      	it	lt
 8007de2:	f1ca 0a00 	rsblt	sl, sl, #0
 8007de6:	f7f8 f9bf 	bl	8000168 <__aeabi_dsub>
 8007dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007df2:	2400      	movs	r4, #0
 8007df4:	4642      	mov	r2, r8
 8007df6:	464b      	mov	r3, r9
 8007df8:	f7f8 f9b8 	bl	800016c <__adddf3>
 8007dfc:	a37a      	add	r3, pc, #488	; (adr r3, 8007fe8 <__ieee754_pow+0x9d8>)
 8007dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e02:	4620      	mov	r0, r4
 8007e04:	460d      	mov	r5, r1
 8007e06:	f7f8 fb67 	bl	80004d8 <__aeabi_dmul>
 8007e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e0e:	4606      	mov	r6, r0
 8007e10:	460f      	mov	r7, r1
 8007e12:	4620      	mov	r0, r4
 8007e14:	4629      	mov	r1, r5
 8007e16:	f7f8 f9a7 	bl	8000168 <__aeabi_dsub>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4640      	mov	r0, r8
 8007e20:	4649      	mov	r1, r9
 8007e22:	f7f8 f9a1 	bl	8000168 <__aeabi_dsub>
 8007e26:	a372      	add	r3, pc, #456	; (adr r3, 8007ff0 <__ieee754_pow+0x9e0>)
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	f7f8 fb54 	bl	80004d8 <__aeabi_dmul>
 8007e30:	a371      	add	r3, pc, #452	; (adr r3, 8007ff8 <__ieee754_pow+0x9e8>)
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	4680      	mov	r8, r0
 8007e38:	4689      	mov	r9, r1
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	f7f8 fb4b 	bl	80004d8 <__aeabi_dmul>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	4640      	mov	r0, r8
 8007e48:	4649      	mov	r1, r9
 8007e4a:	f7f8 f98f 	bl	800016c <__adddf3>
 8007e4e:	4604      	mov	r4, r0
 8007e50:	460d      	mov	r5, r1
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	4630      	mov	r0, r6
 8007e58:	4639      	mov	r1, r7
 8007e5a:	f7f8 f987 	bl	800016c <__adddf3>
 8007e5e:	4632      	mov	r2, r6
 8007e60:	463b      	mov	r3, r7
 8007e62:	4680      	mov	r8, r0
 8007e64:	4689      	mov	r9, r1
 8007e66:	f7f8 f97f 	bl	8000168 <__aeabi_dsub>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4620      	mov	r0, r4
 8007e70:	4629      	mov	r1, r5
 8007e72:	f7f8 f979 	bl	8000168 <__aeabi_dsub>
 8007e76:	4642      	mov	r2, r8
 8007e78:	4606      	mov	r6, r0
 8007e7a:	460f      	mov	r7, r1
 8007e7c:	464b      	mov	r3, r9
 8007e7e:	4640      	mov	r0, r8
 8007e80:	4649      	mov	r1, r9
 8007e82:	f7f8 fb29 	bl	80004d8 <__aeabi_dmul>
 8007e86:	a35e      	add	r3, pc, #376	; (adr r3, 8008000 <__ieee754_pow+0x9f0>)
 8007e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	460d      	mov	r5, r1
 8007e90:	f7f8 fb22 	bl	80004d8 <__aeabi_dmul>
 8007e94:	a35c      	add	r3, pc, #368	; (adr r3, 8008008 <__ieee754_pow+0x9f8>)
 8007e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9a:	f7f8 f965 	bl	8000168 <__aeabi_dsub>
 8007e9e:	4622      	mov	r2, r4
 8007ea0:	462b      	mov	r3, r5
 8007ea2:	f7f8 fb19 	bl	80004d8 <__aeabi_dmul>
 8007ea6:	a35a      	add	r3, pc, #360	; (adr r3, 8008010 <__ieee754_pow+0xa00>)
 8007ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eac:	f7f8 f95e 	bl	800016c <__adddf3>
 8007eb0:	4622      	mov	r2, r4
 8007eb2:	462b      	mov	r3, r5
 8007eb4:	f7f8 fb10 	bl	80004d8 <__aeabi_dmul>
 8007eb8:	a357      	add	r3, pc, #348	; (adr r3, 8008018 <__ieee754_pow+0xa08>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	f7f8 f953 	bl	8000168 <__aeabi_dsub>
 8007ec2:	4622      	mov	r2, r4
 8007ec4:	462b      	mov	r3, r5
 8007ec6:	f7f8 fb07 	bl	80004d8 <__aeabi_dmul>
 8007eca:	a355      	add	r3, pc, #340	; (adr r3, 8008020 <__ieee754_pow+0xa10>)
 8007ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed0:	f7f8 f94c 	bl	800016c <__adddf3>
 8007ed4:	4622      	mov	r2, r4
 8007ed6:	462b      	mov	r3, r5
 8007ed8:	f7f8 fafe 	bl	80004d8 <__aeabi_dmul>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	f7f8 f940 	bl	8000168 <__aeabi_dsub>
 8007ee8:	4604      	mov	r4, r0
 8007eea:	460d      	mov	r5, r1
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4640      	mov	r0, r8
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	f7f8 faf0 	bl	80004d8 <__aeabi_dmul>
 8007ef8:	2200      	movs	r2, #0
 8007efa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007efe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f02:	4620      	mov	r0, r4
 8007f04:	4629      	mov	r1, r5
 8007f06:	f7f8 f92f 	bl	8000168 <__aeabi_dsub>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f12:	f7f8 fc0b 	bl	800072c <__aeabi_ddiv>
 8007f16:	4632      	mov	r2, r6
 8007f18:	4604      	mov	r4, r0
 8007f1a:	460d      	mov	r5, r1
 8007f1c:	463b      	mov	r3, r7
 8007f1e:	4640      	mov	r0, r8
 8007f20:	4649      	mov	r1, r9
 8007f22:	f7f8 fad9 	bl	80004d8 <__aeabi_dmul>
 8007f26:	4632      	mov	r2, r6
 8007f28:	463b      	mov	r3, r7
 8007f2a:	f7f8 f91f 	bl	800016c <__adddf3>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4620      	mov	r0, r4
 8007f34:	4629      	mov	r1, r5
 8007f36:	f7f8 f917 	bl	8000168 <__aeabi_dsub>
 8007f3a:	4642      	mov	r2, r8
 8007f3c:	464b      	mov	r3, r9
 8007f3e:	f7f8 f913 	bl	8000168 <__aeabi_dsub>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	2000      	movs	r0, #0
 8007f48:	4939      	ldr	r1, [pc, #228]	; (8008030 <__ieee754_pow+0xa20>)
 8007f4a:	f7f8 f90d 	bl	8000168 <__aeabi_dsub>
 8007f4e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007f52:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007f56:	da29      	bge.n	8007fac <__ieee754_pow+0x99c>
 8007f58:	4652      	mov	r2, sl
 8007f5a:	f000 f955 	bl	8008208 <scalbn>
 8007f5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f62:	f7ff bbfe 	b.w	8007762 <__ieee754_pow+0x152>
 8007f66:	4b33      	ldr	r3, [pc, #204]	; (8008034 <__ieee754_pow+0xa24>)
 8007f68:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007f6c:	429f      	cmp	r7, r3
 8007f6e:	f77f af13 	ble.w	8007d98 <__ieee754_pow+0x788>
 8007f72:	4b31      	ldr	r3, [pc, #196]	; (8008038 <__ieee754_pow+0xa28>)
 8007f74:	440b      	add	r3, r1
 8007f76:	4303      	orrs	r3, r0
 8007f78:	d009      	beq.n	8007f8e <__ieee754_pow+0x97e>
 8007f7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2300      	movs	r3, #0
 8007f82:	f7f8 fd1b 	bl	80009bc <__aeabi_dcmplt>
 8007f86:	3800      	subs	r0, #0
 8007f88:	bf18      	it	ne
 8007f8a:	2001      	movne	r0, #1
 8007f8c:	e453      	b.n	8007836 <__ieee754_pow+0x226>
 8007f8e:	4622      	mov	r2, r4
 8007f90:	462b      	mov	r3, r5
 8007f92:	f7f8 f8e9 	bl	8000168 <__aeabi_dsub>
 8007f96:	4642      	mov	r2, r8
 8007f98:	464b      	mov	r3, r9
 8007f9a:	f7f8 fd23 	bl	80009e4 <__aeabi_dcmpge>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	f43f aefa 	beq.w	8007d98 <__ieee754_pow+0x788>
 8007fa4:	e7e9      	b.n	8007f7a <__ieee754_pow+0x96a>
 8007fa6:	f04f 0a00 	mov.w	sl, #0
 8007faa:	e720      	b.n	8007dee <__ieee754_pow+0x7de>
 8007fac:	4621      	mov	r1, r4
 8007fae:	e7d6      	b.n	8007f5e <__ieee754_pow+0x94e>
 8007fb0:	f04f 0b00 	mov.w	fp, #0
 8007fb4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8008030 <__ieee754_pow+0xa20>
 8007fb8:	f7ff bbba 	b.w	8007730 <__ieee754_pow+0x120>
 8007fbc:	f04f 0b00 	mov.w	fp, #0
 8007fc0:	f04f 0c00 	mov.w	ip, #0
 8007fc4:	f7ff bbb4 	b.w	8007730 <__ieee754_pow+0x120>
 8007fc8:	4640      	mov	r0, r8
 8007fca:	4649      	mov	r1, r9
 8007fcc:	f7ff bb3d 	b.w	800764a <__ieee754_pow+0x3a>
 8007fd0:	9200      	str	r2, [sp, #0]
 8007fd2:	f7ff bb89 	b.w	80076e8 <__ieee754_pow+0xd8>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f7ff bb73 	b.w	80076c2 <__ieee754_pow+0xb2>
 8007fdc:	f3af 8000 	nop.w
 8007fe0:	652b82fe 	.word	0x652b82fe
 8007fe4:	3c971547 	.word	0x3c971547
 8007fe8:	00000000 	.word	0x00000000
 8007fec:	3fe62e43 	.word	0x3fe62e43
 8007ff0:	fefa39ef 	.word	0xfefa39ef
 8007ff4:	3fe62e42 	.word	0x3fe62e42
 8007ff8:	0ca86c39 	.word	0x0ca86c39
 8007ffc:	be205c61 	.word	0xbe205c61
 8008000:	72bea4d0 	.word	0x72bea4d0
 8008004:	3e663769 	.word	0x3e663769
 8008008:	c5d26bf1 	.word	0xc5d26bf1
 800800c:	3ebbbd41 	.word	0x3ebbbd41
 8008010:	af25de2c 	.word	0xaf25de2c
 8008014:	3f11566a 	.word	0x3f11566a
 8008018:	16bebd93 	.word	0x16bebd93
 800801c:	3f66c16c 	.word	0x3f66c16c
 8008020:	5555553e 	.word	0x5555553e
 8008024:	3fc55555 	.word	0x3fc55555
 8008028:	3fe00000 	.word	0x3fe00000
 800802c:	000fffff 	.word	0x000fffff
 8008030:	3ff00000 	.word	0x3ff00000
 8008034:	4090cbff 	.word	0x4090cbff
 8008038:	3f6f3400 	.word	0x3f6f3400

0800803c <__ieee754_sqrt>:
 800803c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008198 <__ieee754_sqrt+0x15c>
 8008040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008044:	ea3c 0c01 	bics.w	ip, ip, r1
 8008048:	4606      	mov	r6, r0
 800804a:	460d      	mov	r5, r1
 800804c:	460c      	mov	r4, r1
 800804e:	460a      	mov	r2, r1
 8008050:	4607      	mov	r7, r0
 8008052:	4603      	mov	r3, r0
 8008054:	d10f      	bne.n	8008076 <__ieee754_sqrt+0x3a>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	f7f8 fa3d 	bl	80004d8 <__aeabi_dmul>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4630      	mov	r0, r6
 8008064:	4629      	mov	r1, r5
 8008066:	f7f8 f881 	bl	800016c <__adddf3>
 800806a:	4606      	mov	r6, r0
 800806c:	460d      	mov	r5, r1
 800806e:	4630      	mov	r0, r6
 8008070:	4629      	mov	r1, r5
 8008072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008076:	2900      	cmp	r1, #0
 8008078:	dc0e      	bgt.n	8008098 <__ieee754_sqrt+0x5c>
 800807a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800807e:	ea5c 0707 	orrs.w	r7, ip, r7
 8008082:	d0f4      	beq.n	800806e <__ieee754_sqrt+0x32>
 8008084:	b141      	cbz	r1, 8008098 <__ieee754_sqrt+0x5c>
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	f7f8 f86d 	bl	8000168 <__aeabi_dsub>
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	f7f8 fb4b 	bl	800072c <__aeabi_ddiv>
 8008096:	e7e8      	b.n	800806a <__ieee754_sqrt+0x2e>
 8008098:	1521      	asrs	r1, r4, #20
 800809a:	d075      	beq.n	8008188 <__ieee754_sqrt+0x14c>
 800809c:	07cc      	lsls	r4, r1, #31
 800809e:	f04f 0400 	mov.w	r4, #0
 80080a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80080a6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80080aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80080ae:	bf5e      	ittt	pl
 80080b0:	0fd9      	lsrpl	r1, r3, #31
 80080b2:	005b      	lslpl	r3, r3, #1
 80080b4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80080b8:	0fd9      	lsrs	r1, r3, #31
 80080ba:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80080be:	2516      	movs	r5, #22
 80080c0:	4620      	mov	r0, r4
 80080c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080c6:	107f      	asrs	r7, r7, #1
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	1846      	adds	r6, r0, r1
 80080cc:	4296      	cmp	r6, r2
 80080ce:	bfde      	ittt	le
 80080d0:	1b92      	suble	r2, r2, r6
 80080d2:	1870      	addle	r0, r6, r1
 80080d4:	1864      	addle	r4, r4, r1
 80080d6:	0052      	lsls	r2, r2, #1
 80080d8:	3d01      	subs	r5, #1
 80080da:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80080de:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80080e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80080e6:	d1f0      	bne.n	80080ca <__ieee754_sqrt+0x8e>
 80080e8:	4629      	mov	r1, r5
 80080ea:	f04f 0e20 	mov.w	lr, #32
 80080ee:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80080f2:	4282      	cmp	r2, r0
 80080f4:	eb06 0c05 	add.w	ip, r6, r5
 80080f8:	dc02      	bgt.n	8008100 <__ieee754_sqrt+0xc4>
 80080fa:	d113      	bne.n	8008124 <__ieee754_sqrt+0xe8>
 80080fc:	459c      	cmp	ip, r3
 80080fe:	d811      	bhi.n	8008124 <__ieee754_sqrt+0xe8>
 8008100:	f1bc 0f00 	cmp.w	ip, #0
 8008104:	eb0c 0506 	add.w	r5, ip, r6
 8008108:	da43      	bge.n	8008192 <__ieee754_sqrt+0x156>
 800810a:	2d00      	cmp	r5, #0
 800810c:	db41      	blt.n	8008192 <__ieee754_sqrt+0x156>
 800810e:	f100 0801 	add.w	r8, r0, #1
 8008112:	1a12      	subs	r2, r2, r0
 8008114:	4640      	mov	r0, r8
 8008116:	459c      	cmp	ip, r3
 8008118:	bf88      	it	hi
 800811a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800811e:	eba3 030c 	sub.w	r3, r3, ip
 8008122:	4431      	add	r1, r6
 8008124:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008128:	f1be 0e01 	subs.w	lr, lr, #1
 800812c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8008130:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008134:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008138:	d1db      	bne.n	80080f2 <__ieee754_sqrt+0xb6>
 800813a:	4313      	orrs	r3, r2
 800813c:	d006      	beq.n	800814c <__ieee754_sqrt+0x110>
 800813e:	1c48      	adds	r0, r1, #1
 8008140:	bf0b      	itete	eq
 8008142:	4671      	moveq	r1, lr
 8008144:	3101      	addne	r1, #1
 8008146:	3401      	addeq	r4, #1
 8008148:	f021 0101 	bicne.w	r1, r1, #1
 800814c:	1063      	asrs	r3, r4, #1
 800814e:	0849      	lsrs	r1, r1, #1
 8008150:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008154:	07e2      	lsls	r2, r4, #31
 8008156:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800815a:	bf48      	it	mi
 800815c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008160:	460e      	mov	r6, r1
 8008162:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008166:	e782      	b.n	800806e <__ieee754_sqrt+0x32>
 8008168:	0ada      	lsrs	r2, r3, #11
 800816a:	3815      	subs	r0, #21
 800816c:	055b      	lsls	r3, r3, #21
 800816e:	2a00      	cmp	r2, #0
 8008170:	d0fa      	beq.n	8008168 <__ieee754_sqrt+0x12c>
 8008172:	02d5      	lsls	r5, r2, #11
 8008174:	d50a      	bpl.n	800818c <__ieee754_sqrt+0x150>
 8008176:	f1c1 0420 	rsb	r4, r1, #32
 800817a:	fa23 f404 	lsr.w	r4, r3, r4
 800817e:	1e4d      	subs	r5, r1, #1
 8008180:	408b      	lsls	r3, r1
 8008182:	4322      	orrs	r2, r4
 8008184:	1b41      	subs	r1, r0, r5
 8008186:	e789      	b.n	800809c <__ieee754_sqrt+0x60>
 8008188:	4608      	mov	r0, r1
 800818a:	e7f0      	b.n	800816e <__ieee754_sqrt+0x132>
 800818c:	0052      	lsls	r2, r2, #1
 800818e:	3101      	adds	r1, #1
 8008190:	e7ef      	b.n	8008172 <__ieee754_sqrt+0x136>
 8008192:	4680      	mov	r8, r0
 8008194:	e7bd      	b.n	8008112 <__ieee754_sqrt+0xd6>
 8008196:	bf00      	nop
 8008198:	7ff00000 	.word	0x7ff00000

0800819c <with_errno>:
 800819c:	b570      	push	{r4, r5, r6, lr}
 800819e:	4604      	mov	r4, r0
 80081a0:	460d      	mov	r5, r1
 80081a2:	4616      	mov	r6, r2
 80081a4:	f7fc fa9c 	bl	80046e0 <__errno>
 80081a8:	4629      	mov	r1, r5
 80081aa:	6006      	str	r6, [r0, #0]
 80081ac:	4620      	mov	r0, r4
 80081ae:	bd70      	pop	{r4, r5, r6, pc}

080081b0 <xflow>:
 80081b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081b2:	4615      	mov	r5, r2
 80081b4:	461c      	mov	r4, r3
 80081b6:	b180      	cbz	r0, 80081da <xflow+0x2a>
 80081b8:	4610      	mov	r0, r2
 80081ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80081be:	e9cd 0100 	strd	r0, r1, [sp]
 80081c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081c6:	4628      	mov	r0, r5
 80081c8:	4621      	mov	r1, r4
 80081ca:	f7f8 f985 	bl	80004d8 <__aeabi_dmul>
 80081ce:	2222      	movs	r2, #34	; 0x22
 80081d0:	b003      	add	sp, #12
 80081d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081d6:	f7ff bfe1 	b.w	800819c <with_errno>
 80081da:	4610      	mov	r0, r2
 80081dc:	4619      	mov	r1, r3
 80081de:	e7ee      	b.n	80081be <xflow+0xe>

080081e0 <__math_uflow>:
 80081e0:	2200      	movs	r2, #0
 80081e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80081e6:	f7ff bfe3 	b.w	80081b0 <xflow>

080081ea <__math_oflow>:
 80081ea:	2200      	movs	r2, #0
 80081ec:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80081f0:	f7ff bfde 	b.w	80081b0 <xflow>

080081f4 <fabs>:
 80081f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80081f8:	4770      	bx	lr

080081fa <finite>:
 80081fa:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80081fe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008202:	0fc0      	lsrs	r0, r0, #31
 8008204:	4770      	bx	lr
	...

08008208 <scalbn>:
 8008208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800820e:	4604      	mov	r4, r0
 8008210:	460d      	mov	r5, r1
 8008212:	4617      	mov	r7, r2
 8008214:	460b      	mov	r3, r1
 8008216:	b996      	cbnz	r6, 800823e <scalbn+0x36>
 8008218:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800821c:	4303      	orrs	r3, r0
 800821e:	d039      	beq.n	8008294 <scalbn+0x8c>
 8008220:	4b33      	ldr	r3, [pc, #204]	; (80082f0 <scalbn+0xe8>)
 8008222:	2200      	movs	r2, #0
 8008224:	f7f8 f958 	bl	80004d8 <__aeabi_dmul>
 8008228:	4b32      	ldr	r3, [pc, #200]	; (80082f4 <scalbn+0xec>)
 800822a:	4604      	mov	r4, r0
 800822c:	429f      	cmp	r7, r3
 800822e:	460d      	mov	r5, r1
 8008230:	da0f      	bge.n	8008252 <scalbn+0x4a>
 8008232:	a32b      	add	r3, pc, #172	; (adr r3, 80082e0 <scalbn+0xd8>)
 8008234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008238:	f7f8 f94e 	bl	80004d8 <__aeabi_dmul>
 800823c:	e006      	b.n	800824c <scalbn+0x44>
 800823e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008242:	4296      	cmp	r6, r2
 8008244:	d10a      	bne.n	800825c <scalbn+0x54>
 8008246:	4602      	mov	r2, r0
 8008248:	f7f7 ff90 	bl	800016c <__adddf3>
 800824c:	4604      	mov	r4, r0
 800824e:	460d      	mov	r5, r1
 8008250:	e020      	b.n	8008294 <scalbn+0x8c>
 8008252:	460b      	mov	r3, r1
 8008254:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008258:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800825c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008260:	19b9      	adds	r1, r7, r6
 8008262:	4291      	cmp	r1, r2
 8008264:	dd0e      	ble.n	8008284 <scalbn+0x7c>
 8008266:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800826a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800826e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008272:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008276:	4820      	ldr	r0, [pc, #128]	; (80082f8 <scalbn+0xf0>)
 8008278:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800827c:	a31a      	add	r3, pc, #104	; (adr r3, 80082e8 <scalbn+0xe0>)
 800827e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008282:	e7d9      	b.n	8008238 <scalbn+0x30>
 8008284:	2900      	cmp	r1, #0
 8008286:	dd08      	ble.n	800829a <scalbn+0x92>
 8008288:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800828c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008290:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008294:	4620      	mov	r0, r4
 8008296:	4629      	mov	r1, r5
 8008298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800829a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800829e:	da12      	bge.n	80082c6 <scalbn+0xbe>
 80082a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80082a4:	429f      	cmp	r7, r3
 80082a6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80082aa:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80082ae:	dcdc      	bgt.n	800826a <scalbn+0x62>
 80082b0:	a30b      	add	r3, pc, #44	; (adr r3, 80082e0 <scalbn+0xd8>)
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80082ba:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80082be:	480f      	ldr	r0, [pc, #60]	; (80082fc <scalbn+0xf4>)
 80082c0:	f041 011f 	orr.w	r1, r1, #31
 80082c4:	e7b8      	b.n	8008238 <scalbn+0x30>
 80082c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082ca:	3136      	adds	r1, #54	; 0x36
 80082cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082d0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80082d4:	4620      	mov	r0, r4
 80082d6:	4629      	mov	r1, r5
 80082d8:	2200      	movs	r2, #0
 80082da:	4b09      	ldr	r3, [pc, #36]	; (8008300 <scalbn+0xf8>)
 80082dc:	e7ac      	b.n	8008238 <scalbn+0x30>
 80082de:	bf00      	nop
 80082e0:	c2f8f359 	.word	0xc2f8f359
 80082e4:	01a56e1f 	.word	0x01a56e1f
 80082e8:	8800759c 	.word	0x8800759c
 80082ec:	7e37e43c 	.word	0x7e37e43c
 80082f0:	43500000 	.word	0x43500000
 80082f4:	ffff3cb0 	.word	0xffff3cb0
 80082f8:	8800759c 	.word	0x8800759c
 80082fc:	c2f8f359 	.word	0xc2f8f359
 8008300:	3c900000 	.word	0x3c900000

08008304 <_init>:
 8008304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008306:	bf00      	nop
 8008308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830a:	bc08      	pop	{r3}
 800830c:	469e      	mov	lr, r3
 800830e:	4770      	bx	lr

08008310 <_fini>:
 8008310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008312:	bf00      	nop
 8008314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008316:	bc08      	pop	{r3}
 8008318:	469e      	mov	lr, r3
 800831a:	4770      	bx	lr

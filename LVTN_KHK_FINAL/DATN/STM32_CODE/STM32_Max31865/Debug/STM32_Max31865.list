
STM32_Max31865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004bf8  08004bf8  00005bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c50  08004c50  00006070  2**0
                  CONTENTS
  4 .ARM          00000000  08004c50  08004c50  00006070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c50  08004c50  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c50  08004c50  00005c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c54  08004c54  00005c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004c58  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000070  08004cc8  00006070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08004cc8  000062b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000070f1  00000000  00000000  00006099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d9  00000000  00000000  0000d18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  0000e968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000576  00000000  00000000  0000f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001722a  00000000  00000000  0000f636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008643  00000000  00000000  00026860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000845bf  00000000  00000000  0002eea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3462  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023e0  00000000  00000000  000b34a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000b5888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004bdc 	.word	0x08004bdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004bdc 	.word	0x08004bdc

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2f>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b98:	bf24      	itt	cs
 8000b9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ba2:	d90d      	bls.n	8000bc0 <__aeabi_d2f+0x30>
 8000ba4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bb4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb8:	bf08      	it	eq
 8000bba:	f020 0001 	biceq.w	r0, r0, #1
 8000bbe:	4770      	bx	lr
 8000bc0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bc4:	d121      	bne.n	8000c0a <__aeabi_d2f+0x7a>
 8000bc6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bca:	bfbc      	itt	lt
 8000bcc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd0:	4770      	bxlt	lr
 8000bd2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bd6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bda:	f1c2 0218 	rsb	r2, r2, #24
 8000bde:	f1c2 0c20 	rsb	ip, r2, #32
 8000be2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bea:	bf18      	it	ne
 8000bec:	f040 0001 	orrne.w	r0, r0, #1
 8000bf0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bfc:	ea40 000c 	orr.w	r0, r0, ip
 8000c00:	fa23 f302 	lsr.w	r3, r3, r2
 8000c04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c08:	e7cc      	b.n	8000ba4 <__aeabi_d2f+0x14>
 8000c0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0e:	d107      	bne.n	8000c20 <__aeabi_d2f+0x90>
 8000c10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c14:	bf1e      	ittt	ne
 8000c16:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c1a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c1e:	4770      	bxne	lr
 8000c20:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c24:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c28:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__gesf2>:
 8000c30:	f04f 3cff 	mov.w	ip, #4294967295
 8000c34:	e006      	b.n	8000c44 <__cmpsf2+0x4>
 8000c36:	bf00      	nop

08000c38 <__lesf2>:
 8000c38:	f04f 0c01 	mov.w	ip, #1
 8000c3c:	e002      	b.n	8000c44 <__cmpsf2+0x4>
 8000c3e:	bf00      	nop

08000c40 <__cmpsf2>:
 8000c40:	f04f 0c01 	mov.w	ip, #1
 8000c44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c54:	bf18      	it	ne
 8000c56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5a:	d011      	beq.n	8000c80 <__cmpsf2+0x40>
 8000c5c:	b001      	add	sp, #4
 8000c5e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c62:	bf18      	it	ne
 8000c64:	ea90 0f01 	teqne	r0, r1
 8000c68:	bf58      	it	pl
 8000c6a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c6e:	bf88      	it	hi
 8000c70:	17c8      	asrhi	r0, r1, #31
 8000c72:	bf38      	it	cc
 8000c74:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c78:	bf18      	it	ne
 8000c7a:	f040 0001 	orrne.w	r0, r0, #1
 8000c7e:	4770      	bx	lr
 8000c80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c84:	d102      	bne.n	8000c8c <__cmpsf2+0x4c>
 8000c86:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c8a:	d105      	bne.n	8000c98 <__cmpsf2+0x58>
 8000c8c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c90:	d1e4      	bne.n	8000c5c <__cmpsf2+0x1c>
 8000c92:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c96:	d0e1      	beq.n	8000c5c <__cmpsf2+0x1c>
 8000c98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_cfrcmple>:
 8000ca0:	4684      	mov	ip, r0
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	4661      	mov	r1, ip
 8000ca6:	e7ff      	b.n	8000ca8 <__aeabi_cfcmpeq>

08000ca8 <__aeabi_cfcmpeq>:
 8000ca8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000caa:	f7ff ffc9 	bl	8000c40 <__cmpsf2>
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	bf48      	it	mi
 8000cb2:	f110 0f00 	cmnmi.w	r0, #0
 8000cb6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cb8 <__aeabi_fcmpeq>:
 8000cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cbc:	f7ff fff4 	bl	8000ca8 <__aeabi_cfcmpeq>
 8000cc0:	bf0c      	ite	eq
 8000cc2:	2001      	moveq	r0, #1
 8000cc4:	2000      	movne	r0, #0
 8000cc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cca:	bf00      	nop

08000ccc <__aeabi_fcmplt>:
 8000ccc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd0:	f7ff ffea 	bl	8000ca8 <__aeabi_cfcmpeq>
 8000cd4:	bf34      	ite	cc
 8000cd6:	2001      	movcc	r0, #1
 8000cd8:	2000      	movcs	r0, #0
 8000cda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cde:	bf00      	nop

08000ce0 <__aeabi_fcmple>:
 8000ce0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ce4:	f7ff ffe0 	bl	8000ca8 <__aeabi_cfcmpeq>
 8000ce8:	bf94      	ite	ls
 8000cea:	2001      	movls	r0, #1
 8000cec:	2000      	movhi	r0, #0
 8000cee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cf2:	bf00      	nop

08000cf4 <__aeabi_fcmpge>:
 8000cf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf8:	f7ff ffd2 	bl	8000ca0 <__aeabi_cfrcmple>
 8000cfc:	bf94      	ite	ls
 8000cfe:	2001      	movls	r0, #1
 8000d00:	2000      	movhi	r0, #0
 8000d02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d06:	bf00      	nop

08000d08 <__aeabi_fcmpgt>:
 8000d08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d0c:	f7ff ffc8 	bl	8000ca0 <__aeabi_cfrcmple>
 8000d10:	bf34      	ite	cc
 8000d12:	2001      	movcc	r0, #1
 8000d14:	2000      	movcs	r0, #0
 8000d16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d1a:	bf00      	nop

08000d1c <__aeabi_f2uiz>:
 8000d1c:	0042      	lsls	r2, r0, #1
 8000d1e:	d20e      	bcs.n	8000d3e <__aeabi_f2uiz+0x22>
 8000d20:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d24:	d30b      	bcc.n	8000d3e <__aeabi_f2uiz+0x22>
 8000d26:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d2e:	d409      	bmi.n	8000d44 <__aeabi_f2uiz+0x28>
 8000d30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d38:	fa23 f002 	lsr.w	r0, r3, r2
 8000d3c:	4770      	bx	lr
 8000d3e:	f04f 0000 	mov.w	r0, #0
 8000d42:	4770      	bx	lr
 8000d44:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d48:	d101      	bne.n	8000d4e <__aeabi_f2uiz+0x32>
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	d102      	bne.n	8000d54 <__aeabi_f2uiz+0x38>
 8000d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d52:	4770      	bx	lr
 8000d54:	f04f 0000 	mov.w	r0, #0
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <MAX31865_Init>:
//P.S. Максимальная скорость spi 5 МГц.
//Также обратите внимание, что Clock Polarity(CLPOL) = Low. Clock Phase(CPHA) = 2 Edge.
/*-------------------------------------------Для работы по spi-----------------------------------------------*/

/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/
void MAX31865_Init(uint8_t num_wires) { // Hàm init khai báo loại cảm biến
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	///Не вижу особого смысла выводить полную настройку модуля, поэтому сделаем
	///небольшое упрощение для конечного пользователя
	///все, что может настроить пользователь - это выбрать тип подключения
	///2,3 или 4 проводное
	/// \param num_wires - тип подключения датчика 2,3 или 4 проводное
	uint8_t MAX31865_Reinitialization_cnt = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	73fb      	strb	r3, [r7, #15]
	MAX31865_Sensor_Error = 0;
 8000d6a:	4b23      	ldr	r3, [pc, #140]	@ (8000df8 <MAX31865_Init+0x9c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
	uint8_t MAX31865_Configuration_register_write[] = { 0x80, 0x00 };
 8000d70:	2380      	movs	r3, #128	@ 0x80
 8000d72:	81bb      	strh	r3, [r7, #12]
	if (num_wires == 2 || num_wires == 4) {
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d002      	beq.n	8000d80 <MAX31865_Init+0x24>
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d102      	bne.n	8000d86 <MAX31865_Init+0x2a>
		MAX31865_Configuration_register_write[1] = 0xC3; //0xC3
 8000d80:	23c3      	movs	r3, #195	@ 0xc3
 8000d82:	737b      	strb	r3, [r7, #13]
 8000d84:	e004      	b.n	8000d90 <MAX31865_Init+0x34>
	} else if (num_wires == 3) {
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d101      	bne.n	8000d90 <MAX31865_Init+0x34>
		MAX31865_Configuration_register_write[1] = 0xD3; //0xD3
 8000d8c:	23d3      	movs	r3, #211	@ 0xd3
 8000d8e:	737b      	strb	r3, [r7, #13]
	}
	cs_set();
 8000d90:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <MAX31865_Init+0xa0>)
 8000d92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d96:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, MAX31865_Configuration_register_write, 2, 100); // gửi 2 byte xuống MAX với thời gian chờ tối đa 100ms
 8000d98:	f107 010c 	add.w	r1, r7, #12
 8000d9c:	2364      	movs	r3, #100	@ 0x64
 8000d9e:	2202      	movs	r2, #2
 8000da0:	4817      	ldr	r0, [pc, #92]	@ (8000e00 <MAX31865_Init+0xa4>)
 8000da2:	f002 faa5 	bl	80032f0 <HAL_SPI_Transmit>
	cs_reset();
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <MAX31865_Init+0xa0>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	611a      	str	r2, [r3, #16]
	//Дабы достучаться до датчика после подачи питания, т.к. с первого раза инициализация может и не пройти, заведем цикл.
	while (MAX31865_Configuration_info() != 0xD1 || MAX31865_Configuration_info() != 0xC1) { // gọi hàm info, hàm info có nhiệm vụ gửi byte 0x00 yêu cầu Max gửi lại
 8000dac:	e013      	b.n	8000dd6 <MAX31865_Init+0x7a>
																								//tín hiệu đã gửi từ 2 byte trên check thử đúng chưa. Nếu chưa đúng thì gửi lại 2 byte
		MAX31865_Reinitialization_cnt++;
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	3301      	adds	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]

		cs_set();
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <MAX31865_Init+0xa0>)
 8000db6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000dba:	611a      	str	r2, [r3, #16]
		HAL_SPI_Transmit(&hspi1, MAX31865_Configuration_register_write, 2, 100);
 8000dbc:	f107 010c 	add.w	r1, r7, #12
 8000dc0:	2364      	movs	r3, #100	@ 0x64
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	480e      	ldr	r0, [pc, #56]	@ (8000e00 <MAX31865_Init+0xa4>)
 8000dc6:	f002 fa93 	bl	80032f0 <HAL_SPI_Transmit>
		cs_reset();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <MAX31865_Init+0xa0>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	611a      	str	r2, [r3, #16]

		if (MAX31865_Reinitialization_cnt == 100) {
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	2b64      	cmp	r3, #100	@ 0x64
 8000dd4:	d00a      	beq.n	8000dec <MAX31865_Init+0x90>
	while (MAX31865_Configuration_info() != 0xD1 || MAX31865_Configuration_info() != 0xC1) { // gọi hàm info, hàm info có nhiệm vụ gửi byte 0x00 yêu cầu Max gửi lại
 8000dd6:	f000 f815 	bl	8000e04 <MAX31865_Configuration_info>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2bd1      	cmp	r3, #209	@ 0xd1
 8000dde:	d1e6      	bne.n	8000dae <MAX31865_Init+0x52>
 8000de0:	f000 f810 	bl	8000e04 <MAX31865_Configuration_info>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2bc1      	cmp	r3, #193	@ 0xc1
 8000de8:	d1e1      	bne.n	8000dae <MAX31865_Init+0x52>
			break;
		}

	}

}
 8000dea:	e000      	b.n	8000dee <MAX31865_Init+0x92>
			break;
 8000dec:	bf00      	nop
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000098 	.word	0x20000098
 8000dfc:	40010800 	.word	0x40010800
 8000e00:	200000c4 	.word	0x200000c4

08000e04 <MAX31865_Configuration_info>:
/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/

/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/
uint8_t MAX31865_Configuration_info(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	///Функция получения информации о конфигурации модуля MAX31865
	///Возвращает значение конфигурации.
	///Не удивляйтесь, если отправите при инициализации 0xC3, а получите 0xC1
	///(см. datasheet MAX31865 стр.14 "The fault status clear bit D1, self-clears to 0.")
	uint8_t read_data = 0x00;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_Configuration = 0x00;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	71bb      	strb	r3, [r7, #6]
	cs_set();
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <MAX31865_Configuration_info+0x40>)
 8000e14:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e18:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, &read_data, 1, 100);
 8000e1a:	1df9      	adds	r1, r7, #7
 8000e1c:	2364      	movs	r3, #100	@ 0x64
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4809      	ldr	r0, [pc, #36]	@ (8000e48 <MAX31865_Configuration_info+0x44>)
 8000e22:	f002 fa65 	bl	80032f0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &MAX31865_Configuration, 1, 100);
 8000e26:	1db9      	adds	r1, r7, #6
 8000e28:	2364      	movs	r3, #100	@ 0x64
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4806      	ldr	r0, [pc, #24]	@ (8000e48 <MAX31865_Configuration_info+0x44>)
 8000e2e:	f002 fba3 	bl	8003578 <HAL_SPI_Receive>
	cs_reset();
 8000e32:	4b04      	ldr	r3, [pc, #16]	@ (8000e44 <MAX31865_Configuration_info+0x40>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	611a      	str	r2, [r3, #16]
	return MAX31865_Configuration;
 8000e38:	79bb      	ldrb	r3, [r7, #6]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40010800 	.word	0x40010800
 8000e48:	200000c4 	.word	0x200000c4
 8000e4c:	00000000 	.word	0x00000000

08000e50 <MAX31865_Get_Temperature>:
/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/

/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/
double MAX31865_Get_Temperature(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
		uint8_t Fault_Status; //Статус неисправности
	};

	struct rx_data_MAX31865 MAX31865_receieve_data;

	uint8_t MAX31865_start_address_of_the_poll = 0x01; //Адрес регистра, с которого начнем чтение данных
 8000e56:	2301      	movs	r3, #1
 8000e58:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_rx_buffer[7]; //буфер, куда будем складывать приходящие данные
	cs_set();
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f18 <MAX31865_Get_Temperature+0xc8>)
 8000e5c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e60:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, &MAX31865_start_address_of_the_poll, 1, 100);
 8000e62:	1df9      	adds	r1, r7, #7
 8000e64:	2364      	movs	r3, #100	@ 0x64
 8000e66:	2201      	movs	r2, #1
 8000e68:	482c      	ldr	r0, [pc, #176]	@ (8000f1c <MAX31865_Get_Temperature+0xcc>)
 8000e6a:	f002 fa41 	bl	80032f0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, MAX31865_rx_buffer, 7, 100);
 8000e6e:	4639      	mov	r1, r7
 8000e70:	2364      	movs	r3, #100	@ 0x64
 8000e72:	2207      	movs	r2, #7
 8000e74:	4829      	ldr	r0, [pc, #164]	@ (8000f1c <MAX31865_Get_Temperature+0xcc>)
 8000e76:	f002 fb7f 	bl	8003578 <HAL_SPI_Receive>
	cs_reset();
 8000e7a:	4b27      	ldr	r3, [pc, #156]	@ (8000f18 <MAX31865_Get_Temperature+0xc8>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	611a      	str	r2, [r3, #16]
	MAX31865_receieve_data.RTD_Resistance_Registers = ((MAX31865_rx_buffer[0] << 8) | MAX31865_rx_buffer[1]) >> 1; //Данные регистров сопротивления byte 0 đại diện cho thanh ghi 8 bit cao của gí trị điện trở,
 8000e80:	783b      	ldrb	r3, [r7, #0]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	787a      	ldrb	r2, [r7, #1]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	105b      	asrs	r3, r3, #1
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	813b      	strh	r3, [r7, #8]
	MAX31865_receieve_data.High_Fault_Threshold = ((MAX31865_rx_buffer[2] << 8) | MAX31865_rx_buffer[3]) >> 1; //Данные верхнего порого неисправности //byte 1 đại diện cho 8 bit thấp của giá trị trở. Dịch 16 bit sang trái để loại bỏ bit thừa
 8000e8e:	78bb      	ldrb	r3, [r7, #2]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	78fa      	ldrb	r2, [r7, #3]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	105b      	asrs	r3, r3, #1
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	817b      	strh	r3, [r7, #10]
	MAX31865_receieve_data.Low_Fault_Threshold = (MAX31865_rx_buffer[4] << 8) | MAX31865_rx_buffer[5]; //Данные нижнего порога неисправности
 8000e9c:	793b      	ldrb	r3, [r7, #4]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	797b      	ldrb	r3, [r7, #5]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	81bb      	strh	r3, [r7, #12]
	MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6]; //Статус неисправности
 8000eae:	79bb      	ldrb	r3, [r7, #6]
 8000eb0:	73bb      	strb	r3, [r7, #14]
	if (MAX31865_receieve_data.Fault_Status > 0x00) { // khi thanh ghi lỗi gặp lỗi thì giá trị của thanh ghi sẽ khác 0
 8000eb2:	7bbb      	ldrb	r3, [r7, #14]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d008      	beq.n	8000eca <MAX31865_Get_Temperature+0x7a>
														// lúc này cần init lại để xóa bit D1, lúc này thanh ghi lỗi cũng tự xóa về 0x00

		/*--------------Здесь Ваши действия по реагированию на ошибку датчика---------------*/
		MAX31865_Sensor_Error = 1;
 8000eb8:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <MAX31865_Get_Temperature+0xd0>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
		//printf("Sensor Error!\r\n");

		/*----Автоматический сброс ошибки----*/
		MAX31865_Init(3);
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f7ff ff4c 	bl	8000d5c <MAX31865_Init>
		MAX31865_Sensor_Error = 0;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <MAX31865_Get_Temperature+0xd0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]

	//printf("RTD Resistance Registers = %X\r\n", MAX31865_receieve_data.RTD_Resistance_Registers);
	//printf("Hight Fault Treshold = %X\r\n", MAX31865_receieve_data.High_Fault_Threshold);
	//printf("Low Fault Treshold = %X\r\n", MAX31865_receieve_data.Low_Fault_Threshold);
	//printf("Fault status = %X\r\n", MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6]);
	data = ((double) MAX31865_receieve_data.RTD_Resistance_Registers * MAX31865_Rref ) / (double) 32768.0; // Replace 4000 by 400 for PT100
 8000eca:	893b      	ldrh	r3, [r7, #8]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fb35 	bl	800053c <__aeabi_ui2d>
 8000ed2:	a30f      	add	r3, pc, #60	@ (adr r3, 8000f10 <MAX31865_Get_Temperature+0xc0>)
 8000ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed8:	f7ff fbaa 	bl	8000630 <__aeabi_dmul>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MAX31865_Get_Temperature+0xd4>)
 8000eea:	f7ff fccb 	bl	8000884 <__aeabi_ddiv>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//printf("Rrtd = %lf\n", data); //công thức giá trị điện trở hiện tại = (ADC16bit*Rref)/2 mũ 15
	return MAX31865_Get_Temperature_math(data);
 8000ef6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000efa:	f000 f815 	bl	8000f28 <MAX31865_Get_Temperature_math>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
}
 8000f02:	4610      	mov	r0, r2
 8000f04:	4619      	mov	r1, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	f3af 8000 	nop.w
 8000f10:	00000000 	.word	0x00000000
 8000f14:	407a2800 	.word	0x407a2800
 8000f18:	40010800 	.word	0x40010800
 8000f1c:	200000c4 	.word	0x200000c4
 8000f20:	20000098 	.word	0x20000098
 8000f24:	40e00000 	.word	0x40e00000

08000f28 <MAX31865_Get_Temperature_math>:
/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/

/*===============================================ПРЕОБРАЗОВАНИЕ СОПРОТИВЛЕНИЯ В ТЕМПЕРАТУРУ, СОГЛАСНО ГОСТ 6651-2009===============================================*/
double MAX31865_Get_Temperature_math(double PT100_Resistance) {
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	e9c7 0100 	strd	r0, r1, [r7]
	if (PT100_Resistance >= (double) 100.0) {
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	4b72      	ldr	r3, [pc, #456]	@ (8001100 <MAX31865_Get_Temperature_math+0x1d8>)
 8000f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f3c:	f7ff fdfe 	bl	8000b3c <__aeabi_dcmpge>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d03b      	beq.n	8000fbe <MAX31865_Get_Temperature_math+0x96>
		double MAX31865_math_Discriminant = (double) 0.00001527480889 - ((double) -0.00000231 * (1 - (PT100_Resistance / MAX31865_PT100_R0 )));
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001100 <MAX31865_Get_Temperature_math+0x1d8>)
 8000f4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f50:	f7ff fc98 	bl	8000884 <__aeabi_ddiv>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	f04f 0000 	mov.w	r0, #0
 8000f5c:	4969      	ldr	r1, [pc, #420]	@ (8001104 <MAX31865_Get_Temperature_math+0x1dc>)
 8000f5e:	f7ff f9af 	bl	80002c0 <__aeabi_dsub>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4610      	mov	r0, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	a351      	add	r3, pc, #324	@ (adr r3, 80010b0 <MAX31865_Get_Temperature_math+0x188>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff fb5e 	bl	8000630 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	a34e      	add	r3, pc, #312	@ (adr r3, 80010b8 <MAX31865_Get_Temperature_math+0x190>)
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	f7ff f99f 	bl	80002c4 <__adddf3>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		MAX31865_PT100_T = ((double) -0.0039083 + sqrt(MAX31865_math_Discriminant)) / (double) -0.000001155;
 8000f8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f92:	f002 ff59 	bl	8003e48 <sqrt>
 8000f96:	a34a      	add	r3, pc, #296	@ (adr r3, 80010c0 <MAX31865_Get_Temperature_math+0x198>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	f7ff f990 	bl	80002c0 <__aeabi_dsub>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	a347      	add	r3, pc, #284	@ (adr r3, 80010c8 <MAX31865_Get_Temperature_math+0x1a0>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	f7ff fc69 	bl	8000884 <__aeabi_ddiv>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4954      	ldr	r1, [pc, #336]	@ (8001108 <MAX31865_Get_Temperature_math+0x1e0>)
 8000fb8:	e9c1 2300 	strd	r2, r3, [r1]
 8000fbc:	e06d      	b.n	800109a <MAX31865_Get_Temperature_math+0x172>
	} else {
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	4b52      	ldr	r3, [pc, #328]	@ (800110c <MAX31865_Get_Temperature_math+0x1e4>)
 8000fc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fc8:	f002 fed6 	bl	8003d78 <pow>
 8000fcc:	a340      	add	r3, pc, #256	@ (adr r3, 80010d0 <MAX31865_Get_Temperature_math+0x1a8>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff fb2d 	bl	8000630 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4614      	mov	r4, r2
 8000fdc:	461d      	mov	r5, r3
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	4b4b      	ldr	r3, [pc, #300]	@ (8001110 <MAX31865_Get_Temperature_math+0x1e8>)
 8000fe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fe8:	f002 fec6 	bl	8003d78 <pow>
 8000fec:	a33a      	add	r3, pc, #232	@ (adr r3, 80010d8 <MAX31865_Get_Temperature_math+0x1b0>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	f7ff fb1d 	bl	8000630 <__aeabi_dmul>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	4629      	mov	r1, r5
 8000ffe:	f7ff f95f 	bl	80002c0 <__aeabi_dsub>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4614      	mov	r4, r2
 8001008:	461d      	mov	r5, r3
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	4b41      	ldr	r3, [pc, #260]	@ (8001114 <MAX31865_Get_Temperature_math+0x1ec>)
 8001010:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001014:	f002 feb0 	bl	8003d78 <pow>
 8001018:	a331      	add	r3, pc, #196	@ (adr r3, 80010e0 <MAX31865_Get_Temperature_math+0x1b8>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff fb07 	bl	8000630 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4620      	mov	r0, r4
 8001028:	4629      	mov	r1, r5
 800102a:	f7ff f949 	bl	80002c0 <__aeabi_dsub>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4614      	mov	r4, r2
 8001034:	461d      	mov	r5, r3
				+ (double) 0.002320232987 * pow(PT100_Resistance, 2) + (double) 2.229927824035 * PT100_Resistance - (double) 242.090854986215;
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800103e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001042:	f002 fe99 	bl	8003d78 <pow>
 8001046:	a328      	add	r3, pc, #160	@ (adr r3, 80010e8 <MAX31865_Get_Temperature_math+0x1c0>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff faf0 	bl	8000630 <__aeabi_dmul>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4620      	mov	r0, r4
 8001056:	4629      	mov	r1, r5
 8001058:	f7ff f934 	bl	80002c4 <__adddf3>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4614      	mov	r4, r2
 8001062:	461d      	mov	r5, r3
 8001064:	a322      	add	r3, pc, #136	@ (adr r3, 80010f0 <MAX31865_Get_Temperature_math+0x1c8>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800106e:	f7ff fadf 	bl	8000630 <__aeabi_dmul>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4620      	mov	r0, r4
 8001078:	4629      	mov	r1, r5
 800107a:	f7ff f923 	bl	80002c4 <__adddf3>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	a31c      	add	r3, pc, #112	@ (adr r3, 80010f8 <MAX31865_Get_Temperature_math+0x1d0>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	f7ff f918 	bl	80002c0 <__aeabi_dsub>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 8001094:	491c      	ldr	r1, [pc, #112]	@ (8001108 <MAX31865_Get_Temperature_math+0x1e0>)
 8001096:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return MAX31865_PT100_T;
 800109a:	4b1b      	ldr	r3, [pc, #108]	@ (8001108 <MAX31865_Get_Temperature_math+0x1e0>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bdb0      	pop	{r4, r5, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	f3af 8000 	nop.w
 80010b0:	ee19ce88 	.word	0xee19ce88
 80010b4:	3ec360af 	.word	0x3ec360af
 80010b8:	dfc928d8 	.word	0xdfc928d8
 80010bc:	3ef0044c 	.word	0x3ef0044c
 80010c0:	4aed641c 	.word	0x4aed641c
 80010c4:	3f700226 	.word	0x3f700226
 80010c8:	ee19ce88 	.word	0xee19ce88
 80010cc:	beb360af 	.word	0xbeb360af
 80010d0:	e63e6cde 	.word	0xe63e6cde
 80010d4:	3df28de3 	.word	0x3df28de3
 80010d8:	5d50ae3a 	.word	0x5d50ae3a
 80010dc:	3e71c852 	.word	0x3e71c852
 80010e0:	6e664b7f 	.word	0x6e664b7f
 80010e4:	3e88c80b 	.word	0x3e88c80b
 80010e8:	998b63de 	.word	0x998b63de
 80010ec:	3f6301e1 	.word	0x3f6301e1
 80010f0:	66255dbb 	.word	0x66255dbb
 80010f4:	4001d6e4 	.word	0x4001d6e4
 80010f8:	48b74f1a 	.word	0x48b74f1a
 80010fc:	406e42e8 	.word	0x406e42e8
 8001100:	40590000 	.word	0x40590000
 8001104:	3ff00000 	.word	0x3ff00000
 8001108:	20000090 	.word	0x20000090
 800110c:	40140000 	.word	0x40140000
 8001110:	40100000 	.word	0x40100000
 8001114:	40080000 	.word	0x40080000

08001118 <readTemperatureNonBlocking>:

bool fan_mode = 0;	// 0 mean auto control, 1 mean manual control
bool fan_status = 0; // 0 mean off, 1 mean on

void readTemperatureNonBlocking()
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
    uint32_t currentMillis = HAL_GetTick(); // Lấy th�?i gian hiện tại
 800111e:	f000 fb91 	bl	8001844 <HAL_GetTick>
 8001122:	6078      	str	r0, [r7, #4]

    if (currentMillis - previousMillis >= interval)
 8001124:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <readTemperatureNonBlocking+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001130:	4293      	cmp	r3, r2
 8001132:	d30d      	bcc.n	8001150 <readTemperatureNonBlocking+0x38>
    {
        previousMillis = currentMillis; // Cập nhật th�?i gian mới nhất
 8001134:	4a08      	ldr	r2, [pc, #32]	@ (8001158 <readTemperatureNonBlocking+0x40>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6013      	str	r3, [r2, #0]

        // �?�?c nhiệt độ từ cảm biến PT100
        PT100_Temperature = MAX31865_Get_Temperature();
 800113a:	f7ff fe89 	bl	8000e50 <MAX31865_Get_Temperature>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fd23 	bl	8000b90 <__aeabi_d2f>
 800114a:	4603      	mov	r3, r0
 800114c:	4a03      	ldr	r2, [pc, #12]	@ (800115c <readTemperatureNonBlocking+0x44>)
 800114e:	6013      	str	r3, [r2, #0]
    }
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000016c 	.word	0x2000016c
 800115c:	2000011c 	.word	0x2000011c

08001160 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001168:	4b08      	ldr	r3, [pc, #32]	@ (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800116a:	4a09      	ldr	r2, [pc, #36]	@ (8001190 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800116c:	2100      	movs	r1, #0
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 fe49 	bl	8001e06 <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 2)
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d102      	bne.n	8001182 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		datacheck = 1;
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800117e:	2201      	movs	r2, #1
 8001180:	601a      	str	r2, [r3, #0]
	}
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2000015c 	.word	0x2000015c
 8001190:	20000138 	.word	0x20000138
 8001194:	20000170 	.word	0x20000170

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119c:	f000 fafa 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a0:	f000 f88e 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a4:	f000 f95c 	bl	8001460 <MX_GPIO_Init>
  MX_SPI1_Init();
 80011a8:	f000 f924 	bl	80013f4 <MX_SPI1_Init>
  MX_CAN_Init();
 80011ac:	f000 f8ce 	bl	800134c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 80011b0:	4838      	ldr	r0, [pc, #224]	@ (8001294 <main+0xfc>)
 80011b2:	f000 fd15 	bl	8001be0 <HAL_CAN_Start>

  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80011b6:	2102      	movs	r1, #2
 80011b8:	4836      	ldr	r0, [pc, #216]	@ (8001294 <main+0xfc>)
 80011ba:	f000 ff45 	bl	8002048 <HAL_CAN_ActivateNotification>


  TxHeader.DLC = 2;  // data length
 80011be:	4b36      	ldr	r3, [pc, #216]	@ (8001298 <main+0x100>)
 80011c0:	2202      	movs	r2, #2
 80011c2:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80011c4:	4b34      	ldr	r3, [pc, #208]	@ (8001298 <main+0x100>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80011ca:	4b33      	ldr	r3, [pc, #204]	@ (8001298 <main+0x100>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446;  // ID
 80011d0:	4b31      	ldr	r3, [pc, #196]	@ (8001298 <main+0x100>)
 80011d2:	f240 4246 	movw	r2, #1094	@ 0x446
 80011d6:	601a      	str	r2, [r3, #0]
  //TxData[1] = 40;    // loop rep

  //HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);


  PT100_Temperature = 0;
 80011d8:	4b30      	ldr	r3, [pc, #192]	@ (800129c <main+0x104>)
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
  MAX31865_Init(3);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f7ff fdbb 	bl	8000d5c <MAX31865_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  readTemperatureNonBlocking();
 80011e6:	f7ff ff97 	bl	8001118 <readTemperatureNonBlocking>
	  if(RxData[0] == 0)
 80011ea:	4b2d      	ldr	r3, [pc, #180]	@ (80012a0 <main+0x108>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d116      	bne.n	8001220 <main+0x88>
	  {
		  if(PT100_Temperature > 33)
 80011f2:	4b2a      	ldr	r3, [pc, #168]	@ (800129c <main+0x104>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	492b      	ldr	r1, [pc, #172]	@ (80012a4 <main+0x10c>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fd85 	bl	8000d08 <__aeabi_fcmpgt>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d006      	beq.n	8001212 <main+0x7a>
		  {
			  HAL_GPIO_WritePin(GPIOA, Fan_Relay_Pin, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800120a:	4827      	ldr	r0, [pc, #156]	@ (80012a8 <main+0x110>)
 800120c:	f001 fbf6 	bl	80029fc <HAL_GPIO_WritePin>
 8001210:	e017      	b.n	8001242 <main+0xaa>
		  }
		  else
		  {
 			  HAL_GPIO_WritePin(GPIOA, Fan_Relay_Pin, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001218:	4823      	ldr	r0, [pc, #140]	@ (80012a8 <main+0x110>)
 800121a:	f001 fbef 	bl	80029fc <HAL_GPIO_WritePin>
 800121e:	e010      	b.n	8001242 <main+0xaa>
		  }
	  }
	  else
	  {
		  if(RxData[1] == 0)
 8001220:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <main+0x108>)
 8001222:	785b      	ldrb	r3, [r3, #1]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d106      	bne.n	8001236 <main+0x9e>
		  {
			  HAL_GPIO_WritePin(GPIOA, Fan_Relay_Pin, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800122e:	481e      	ldr	r0, [pc, #120]	@ (80012a8 <main+0x110>)
 8001230:	f001 fbe4 	bl	80029fc <HAL_GPIO_WritePin>
 8001234:	e005      	b.n	8001242 <main+0xaa>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(GPIOA, Fan_Relay_Pin, 1);
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800123c:	481a      	ldr	r0, [pc, #104]	@ (80012a8 <main+0x110>)
 800123e:	f001 fbdd 	bl	80029fc <HAL_GPIO_WritePin>
		  }

	  }


	  if (datacheck)
 8001242:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <main+0x114>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0cd      	beq.n	80011e6 <main+0x4e>
	  {
		  datacheck = 0;
 800124a:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <main+0x114>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]

		  temp = (uint32_t)(PT100_Temperature * 100);  // Nhân với 100 để giữ 2 chữ số thập phân
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <main+0x104>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4916      	ldr	r1, [pc, #88]	@ (80012b0 <main+0x118>)
 8001256:	4618      	mov	r0, r3
 8001258:	f7fe ff7a 	bl	8000150 <__aeabi_fmul>
 800125c:	4603      	mov	r3, r0
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fd5c 	bl	8000d1c <__aeabi_f2uiz>
 8001264:	4603      	mov	r3, r0
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <main+0x11c>)
 800126a:	801a      	strh	r2, [r3, #0]

		  // Tách thành 2 phần 16-bit
		  TxData[0] = (uint8_t)(temp >> 8);   // Lấy byte cao
 800126c:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <main+0x11c>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	b29b      	uxth	r3, r3
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <main+0x120>)
 8001278:	701a      	strb	r2, [r3, #0]
		  TxData[1] = (uint8_t)(temp & 0xFF); // Lấy byte thấp
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <main+0x11c>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <main+0x120>)
 8001282:	705a      	strb	r2, [r3, #1]

		  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001284:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <main+0x124>)
 8001286:	4a0c      	ldr	r2, [pc, #48]	@ (80012b8 <main+0x120>)
 8001288:	4903      	ldr	r1, [pc, #12]	@ (8001298 <main+0x100>)
 800128a:	4802      	ldr	r0, [pc, #8]	@ (8001294 <main+0xfc>)
 800128c:	f000 fcec 	bl	8001c68 <HAL_CAN_AddTxMessage>
	  readTemperatureNonBlocking();
 8001290:	e7a9      	b.n	80011e6 <main+0x4e>
 8001292:	bf00      	nop
 8001294:	2000009c 	.word	0x2000009c
 8001298:	20000120 	.word	0x20000120
 800129c:	2000011c 	.word	0x2000011c
 80012a0:	2000015c 	.word	0x2000015c
 80012a4:	42040000 	.word	0x42040000
 80012a8:	40010800 	.word	0x40010800
 80012ac:	20000170 	.word	0x20000170
 80012b0:	42c80000 	.word	0x42c80000
 80012b4:	20000164 	.word	0x20000164
 80012b8:	20000154 	.word	0x20000154
 80012bc:	20000168 	.word	0x20000168

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b090      	sub	sp, #64	@ 0x40
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0318 	add.w	r3, r7, #24
 80012ca:	2228      	movs	r2, #40	@ 0x28
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 fd1f 	bl	8003d12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f0:	2301      	movs	r3, #1
 80012f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f4:	2302      	movs	r3, #2
 80012f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012fe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001302:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001304:	f107 0318 	add.w	r3, r7, #24
 8001308:	4618      	mov	r0, r3
 800130a:	f001 fb8f 	bl	8002a2c <HAL_RCC_OscConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001314:	f000 f906 	bl	8001524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001318:	230f      	movs	r3, #15
 800131a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131c:	2302      	movs	r3, #2
 800131e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001328:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2102      	movs	r1, #2
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fdfc 	bl	8002f30 <HAL_RCC_ClockConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800133e:	f000 f8f1 	bl	8001524 <Error_Handler>
  }
}
 8001342:	bf00      	nop
 8001344:	3740      	adds	r7, #64	@ 0x40
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001352:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <MX_CAN_Init+0x9c>)
 8001354:	4a25      	ldr	r2, [pc, #148]	@ (80013ec <MX_CAN_Init+0xa0>)
 8001356:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8001358:	4b23      	ldr	r3, [pc, #140]	@ (80013e8 <MX_CAN_Init+0x9c>)
 800135a:	2212      	movs	r2, #18
 800135c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800135e:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <MX_CAN_Init+0x9c>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001364:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <MX_CAN_Init+0x9c>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800136a:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <MX_CAN_Init+0x9c>)
 800136c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001370:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001372:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <MX_CAN_Init+0x9c>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001378:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <MX_CAN_Init+0x9c>)
 800137a:	2200      	movs	r2, #0
 800137c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800137e:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <MX_CAN_Init+0x9c>)
 8001380:	2200      	movs	r2, #0
 8001382:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001384:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <MX_CAN_Init+0x9c>)
 8001386:	2200      	movs	r2, #0
 8001388:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800138a:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <MX_CAN_Init+0x9c>)
 800138c:	2200      	movs	r2, #0
 800138e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001390:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <MX_CAN_Init+0x9c>)
 8001392:	2200      	movs	r2, #0
 8001394:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001396:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <MX_CAN_Init+0x9c>)
 8001398:	2200      	movs	r2, #0
 800139a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800139c:	4812      	ldr	r0, [pc, #72]	@ (80013e8 <MX_CAN_Init+0x9c>)
 800139e:	f000 fa5b 	bl	8001858 <HAL_CAN_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80013a8:	f000 f8bc 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80013ac:	2301      	movs	r3, #1
 80013ae:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 12;  // which filter bank to use from the assigned ones
 80013b0:	230c      	movs	r3, #12
 80013b2:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x047<<5;		// for ESP32
 80013b8:	f44f 630e 	mov.w	r3, #2272	@ 0x8e0
 80013bc:	603b      	str	r3, [r7, #0]
    //canfilterconfig.FilterIdHigh = 0x103<<5;		// for testing
    canfilterconfig.FilterIdLow = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0xFFF<<5;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <MX_CAN_Init+0xa4>)
 80013c4:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80013ce:	2301      	movs	r3, #1
 80013d0:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80013d2:	2314      	movs	r3, #20
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80013d6:	463b      	mov	r3, r7
 80013d8:	4619      	mov	r1, r3
 80013da:	4803      	ldr	r0, [pc, #12]	@ (80013e8 <MX_CAN_Init+0x9c>)
 80013dc:	f000 fb37 	bl	8001a4e <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	@ 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2000009c 	.word	0x2000009c
 80013ec:	40006400 	.word	0x40006400
 80013f0:	0001ffe0 	.word	0x0001ffe0

080013f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013f8:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <MX_SPI1_Init+0x64>)
 80013fa:	4a18      	ldr	r2, [pc, #96]	@ (800145c <MX_SPI1_Init+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013fe:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <MX_SPI1_Init+0x64>)
 8001400:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001404:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001406:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <MX_SPI1_Init+0x64>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <MX_SPI1_Init+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <MX_SPI1_Init+0x64>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001418:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <MX_SPI1_Init+0x64>)
 800141a:	2201      	movs	r2, #1
 800141c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <MX_SPI1_Init+0x64>)
 8001420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001424:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001426:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <MX_SPI1_Init+0x64>)
 8001428:	2218      	movs	r2, #24
 800142a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800142c:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <MX_SPI1_Init+0x64>)
 800142e:	2200      	movs	r2, #0
 8001430:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <MX_SPI1_Init+0x64>)
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001438:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <MX_SPI1_Init+0x64>)
 800143a:	2200      	movs	r2, #0
 800143c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <MX_SPI1_Init+0x64>)
 8001440:	220a      	movs	r2, #10
 8001442:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001444:	4804      	ldr	r0, [pc, #16]	@ (8001458 <MX_SPI1_Init+0x64>)
 8001446:	f001 fecf 	bl	80031e8 <HAL_SPI_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001450:	f000 f868 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200000c4 	.word	0x200000c4
 800145c:	40013000 	.word	0x40013000

08001460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 0310 	add.w	r3, r7, #16
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001474:	4b28      	ldr	r3, [pc, #160]	@ (8001518 <MX_GPIO_Init+0xb8>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a27      	ldr	r2, [pc, #156]	@ (8001518 <MX_GPIO_Init+0xb8>)
 800147a:	f043 0310 	orr.w	r3, r3, #16
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b25      	ldr	r3, [pc, #148]	@ (8001518 <MX_GPIO_Init+0xb8>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0310 	and.w	r3, r3, #16
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800148c:	4b22      	ldr	r3, [pc, #136]	@ (8001518 <MX_GPIO_Init+0xb8>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a21      	ldr	r2, [pc, #132]	@ (8001518 <MX_GPIO_Init+0xb8>)
 8001492:	f043 0320 	orr.w	r3, r3, #32
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <MX_GPIO_Init+0xb8>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0320 	and.w	r3, r3, #32
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001518 <MX_GPIO_Init+0xb8>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001518 <MX_GPIO_Init+0xb8>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <MX_GPIO_Init+0xb8>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014c2:	4816      	ldr	r0, [pc, #88]	@ (800151c <MX_GPIO_Init+0xbc>)
 80014c4:	f001 fa9a 	bl	80029fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|Fan_Relay_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	f240 2101 	movw	r1, #513	@ 0x201
 80014ce:	4814      	ldr	r0, [pc, #80]	@ (8001520 <MX_GPIO_Init+0xc0>)
 80014d0:	f001 fa94 	bl	80029fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	4619      	mov	r1, r3
 80014ec:	480b      	ldr	r0, [pc, #44]	@ (800151c <MX_GPIO_Init+0xbc>)
 80014ee:	f001 f901 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin Fan_Relay_Pin */
  GPIO_InitStruct.Pin = CS_Pin|Fan_Relay_Pin;
 80014f2:	f240 2301 	movw	r3, #513	@ 0x201
 80014f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2302      	movs	r3, #2
 8001502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	4619      	mov	r1, r3
 800150a:	4805      	ldr	r0, [pc, #20]	@ (8001520 <MX_GPIO_Init+0xc0>)
 800150c:	f001 f8f2 	bl	80026f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001510:	bf00      	nop
 8001512:	3720      	adds	r7, #32
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	40011000 	.word	0x40011000
 8001520:	40010800 	.word	0x40010800

08001524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <Error_Handler+0x8>

08001530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <HAL_MspInit+0x5c>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	4a14      	ldr	r2, [pc, #80]	@ (800158c <HAL_MspInit+0x5c>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6193      	str	r3, [r2, #24]
 8001542:	4b12      	ldr	r3, [pc, #72]	@ (800158c <HAL_MspInit+0x5c>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <HAL_MspInit+0x5c>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4a0e      	ldr	r2, [pc, #56]	@ (800158c <HAL_MspInit+0x5c>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001558:	61d3      	str	r3, [r2, #28]
 800155a:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <HAL_MspInit+0x5c>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <HAL_MspInit+0x60>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <HAL_MspInit+0x60>)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	40021000 	.word	0x40021000
 8001590:	40010000 	.word	0x40010000

08001594 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a20      	ldr	r2, [pc, #128]	@ (8001630 <HAL_CAN_MspInit+0x9c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d139      	bne.n	8001628 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001634 <HAL_CAN_MspInit+0xa0>)
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001634 <HAL_CAN_MspInit+0xa0>)
 80015ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015be:	61d3      	str	r3, [r2, #28]
 80015c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <HAL_CAN_MspInit+0xa0>)
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <HAL_CAN_MspInit+0xa0>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a18      	ldr	r2, [pc, #96]	@ (8001634 <HAL_CAN_MspInit+0xa0>)
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <HAL_CAN_MspInit+0xa0>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 0310 	add.w	r3, r7, #16
 80015f6:	4619      	mov	r1, r3
 80015f8:	480f      	ldr	r0, [pc, #60]	@ (8001638 <HAL_CAN_MspInit+0xa4>)
 80015fa:	f001 f87b 	bl	80026f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001602:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	4619      	mov	r1, r3
 8001612:	4809      	ldr	r0, [pc, #36]	@ (8001638 <HAL_CAN_MspInit+0xa4>)
 8001614:	f001 f86e 	bl	80026f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	2014      	movs	r0, #20
 800161e:	f001 f832 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001622:	2014      	movs	r0, #20
 8001624:	f001 f84b 	bl	80026be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001628:	bf00      	nop
 800162a:	3720      	adds	r7, #32
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40006400 	.word	0x40006400
 8001634:	40021000 	.word	0x40021000
 8001638:	40010800 	.word	0x40010800

0800163c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a1b      	ldr	r2, [pc, #108]	@ (80016c4 <HAL_SPI_MspInit+0x88>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d12f      	bne.n	80016bc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800165c:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <HAL_SPI_MspInit+0x8c>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a19      	ldr	r2, [pc, #100]	@ (80016c8 <HAL_SPI_MspInit+0x8c>)
 8001662:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <HAL_SPI_MspInit+0x8c>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <HAL_SPI_MspInit+0x8c>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a13      	ldr	r2, [pc, #76]	@ (80016c8 <HAL_SPI_MspInit+0x8c>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <HAL_SPI_MspInit+0x8c>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800168c:	23a0      	movs	r3, #160	@ 0xa0
 800168e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	4619      	mov	r1, r3
 800169e:	480b      	ldr	r0, [pc, #44]	@ (80016cc <HAL_SPI_MspInit+0x90>)
 80016a0:	f001 f828 	bl	80026f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016a4:	2340      	movs	r3, #64	@ 0x40
 80016a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4619      	mov	r1, r3
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <HAL_SPI_MspInit+0x90>)
 80016b8:	f001 f81c 	bl	80026f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016bc:	bf00      	nop
 80016be:	3720      	adds	r7, #32
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40013000 	.word	0x40013000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010800 	.word	0x40010800

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <NMI_Handler+0x4>

080016d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <MemManage_Handler+0x4>

080016e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001720:	f000 f87e 	bl	8001820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800172c:	4802      	ldr	r0, [pc, #8]	@ (8001738 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800172e:	f000 fcb0 	bl	8002092 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000009c 	.word	0x2000009c

0800173c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001748:	f7ff fff8 	bl	800173c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800174c:	480b      	ldr	r0, [pc, #44]	@ (800177c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800174e:	490c      	ldr	r1, [pc, #48]	@ (8001780 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001750:	4a0c      	ldr	r2, [pc, #48]	@ (8001784 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a09      	ldr	r2, [pc, #36]	@ (8001788 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001764:	4c09      	ldr	r4, [pc, #36]	@ (800178c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001772:	f002 fadd 	bl	8003d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001776:	f7ff fd0f 	bl	8001198 <main>
  bx lr
 800177a:	4770      	bx	lr
  ldr r0, =_sdata
 800177c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001780:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001784:	08004c58 	.word	0x08004c58
  ldr r2, =_sbss
 8001788:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800178c:	200002b0 	.word	0x200002b0

08001790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC1_2_IRQHandler>
	...

08001794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <HAL_Init+0x28>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a07      	ldr	r2, [pc, #28]	@ (80017bc <HAL_Init+0x28>)
 800179e:	f043 0310 	orr.w	r3, r3, #16
 80017a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f000 ff63 	bl	8002670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017aa:	200f      	movs	r0, #15
 80017ac:	f000 f808 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b0:	f7ff febe 	bl	8001530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40022000 	.word	0x40022000

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <HAL_InitTick+0x54>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <HAL_InitTick+0x58>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 ff7b 	bl	80026da <HAL_SYSTICK_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00e      	b.n	800180c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d80a      	bhi.n	800180a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f000 ff43 	bl	8002686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001800:	4a06      	ldr	r2, [pc, #24]	@ (800181c <HAL_InitTick+0x5c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000000 	.word	0x20000000
 8001818:	20000008 	.word	0x20000008
 800181c:	20000004 	.word	0x20000004

08001820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b05      	ldr	r3, [pc, #20]	@ (800183c <HAL_IncTick+0x1c>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <HAL_IncTick+0x20>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a03      	ldr	r2, [pc, #12]	@ (8001840 <HAL_IncTick+0x20>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	20000008 	.word	0x20000008
 8001840:	20000174 	.word	0x20000174

08001844 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return uwTick;
 8001848:	4b02      	ldr	r3, [pc, #8]	@ (8001854 <HAL_GetTick+0x10>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	20000174 	.word	0x20000174

08001858 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0ed      	b.n	8001a46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fe8c 	bl	8001594 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800188c:	f7ff ffda 	bl	8001844 <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001892:	e012      	b.n	80018ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001894:	f7ff ffd6 	bl	8001844 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b0a      	cmp	r3, #10
 80018a0:	d90b      	bls.n	80018ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2205      	movs	r2, #5
 80018b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0c5      	b.n	8001a46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0e5      	beq.n	8001894 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0202 	bic.w	r2, r2, #2
 80018d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d8:	f7ff ffb4 	bl	8001844 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018de:	e012      	b.n	8001906 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018e0:	f7ff ffb0 	bl	8001844 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b0a      	cmp	r3, #10
 80018ec:	d90b      	bls.n	8001906 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2205      	movs	r2, #5
 80018fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e09f      	b.n	8001a46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e5      	bne.n	80018e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7e1b      	ldrb	r3, [r3, #24]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d108      	bne.n	800192e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e007      	b.n	800193e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	7e5b      	ldrb	r3, [r3, #25]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d108      	bne.n	8001958 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e007      	b.n	8001968 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001966:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7e9b      	ldrb	r3, [r3, #26]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d108      	bne.n	8001982 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0220 	orr.w	r2, r2, #32
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e007      	b.n	8001992 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0220 	bic.w	r2, r2, #32
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7edb      	ldrb	r3, [r3, #27]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d108      	bne.n	80019ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0210 	bic.w	r2, r2, #16
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e007      	b.n	80019bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0210 	orr.w	r2, r2, #16
 80019ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7f1b      	ldrb	r3, [r3, #28]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d108      	bne.n	80019d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0208 	orr.w	r2, r2, #8
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e007      	b.n	80019e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0208 	bic.w	r2, r2, #8
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7f5b      	ldrb	r3, [r3, #29]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d108      	bne.n	8001a00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0204 	orr.w	r2, r2, #4
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	e007      	b.n	8001a10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0204 	bic.w	r2, r2, #4
 8001a0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	ea42 0103 	orr.w	r1, r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	1e5a      	subs	r2, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b087      	sub	sp, #28
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a64:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a66:	7cfb      	ldrb	r3, [r7, #19]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d003      	beq.n	8001a74 <HAL_CAN_ConfigFilter+0x26>
 8001a6c:	7cfb      	ldrb	r3, [r7, #19]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	f040 80aa 	bne.w	8001bc8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a7a:	f043 0201 	orr.w	r2, r3, #1
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	f003 031f 	and.w	r3, r3, #31
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d123      	bne.n	8001af6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	401a      	ands	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ad0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3248      	adds	r2, #72	@ 0x48
 8001ad6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aec:	6979      	ldr	r1, [r7, #20]
 8001aee:	3348      	adds	r3, #72	@ 0x48
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d122      	bne.n	8001b44 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b1e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3248      	adds	r2, #72	@ 0x48
 8001b24:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b38:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b3a:	6979      	ldr	r1, [r7, #20]
 8001b3c:	3348      	adds	r3, #72	@ 0x48
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	440b      	add	r3, r1
 8001b42:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001b5e:	e007      	b.n	8001b70 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001b8a:	e007      	b.n	8001b9c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	431a      	orrs	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d107      	bne.n	8001bb4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001bba:	f023 0201 	bic.w	r2, r3, #1
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e006      	b.n	8001bd6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bcc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
  }
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	371c      	adds	r7, #28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d12e      	bne.n	8001c52 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c0c:	f7ff fe1a 	bl	8001844 <HAL_GetTick>
 8001c10:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c12:	e012      	b.n	8001c3a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c14:	f7ff fe16 	bl	8001844 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b0a      	cmp	r3, #10
 8001c20:	d90b      	bls.n	8001c3a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c26:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2205      	movs	r2, #5
 8001c32:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e012      	b.n	8001c60 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1e5      	bne.n	8001c14 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e006      	b.n	8001c60 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c56:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
  }
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c7c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c86:	7ffb      	ldrb	r3, [r7, #31]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d003      	beq.n	8001c94 <HAL_CAN_AddTxMessage+0x2c>
 8001c8c:	7ffb      	ldrb	r3, [r7, #31]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	f040 80ad 	bne.w	8001dee <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10a      	bne.n	8001cb4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d105      	bne.n	8001cb4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8095 	beq.w	8001dde <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	0e1b      	lsrs	r3, r3, #24
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10d      	bne.n	8001cec <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cda:	68f9      	ldr	r1, [r7, #12]
 8001cdc:	6809      	ldr	r1, [r1, #0]
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	3318      	adds	r3, #24
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	440b      	add	r3, r1
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	e00f      	b.n	8001d0c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cf6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cfc:	68f9      	ldr	r1, [r7, #12]
 8001cfe:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d00:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3318      	adds	r3, #24
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	440b      	add	r3, r1
 8001d0a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6819      	ldr	r1, [r3, #0]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	3318      	adds	r3, #24
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	7d1b      	ldrb	r3, [r3, #20]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d111      	bne.n	8001d4c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	3318      	adds	r3, #24
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	4413      	add	r3, r2
 8001d34:	3304      	adds	r3, #4
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	6811      	ldr	r1, [r2, #0]
 8001d3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3318      	adds	r3, #24
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	440b      	add	r3, r1
 8001d48:	3304      	adds	r3, #4
 8001d4a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3307      	adds	r3, #7
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	061a      	lsls	r2, r3, #24
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3306      	adds	r3, #6
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	041b      	lsls	r3, r3, #16
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3305      	adds	r3, #5
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	4313      	orrs	r3, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	3204      	adds	r2, #4
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	4610      	mov	r0, r2
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	6811      	ldr	r1, [r2, #0]
 8001d74:	ea43 0200 	orr.w	r2, r3, r0
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	440b      	add	r3, r1
 8001d7e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001d82:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3303      	adds	r3, #3
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	061a      	lsls	r2, r3, #24
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3302      	adds	r3, #2
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	041b      	lsls	r3, r3, #16
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	021b      	lsls	r3, r3, #8
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	7812      	ldrb	r2, [r2, #0]
 8001da4:	4610      	mov	r0, r2
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	6811      	ldr	r1, [r2, #0]
 8001daa:	ea43 0200 	orr.w	r2, r3, r0
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	440b      	add	r3, r1
 8001db4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001db8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3318      	adds	r3, #24
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	4413      	add	r3, r2
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	6811      	ldr	r1, [r2, #0]
 8001dcc:	f043 0201 	orr.w	r2, r3, #1
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3318      	adds	r3, #24
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	440b      	add	r3, r1
 8001dd8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e00e      	b.n	8001dfc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e006      	b.n	8001dfc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
  }
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3724      	adds	r7, #36	@ 0x24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr

08001e06 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e06:	b480      	push	{r7}
 8001e08:	b087      	sub	sp, #28
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e1a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d003      	beq.n	8001e2a <HAL_CAN_GetRxMessage+0x24>
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	f040 8103 	bne.w	8002030 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10e      	bne.n	8001e4e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d116      	bne.n	8001e6c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e0f7      	b.n	800203e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d107      	bne.n	8001e6c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e60:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0e8      	b.n	800203e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	331b      	adds	r3, #27
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	4413      	add	r3, r2
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0204 	and.w	r2, r3, #4
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10c      	bne.n	8001ea4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	331b      	adds	r3, #27
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	4413      	add	r3, r2
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0d5b      	lsrs	r3, r3, #21
 8001e9a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	e00b      	b.n	8001ebc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	331b      	adds	r3, #27
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	4413      	add	r3, r2
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	08db      	lsrs	r3, r3, #3
 8001eb4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	331b      	adds	r3, #27
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	4413      	add	r3, r2
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0202 	and.w	r2, r3, #2
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	331b      	adds	r3, #27
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	4413      	add	r3, r2
 8001ede:	3304      	adds	r3, #4
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2208      	movs	r2, #8
 8001eee:	611a      	str	r2, [r3, #16]
 8001ef0:	e00b      	b.n	8001f0a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	331b      	adds	r3, #27
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	4413      	add	r3, r2
 8001efe:	3304      	adds	r3, #4
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 020f 	and.w	r2, r3, #15
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	331b      	adds	r3, #27
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	4413      	add	r3, r2
 8001f16:	3304      	adds	r3, #4
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	331b      	adds	r3, #27
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3304      	adds	r3, #4
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	0c1b      	lsrs	r3, r3, #16
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	0a1a      	lsrs	r2, r3, #8
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	0c1a      	lsrs	r2, r3, #16
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	3302      	adds	r3, #2
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	0e1a      	lsrs	r2, r3, #24
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	3303      	adds	r3, #3
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	0a1a      	lsrs	r2, r3, #8
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	3305      	adds	r3, #5
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0c1a      	lsrs	r2, r3, #16
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	3306      	adds	r3, #6
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	0e1a      	lsrs	r2, r3, #24
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	3307      	adds	r3, #7
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d108      	bne.n	800201c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0220 	orr.w	r2, r2, #32
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	e007      	b.n	800202c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691a      	ldr	r2, [r3, #16]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0220 	orr.w	r2, r2, #32
 800202a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e006      	b.n	800203e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002034:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
  }
}
 800203e:	4618      	mov	r0, r3
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002058:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d002      	beq.n	8002066 <HAL_CAN_ActivateNotification+0x1e>
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d109      	bne.n	800207a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6959      	ldr	r1, [r3, #20]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e006      	b.n	8002088 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
  }
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b08a      	sub	sp, #40	@ 0x28
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d07c      	beq.n	80021d2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d023      	beq.n	800212a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2201      	movs	r2, #1
 80020e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f983 	bl	8002400 <HAL_CAN_TxMailbox0CompleteCallback>
 80020fa:	e016      	b.n	800212a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d004      	beq.n	8002110 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
 800210e:	e00c      	b.n	800212a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d004      	beq.n	8002124 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
 8002122:	e002      	b.n	800212a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f986 	bl	8002436 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d024      	beq.n	800217e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800213c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f962 	bl	8002412 <HAL_CAN_TxMailbox1CompleteCallback>
 800214e:	e016      	b.n	800217e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002156:	2b00      	cmp	r3, #0
 8002158:	d004      	beq.n	8002164 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002160:	627b      	str	r3, [r7, #36]	@ 0x24
 8002162:	e00c      	b.n	800217e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800216a:	2b00      	cmp	r3, #0
 800216c:	d004      	beq.n	8002178 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002170:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002174:	627b      	str	r3, [r7, #36]	@ 0x24
 8002176:	e002      	b.n	800217e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f965 	bl	8002448 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d024      	beq.n	80021d2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002190:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f941 	bl	8002424 <HAL_CAN_TxMailbox2CompleteCallback>
 80021a2:	e016      	b.n	80021d2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d004      	beq.n	80021b8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b6:	e00c      	b.n	80021d2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d004      	beq.n	80021cc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ca:	e002      	b.n	80021d2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f944 	bl	800245a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00c      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d007      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2210      	movs	r2, #16
 80021f4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00b      	beq.n	8002218 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d006      	beq.n	8002218 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2208      	movs	r2, #8
 8002210:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f92a 	bl	800246c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7fe ff95 	bl	8001160 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00c      	beq.n	800225a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	d007      	beq.n	800225a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2210      	movs	r2, #16
 8002258:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	f003 0320 	and.w	r3, r3, #32
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00b      	beq.n	800227c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d006      	beq.n	800227c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2208      	movs	r2, #8
 8002274:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f90a 	bl	8002490 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f8f2 	bl	800247e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00b      	beq.n	80022bc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2210      	movs	r2, #16
 80022b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f8f3 	bl	80024a2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00b      	beq.n	80022de <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2208      	movs	r2, #8
 80022d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f8eb 	bl	80024b4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d07b      	beq.n	80023e0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d072      	beq.n	80023d8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800234c:	2b00      	cmp	r3, #0
 800234e:	d043      	beq.n	80023d8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002356:	2b00      	cmp	r3, #0
 8002358:	d03e      	beq.n	80023d8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002360:	2b60      	cmp	r3, #96	@ 0x60
 8002362:	d02b      	beq.n	80023bc <HAL_CAN_IRQHandler+0x32a>
 8002364:	2b60      	cmp	r3, #96	@ 0x60
 8002366:	d82e      	bhi.n	80023c6 <HAL_CAN_IRQHandler+0x334>
 8002368:	2b50      	cmp	r3, #80	@ 0x50
 800236a:	d022      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x320>
 800236c:	2b50      	cmp	r3, #80	@ 0x50
 800236e:	d82a      	bhi.n	80023c6 <HAL_CAN_IRQHandler+0x334>
 8002370:	2b40      	cmp	r3, #64	@ 0x40
 8002372:	d019      	beq.n	80023a8 <HAL_CAN_IRQHandler+0x316>
 8002374:	2b40      	cmp	r3, #64	@ 0x40
 8002376:	d826      	bhi.n	80023c6 <HAL_CAN_IRQHandler+0x334>
 8002378:	2b30      	cmp	r3, #48	@ 0x30
 800237a:	d010      	beq.n	800239e <HAL_CAN_IRQHandler+0x30c>
 800237c:	2b30      	cmp	r3, #48	@ 0x30
 800237e:	d822      	bhi.n	80023c6 <HAL_CAN_IRQHandler+0x334>
 8002380:	2b10      	cmp	r3, #16
 8002382:	d002      	beq.n	800238a <HAL_CAN_IRQHandler+0x2f8>
 8002384:	2b20      	cmp	r3, #32
 8002386:	d005      	beq.n	8002394 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002388:	e01d      	b.n	80023c6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	f043 0308 	orr.w	r3, r3, #8
 8002390:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002392:	e019      	b.n	80023c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002396:	f043 0310 	orr.w	r3, r3, #16
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800239c:	e014      	b.n	80023c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	f043 0320 	orr.w	r3, r3, #32
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023a6:	e00f      	b.n	80023c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023b0:	e00a      	b.n	80023c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023ba:	e005      	b.n	80023c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023c4:	e000      	b.n	80023c8 <HAL_CAN_IRQHandler+0x336>
            break;
 80023c6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80023d6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2204      	movs	r2, #4
 80023de:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d008      	beq.n	80023f8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f867 	bl	80024c6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023f8:	bf00      	nop
 80023fa:	3728      	adds	r7, #40	@ 0x28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr

08002436 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr

0800245a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e8:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <__NVIC_SetPriorityGrouping+0x44>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024f4:	4013      	ands	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002500:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250a:	4a04      	ldr	r2, [pc, #16]	@ (800251c <__NVIC_SetPriorityGrouping+0x44>)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	60d3      	str	r3, [r2, #12]
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002524:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <__NVIC_GetPriorityGrouping+0x18>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	f003 0307 	and.w	r3, r3, #7
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	2b00      	cmp	r3, #0
 800254c:	db0b      	blt.n	8002566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	f003 021f 	and.w	r2, r3, #31
 8002554:	4906      	ldr	r1, [pc, #24]	@ (8002570 <__NVIC_EnableIRQ+0x34>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	2001      	movs	r0, #1
 800255e:	fa00 f202 	lsl.w	r2, r0, r2
 8002562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	e000e100 	.word	0xe000e100

08002574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	6039      	str	r1, [r7, #0]
 800257e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	2b00      	cmp	r3, #0
 8002586:	db0a      	blt.n	800259e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	490c      	ldr	r1, [pc, #48]	@ (80025c0 <__NVIC_SetPriority+0x4c>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	440b      	add	r3, r1
 8002598:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800259c:	e00a      	b.n	80025b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4908      	ldr	r1, [pc, #32]	@ (80025c4 <__NVIC_SetPriority+0x50>)
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3b04      	subs	r3, #4
 80025ac:	0112      	lsls	r2, r2, #4
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	440b      	add	r3, r1
 80025b2:	761a      	strb	r2, [r3, #24]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000e100 	.word	0xe000e100
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	@ 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f1c3 0307 	rsb	r3, r3, #7
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	bf28      	it	cs
 80025e6:	2304      	movcs	r3, #4
 80025e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3304      	adds	r3, #4
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d902      	bls.n	80025f8 <NVIC_EncodePriority+0x30>
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3b03      	subs	r3, #3
 80025f6:	e000      	b.n	80025fa <NVIC_EncodePriority+0x32>
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	401a      	ands	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002610:	f04f 31ff 	mov.w	r1, #4294967295
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	43d9      	mvns	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	4313      	orrs	r3, r2
         );
}
 8002622:	4618      	mov	r0, r3
 8002624:	3724      	adds	r7, #36	@ 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800263c:	d301      	bcc.n	8002642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800263e:	2301      	movs	r3, #1
 8002640:	e00f      	b.n	8002662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002642:	4a0a      	ldr	r2, [pc, #40]	@ (800266c <SysTick_Config+0x40>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264a:	210f      	movs	r1, #15
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
 8002650:	f7ff ff90 	bl	8002574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002654:	4b05      	ldr	r3, [pc, #20]	@ (800266c <SysTick_Config+0x40>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265a:	4b04      	ldr	r3, [pc, #16]	@ (800266c <SysTick_Config+0x40>)
 800265c:	2207      	movs	r2, #7
 800265e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	e000e010 	.word	0xe000e010

08002670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ff2d 	bl	80024d8 <__NVIC_SetPriorityGrouping>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002698:	f7ff ff42 	bl	8002520 <__NVIC_GetPriorityGrouping>
 800269c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	6978      	ldr	r0, [r7, #20]
 80026a4:	f7ff ff90 	bl	80025c8 <NVIC_EncodePriority>
 80026a8:	4602      	mov	r2, r0
 80026aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff5f 	bl	8002574 <__NVIC_SetPriority>
}
 80026b6:	bf00      	nop
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff35 	bl	800253c <__NVIC_EnableIRQ>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ffa2 	bl	800262c <SysTick_Config>
 80026e8:	4603      	mov	r3, r0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b08b      	sub	sp, #44	@ 0x2c
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026fe:	2300      	movs	r3, #0
 8002700:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002702:	2300      	movs	r3, #0
 8002704:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002706:	e169      	b.n	80029dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002708:	2201      	movs	r2, #1
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	429a      	cmp	r2, r3
 8002722:	f040 8158 	bne.w	80029d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4a9a      	ldr	r2, [pc, #616]	@ (8002994 <HAL_GPIO_Init+0x2a0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d05e      	beq.n	80027ee <HAL_GPIO_Init+0xfa>
 8002730:	4a98      	ldr	r2, [pc, #608]	@ (8002994 <HAL_GPIO_Init+0x2a0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d875      	bhi.n	8002822 <HAL_GPIO_Init+0x12e>
 8002736:	4a98      	ldr	r2, [pc, #608]	@ (8002998 <HAL_GPIO_Init+0x2a4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d058      	beq.n	80027ee <HAL_GPIO_Init+0xfa>
 800273c:	4a96      	ldr	r2, [pc, #600]	@ (8002998 <HAL_GPIO_Init+0x2a4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d86f      	bhi.n	8002822 <HAL_GPIO_Init+0x12e>
 8002742:	4a96      	ldr	r2, [pc, #600]	@ (800299c <HAL_GPIO_Init+0x2a8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d052      	beq.n	80027ee <HAL_GPIO_Init+0xfa>
 8002748:	4a94      	ldr	r2, [pc, #592]	@ (800299c <HAL_GPIO_Init+0x2a8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d869      	bhi.n	8002822 <HAL_GPIO_Init+0x12e>
 800274e:	4a94      	ldr	r2, [pc, #592]	@ (80029a0 <HAL_GPIO_Init+0x2ac>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d04c      	beq.n	80027ee <HAL_GPIO_Init+0xfa>
 8002754:	4a92      	ldr	r2, [pc, #584]	@ (80029a0 <HAL_GPIO_Init+0x2ac>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d863      	bhi.n	8002822 <HAL_GPIO_Init+0x12e>
 800275a:	4a92      	ldr	r2, [pc, #584]	@ (80029a4 <HAL_GPIO_Init+0x2b0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d046      	beq.n	80027ee <HAL_GPIO_Init+0xfa>
 8002760:	4a90      	ldr	r2, [pc, #576]	@ (80029a4 <HAL_GPIO_Init+0x2b0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d85d      	bhi.n	8002822 <HAL_GPIO_Init+0x12e>
 8002766:	2b12      	cmp	r3, #18
 8002768:	d82a      	bhi.n	80027c0 <HAL_GPIO_Init+0xcc>
 800276a:	2b12      	cmp	r3, #18
 800276c:	d859      	bhi.n	8002822 <HAL_GPIO_Init+0x12e>
 800276e:	a201      	add	r2, pc, #4	@ (adr r2, 8002774 <HAL_GPIO_Init+0x80>)
 8002770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002774:	080027ef 	.word	0x080027ef
 8002778:	080027c9 	.word	0x080027c9
 800277c:	080027db 	.word	0x080027db
 8002780:	0800281d 	.word	0x0800281d
 8002784:	08002823 	.word	0x08002823
 8002788:	08002823 	.word	0x08002823
 800278c:	08002823 	.word	0x08002823
 8002790:	08002823 	.word	0x08002823
 8002794:	08002823 	.word	0x08002823
 8002798:	08002823 	.word	0x08002823
 800279c:	08002823 	.word	0x08002823
 80027a0:	08002823 	.word	0x08002823
 80027a4:	08002823 	.word	0x08002823
 80027a8:	08002823 	.word	0x08002823
 80027ac:	08002823 	.word	0x08002823
 80027b0:	08002823 	.word	0x08002823
 80027b4:	08002823 	.word	0x08002823
 80027b8:	080027d1 	.word	0x080027d1
 80027bc:	080027e5 	.word	0x080027e5
 80027c0:	4a79      	ldr	r2, [pc, #484]	@ (80029a8 <HAL_GPIO_Init+0x2b4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d013      	beq.n	80027ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027c6:	e02c      	b.n	8002822 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	623b      	str	r3, [r7, #32]
          break;
 80027ce:	e029      	b.n	8002824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	3304      	adds	r3, #4
 80027d6:	623b      	str	r3, [r7, #32]
          break;
 80027d8:	e024      	b.n	8002824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	3308      	adds	r3, #8
 80027e0:	623b      	str	r3, [r7, #32]
          break;
 80027e2:	e01f      	b.n	8002824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	330c      	adds	r3, #12
 80027ea:	623b      	str	r3, [r7, #32]
          break;
 80027ec:	e01a      	b.n	8002824 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027f6:	2304      	movs	r3, #4
 80027f8:	623b      	str	r3, [r7, #32]
          break;
 80027fa:	e013      	b.n	8002824 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d105      	bne.n	8002810 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002804:	2308      	movs	r3, #8
 8002806:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	611a      	str	r2, [r3, #16]
          break;
 800280e:	e009      	b.n	8002824 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002810:	2308      	movs	r3, #8
 8002812:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	615a      	str	r2, [r3, #20]
          break;
 800281a:	e003      	b.n	8002824 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800281c:	2300      	movs	r3, #0
 800281e:	623b      	str	r3, [r7, #32]
          break;
 8002820:	e000      	b.n	8002824 <HAL_GPIO_Init+0x130>
          break;
 8002822:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2bff      	cmp	r3, #255	@ 0xff
 8002828:	d801      	bhi.n	800282e <HAL_GPIO_Init+0x13a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	e001      	b.n	8002832 <HAL_GPIO_Init+0x13e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3304      	adds	r3, #4
 8002832:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2bff      	cmp	r3, #255	@ 0xff
 8002838:	d802      	bhi.n	8002840 <HAL_GPIO_Init+0x14c>
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	e002      	b.n	8002846 <HAL_GPIO_Init+0x152>
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	3b08      	subs	r3, #8
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	210f      	movs	r1, #15
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	fa01 f303 	lsl.w	r3, r1, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	401a      	ands	r2, r3
 8002858:	6a39      	ldr	r1, [r7, #32]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	fa01 f303 	lsl.w	r3, r1, r3
 8002860:	431a      	orrs	r2, r3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80b1 	beq.w	80029d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002874:	4b4d      	ldr	r3, [pc, #308]	@ (80029ac <HAL_GPIO_Init+0x2b8>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	4a4c      	ldr	r2, [pc, #304]	@ (80029ac <HAL_GPIO_Init+0x2b8>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6193      	str	r3, [r2, #24]
 8002880:	4b4a      	ldr	r3, [pc, #296]	@ (80029ac <HAL_GPIO_Init+0x2b8>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800288c:	4a48      	ldr	r2, [pc, #288]	@ (80029b0 <HAL_GPIO_Init+0x2bc>)
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	089b      	lsrs	r3, r3, #2
 8002892:	3302      	adds	r3, #2
 8002894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002898:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4013      	ands	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a40      	ldr	r2, [pc, #256]	@ (80029b4 <HAL_GPIO_Init+0x2c0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d013      	beq.n	80028e0 <HAL_GPIO_Init+0x1ec>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a3f      	ldr	r2, [pc, #252]	@ (80029b8 <HAL_GPIO_Init+0x2c4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00d      	beq.n	80028dc <HAL_GPIO_Init+0x1e8>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a3e      	ldr	r2, [pc, #248]	@ (80029bc <HAL_GPIO_Init+0x2c8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d007      	beq.n	80028d8 <HAL_GPIO_Init+0x1e4>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a3d      	ldr	r2, [pc, #244]	@ (80029c0 <HAL_GPIO_Init+0x2cc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d101      	bne.n	80028d4 <HAL_GPIO_Init+0x1e0>
 80028d0:	2303      	movs	r3, #3
 80028d2:	e006      	b.n	80028e2 <HAL_GPIO_Init+0x1ee>
 80028d4:	2304      	movs	r3, #4
 80028d6:	e004      	b.n	80028e2 <HAL_GPIO_Init+0x1ee>
 80028d8:	2302      	movs	r3, #2
 80028da:	e002      	b.n	80028e2 <HAL_GPIO_Init+0x1ee>
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <HAL_GPIO_Init+0x1ee>
 80028e0:	2300      	movs	r3, #0
 80028e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e4:	f002 0203 	and.w	r2, r2, #3
 80028e8:	0092      	lsls	r2, r2, #2
 80028ea:	4093      	lsls	r3, r2
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028f2:	492f      	ldr	r1, [pc, #188]	@ (80029b0 <HAL_GPIO_Init+0x2bc>)
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	3302      	adds	r3, #2
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d006      	beq.n	800291a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800290c:	4b2d      	ldr	r3, [pc, #180]	@ (80029c4 <HAL_GPIO_Init+0x2d0>)
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	492c      	ldr	r1, [pc, #176]	@ (80029c4 <HAL_GPIO_Init+0x2d0>)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	608b      	str	r3, [r1, #8]
 8002918:	e006      	b.n	8002928 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800291a:	4b2a      	ldr	r3, [pc, #168]	@ (80029c4 <HAL_GPIO_Init+0x2d0>)
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	43db      	mvns	r3, r3
 8002922:	4928      	ldr	r1, [pc, #160]	@ (80029c4 <HAL_GPIO_Init+0x2d0>)
 8002924:	4013      	ands	r3, r2
 8002926:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d006      	beq.n	8002942 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002934:	4b23      	ldr	r3, [pc, #140]	@ (80029c4 <HAL_GPIO_Init+0x2d0>)
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	4922      	ldr	r1, [pc, #136]	@ (80029c4 <HAL_GPIO_Init+0x2d0>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	60cb      	str	r3, [r1, #12]
 8002940:	e006      	b.n	8002950 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002942:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <HAL_GPIO_Init+0x2d0>)
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	43db      	mvns	r3, r3
 800294a:	491e      	ldr	r1, [pc, #120]	@ (80029c4 <HAL_GPIO_Init+0x2d0>)
 800294c:	4013      	ands	r3, r2
 800294e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d006      	beq.n	800296a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800295c:	4b19      	ldr	r3, [pc, #100]	@ (80029c4 <HAL_GPIO_Init+0x2d0>)
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4918      	ldr	r1, [pc, #96]	@ (80029c4 <HAL_GPIO_Init+0x2d0>)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
 8002968:	e006      	b.n	8002978 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800296a:	4b16      	ldr	r3, [pc, #88]	@ (80029c4 <HAL_GPIO_Init+0x2d0>)
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	43db      	mvns	r3, r3
 8002972:	4914      	ldr	r1, [pc, #80]	@ (80029c4 <HAL_GPIO_Init+0x2d0>)
 8002974:	4013      	ands	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d021      	beq.n	80029c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002984:	4b0f      	ldr	r3, [pc, #60]	@ (80029c4 <HAL_GPIO_Init+0x2d0>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	490e      	ldr	r1, [pc, #56]	@ (80029c4 <HAL_GPIO_Init+0x2d0>)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	600b      	str	r3, [r1, #0]
 8002990:	e021      	b.n	80029d6 <HAL_GPIO_Init+0x2e2>
 8002992:	bf00      	nop
 8002994:	10320000 	.word	0x10320000
 8002998:	10310000 	.word	0x10310000
 800299c:	10220000 	.word	0x10220000
 80029a0:	10210000 	.word	0x10210000
 80029a4:	10120000 	.word	0x10120000
 80029a8:	10110000 	.word	0x10110000
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40010000 	.word	0x40010000
 80029b4:	40010800 	.word	0x40010800
 80029b8:	40010c00 	.word	0x40010c00
 80029bc:	40011000 	.word	0x40011000
 80029c0:	40011400 	.word	0x40011400
 80029c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029c8:	4b0b      	ldr	r3, [pc, #44]	@ (80029f8 <HAL_GPIO_Init+0x304>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	4909      	ldr	r1, [pc, #36]	@ (80029f8 <HAL_GPIO_Init+0x304>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	3301      	adds	r3, #1
 80029da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f47f ae8e 	bne.w	8002708 <HAL_GPIO_Init+0x14>
  }
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	372c      	adds	r7, #44	@ 0x2c
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	40010400 	.word	0x40010400

080029fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	807b      	strh	r3, [r7, #2]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a0c:	787b      	ldrb	r3, [r7, #1]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a12:	887a      	ldrh	r2, [r7, #2]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a18:	e003      	b.n	8002a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a1a:	887b      	ldrh	r3, [r7, #2]
 8002a1c:	041a      	lsls	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	611a      	str	r2, [r3, #16]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e272      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8087 	beq.w	8002b5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a4c:	4b92      	ldr	r3, [pc, #584]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d00c      	beq.n	8002a72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a58:	4b8f      	ldr	r3, [pc, #572]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d112      	bne.n	8002a8a <HAL_RCC_OscConfig+0x5e>
 8002a64:	4b8c      	ldr	r3, [pc, #560]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a70:	d10b      	bne.n	8002a8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a72:	4b89      	ldr	r3, [pc, #548]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d06c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x12c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d168      	bne.n	8002b58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e24c      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x76>
 8002a94:	4b80      	ldr	r3, [pc, #512]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a7f      	ldr	r2, [pc, #508]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	e02e      	b.n	8002b00 <HAL_RCC_OscConfig+0xd4>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x98>
 8002aaa:	4b7b      	ldr	r3, [pc, #492]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a7a      	ldr	r2, [pc, #488]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b78      	ldr	r3, [pc, #480]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a77      	ldr	r2, [pc, #476]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xd4>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0xbc>
 8002ace:	4b72      	ldr	r3, [pc, #456]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a71      	ldr	r2, [pc, #452]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b6f      	ldr	r3, [pc, #444]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6e      	ldr	r2, [pc, #440]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xd4>
 8002ae8:	4b6b      	ldr	r3, [pc, #428]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6a      	ldr	r2, [pc, #424]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b68      	ldr	r3, [pc, #416]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a67      	ldr	r2, [pc, #412]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002afe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fe9c 	bl	8001844 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fe98 	bl	8001844 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	@ 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e200      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b5d      	ldr	r3, [pc, #372]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xe4>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe fe88 	bl	8001844 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fe84 	bl	8001844 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	@ 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e1ec      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	4b53      	ldr	r3, [pc, #332]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x10c>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d063      	beq.n	8002c2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b66:	4b4c      	ldr	r3, [pc, #304]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b72:	4b49      	ldr	r3, [pc, #292]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d11c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x18c>
 8002b7e:	4b46      	ldr	r3, [pc, #280]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	4b43      	ldr	r3, [pc, #268]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x176>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1c0      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4939      	ldr	r1, [pc, #228]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	e03a      	b.n	8002c2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	4b36      	ldr	r3, [pc, #216]	@ (8002c9c <HAL_RCC_OscConfig+0x270>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fe3d 	bl	8001844 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bce:	f7fe fe39 	bl	8001844 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1a1      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b2a      	ldr	r3, [pc, #168]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4927      	ldr	r1, [pc, #156]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c02:	4b26      	ldr	r3, [pc, #152]	@ (8002c9c <HAL_RCC_OscConfig+0x270>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe fe1c 	bl	8001844 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fe fe18 	bl	8001844 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e180      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1d      	ldr	r3, [pc, #116]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d03a      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d019      	beq.n	8002c76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b17      	ldr	r3, [pc, #92]	@ (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c48:	f7fe fdfc 	bl	8001844 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe fdf8 	bl	8001844 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e160      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	4b0d      	ldr	r3, [pc, #52]	@ (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f000 fa9c 	bl	80031ac <RCC_Delay>
 8002c74:	e01c      	b.n	8002cb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7c:	f7fe fde2 	bl	8001844 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c82:	e00f      	b.n	8002ca4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c84:	f7fe fdde 	bl	8001844 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d908      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e146      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	42420000 	.word	0x42420000
 8002ca0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca4:	4b92      	ldr	r3, [pc, #584]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1e9      	bne.n	8002c84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80a6 	beq.w	8002e0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10d      	bne.n	8002cea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cce:	4b88      	ldr	r3, [pc, #544]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4a87      	ldr	r2, [pc, #540]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd8:	61d3      	str	r3, [r2, #28]
 8002cda:	4b85      	ldr	r3, [pc, #532]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cea:	4b82      	ldr	r3, [pc, #520]	@ (8002ef4 <HAL_RCC_OscConfig+0x4c8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d118      	bne.n	8002d28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ef4 <HAL_RCC_OscConfig+0x4c8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a7e      	ldr	r2, [pc, #504]	@ (8002ef4 <HAL_RCC_OscConfig+0x4c8>)
 8002cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d02:	f7fe fd9f 	bl	8001844 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0a:	f7fe fd9b 	bl	8001844 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b64      	cmp	r3, #100	@ 0x64
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e103      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1c:	4b75      	ldr	r3, [pc, #468]	@ (8002ef4 <HAL_RCC_OscConfig+0x4c8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d106      	bne.n	8002d3e <HAL_RCC_OscConfig+0x312>
 8002d30:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	4a6e      	ldr	r2, [pc, #440]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6213      	str	r3, [r2, #32]
 8002d3c:	e02d      	b.n	8002d9a <HAL_RCC_OscConfig+0x36e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x334>
 8002d46:	4b6a      	ldr	r3, [pc, #424]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	4a69      	ldr	r2, [pc, #420]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	6213      	str	r3, [r2, #32]
 8002d52:	4b67      	ldr	r3, [pc, #412]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	4a66      	ldr	r2, [pc, #408]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	f023 0304 	bic.w	r3, r3, #4
 8002d5c:	6213      	str	r3, [r2, #32]
 8002d5e:	e01c      	b.n	8002d9a <HAL_RCC_OscConfig+0x36e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d10c      	bne.n	8002d82 <HAL_RCC_OscConfig+0x356>
 8002d68:	4b61      	ldr	r3, [pc, #388]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4a60      	ldr	r2, [pc, #384]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	f043 0304 	orr.w	r3, r3, #4
 8002d72:	6213      	str	r3, [r2, #32]
 8002d74:	4b5e      	ldr	r3, [pc, #376]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4a5d      	ldr	r2, [pc, #372]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6213      	str	r3, [r2, #32]
 8002d80:	e00b      	b.n	8002d9a <HAL_RCC_OscConfig+0x36e>
 8002d82:	4b5b      	ldr	r3, [pc, #364]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4a5a      	ldr	r2, [pc, #360]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	6213      	str	r3, [r2, #32]
 8002d8e:	4b58      	ldr	r3, [pc, #352]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4a57      	ldr	r2, [pc, #348]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	f023 0304 	bic.w	r3, r3, #4
 8002d98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d015      	beq.n	8002dce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da2:	f7fe fd4f 	bl	8001844 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fe fd4b 	bl	8001844 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0b1      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ee      	beq.n	8002daa <HAL_RCC_OscConfig+0x37e>
 8002dcc:	e014      	b.n	8002df8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dce:	f7fe fd39 	bl	8001844 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fe fd35 	bl	8001844 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e09b      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dec:	4b40      	ldr	r3, [pc, #256]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1ee      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d105      	bne.n	8002e0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8087 	beq.w	8002f22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e14:	4b36      	ldr	r3, [pc, #216]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d061      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d146      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e28:	4b33      	ldr	r3, [pc, #204]	@ (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fe fd09 	bl	8001844 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e36:	f7fe fd05 	bl	8001844 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e06d      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e48:	4b29      	ldr	r3, [pc, #164]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f0      	bne.n	8002e36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e5c:	d108      	bne.n	8002e70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e5e:	4b24      	ldr	r3, [pc, #144]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4921      	ldr	r1, [pc, #132]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e70:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a19      	ldr	r1, [r3, #32]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	430b      	orrs	r3, r1
 8002e82:	491b      	ldr	r1, [pc, #108]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e88:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7fe fcd9 	bl	8001844 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e96:	f7fe fcd5 	bl	8001844 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e03d      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea8:	4b11      	ldr	r3, [pc, #68]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x46a>
 8002eb4:	e035      	b.n	8002f22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7fe fcc2 	bl	8001844 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7fe fcbe 	bl	8001844 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e026      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed6:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x498>
 8002ee2:	e01e      	b.n	8002f22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e019      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40007000 	.word	0x40007000
 8002ef8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002efc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <HAL_RCC_OscConfig+0x500>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d001      	beq.n	8002f22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000

08002f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0d0      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f44:	4b6a      	ldr	r3, [pc, #424]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d910      	bls.n	8002f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b67      	ldr	r3, [pc, #412]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 0207 	bic.w	r2, r3, #7
 8002f5a:	4965      	ldr	r1, [pc, #404]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f62:	4b63      	ldr	r3, [pc, #396]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0b8      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d020      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f8c:	4b59      	ldr	r3, [pc, #356]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4a58      	ldr	r2, [pc, #352]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa4:	4b53      	ldr	r3, [pc, #332]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4a52      	ldr	r2, [pc, #328]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002fae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb0:	4b50      	ldr	r3, [pc, #320]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	494d      	ldr	r1, [pc, #308]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d040      	beq.n	8003050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	4b47      	ldr	r3, [pc, #284]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d115      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e07f      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fee:	4b41      	ldr	r3, [pc, #260]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e073      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e06b      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800300e:	4b39      	ldr	r3, [pc, #228]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f023 0203 	bic.w	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4936      	ldr	r1, [pc, #216]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003020:	f7fe fc10 	bl	8001844 <HAL_GetTick>
 8003024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	e00a      	b.n	800303e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003028:	f7fe fc0c 	bl	8001844 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e053      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	4b2d      	ldr	r3, [pc, #180]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 020c 	and.w	r2, r3, #12
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	429a      	cmp	r2, r3
 800304e:	d1eb      	bne.n	8003028 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003050:	4b27      	ldr	r3, [pc, #156]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d210      	bcs.n	8003080 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b24      	ldr	r3, [pc, #144]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 0207 	bic.w	r2, r3, #7
 8003066:	4922      	ldr	r1, [pc, #136]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b20      	ldr	r3, [pc, #128]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e032      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800308c:	4b19      	ldr	r3, [pc, #100]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4916      	ldr	r1, [pc, #88]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	4313      	orrs	r3, r2
 800309c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030aa:	4b12      	ldr	r3, [pc, #72]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	490e      	ldr	r1, [pc, #56]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030be:	f000 f821 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 80030c2:	4602      	mov	r2, r0
 80030c4:	4b0b      	ldr	r3, [pc, #44]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	490a      	ldr	r1, [pc, #40]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030d0:	5ccb      	ldrb	r3, [r1, r3]
 80030d2:	fa22 f303 	lsr.w	r3, r2, r3
 80030d6:	4a09      	ldr	r2, [pc, #36]	@ (80030fc <HAL_RCC_ClockConfig+0x1cc>)
 80030d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030da:	4b09      	ldr	r3, [pc, #36]	@ (8003100 <HAL_RCC_ClockConfig+0x1d0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe fb6e 	bl	80017c0 <HAL_InitTick>

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40022000 	.word	0x40022000
 80030f4:	40021000 	.word	0x40021000
 80030f8:	08004bf8 	.word	0x08004bf8
 80030fc:	20000000 	.word	0x20000000
 8003100:	20000004 	.word	0x20000004

08003104 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	2300      	movs	r3, #0
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	2300      	movs	r3, #0
 8003118:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800311e:	4b1e      	ldr	r3, [pc, #120]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x94>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b04      	cmp	r3, #4
 800312c:	d002      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0x30>
 800312e:	2b08      	cmp	r3, #8
 8003130:	d003      	beq.n	800313a <HAL_RCC_GetSysClockFreq+0x36>
 8003132:	e027      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003134:	4b19      	ldr	r3, [pc, #100]	@ (800319c <HAL_RCC_GetSysClockFreq+0x98>)
 8003136:	613b      	str	r3, [r7, #16]
      break;
 8003138:	e027      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	0c9b      	lsrs	r3, r3, #18
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	4a17      	ldr	r2, [pc, #92]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003144:	5cd3      	ldrb	r3, [r2, r3]
 8003146:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d010      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003152:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x94>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	0c5b      	lsrs	r3, r3, #17
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	4a11      	ldr	r2, [pc, #68]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800315e:	5cd3      	ldrb	r3, [r2, r3]
 8003160:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a0d      	ldr	r2, [pc, #52]	@ (800319c <HAL_RCC_GetSysClockFreq+0x98>)
 8003166:	fb03 f202 	mul.w	r2, r3, r2
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	e004      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a0c      	ldr	r2, [pc, #48]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003178:	fb02 f303 	mul.w	r3, r2, r3
 800317c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	613b      	str	r3, [r7, #16]
      break;
 8003182:	e002      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003184:	4b05      	ldr	r3, [pc, #20]	@ (800319c <HAL_RCC_GetSysClockFreq+0x98>)
 8003186:	613b      	str	r3, [r7, #16]
      break;
 8003188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318a:	693b      	ldr	r3, [r7, #16]
}
 800318c:	4618      	mov	r0, r3
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	007a1200 	.word	0x007a1200
 80031a0:	08004c08 	.word	0x08004c08
 80031a4:	08004c18 	.word	0x08004c18
 80031a8:	003d0900 	.word	0x003d0900

080031ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031b4:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <RCC_Delay+0x34>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0a      	ldr	r2, [pc, #40]	@ (80031e4 <RCC_Delay+0x38>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	0a5b      	lsrs	r3, r3, #9
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031c8:	bf00      	nop
  }
  while (Delay --);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1e5a      	subs	r2, r3, #1
 80031ce:	60fa      	str	r2, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f9      	bne.n	80031c8 <RCC_Delay+0x1c>
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	20000000 	.word	0x20000000
 80031e4:	10624dd3 	.word	0x10624dd3

080031e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e076      	b.n	80032e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d108      	bne.n	8003214 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800320a:	d009      	beq.n	8003220 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	61da      	str	r2, [r3, #28]
 8003212:	e005      	b.n	8003220 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fe f9fe 	bl	800163c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003256:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a4:	ea42 0103 	orr.w	r1, r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	0c1a      	lsrs	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f002 0204 	and.w	r2, r2, #4
 80032c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69da      	ldr	r2, [r3, #28]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	4613      	mov	r3, r2
 80032fe:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003300:	f7fe faa0 	bl	8001844 <HAL_GetTick>
 8003304:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d001      	beq.n	800331a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003316:	2302      	movs	r3, #2
 8003318:	e12a      	b.n	8003570 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <HAL_SPI_Transmit+0x36>
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e122      	b.n	8003570 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_SPI_Transmit+0x48>
 8003334:	2302      	movs	r3, #2
 8003336:	e11b      	b.n	8003570 <HAL_SPI_Transmit+0x280>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2203      	movs	r2, #3
 8003344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	88fa      	ldrh	r2, [r7, #6]
 8003358:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	88fa      	ldrh	r2, [r7, #6]
 800335e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003386:	d10f      	bne.n	80033a8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003396:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b2:	2b40      	cmp	r3, #64	@ 0x40
 80033b4:	d007      	beq.n	80033c6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033ce:	d152      	bne.n	8003476 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_SPI_Transmit+0xee>
 80033d8:	8b7b      	ldrh	r3, [r7, #26]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d145      	bne.n	800346a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	881a      	ldrh	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	1c9a      	adds	r2, r3, #2
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003402:	e032      	b.n	800346a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b02      	cmp	r3, #2
 8003410:	d112      	bne.n	8003438 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003416:	881a      	ldrh	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003422:	1c9a      	adds	r2, r3, #2
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003436:	e018      	b.n	800346a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003438:	f7fe fa04 	bl	8001844 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d803      	bhi.n	8003450 <HAL_SPI_Transmit+0x160>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344e:	d102      	bne.n	8003456 <HAL_SPI_Transmit+0x166>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e082      	b.n	8003570 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1c7      	bne.n	8003404 <HAL_SPI_Transmit+0x114>
 8003474:	e053      	b.n	800351e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_SPI_Transmit+0x194>
 800347e:	8b7b      	ldrh	r3, [r7, #26]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d147      	bne.n	8003514 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	330c      	adds	r3, #12
 800348e:	7812      	ldrb	r2, [r2, #0]
 8003490:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80034aa:	e033      	b.n	8003514 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d113      	bne.n	80034e2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	330c      	adds	r3, #12
 80034c4:	7812      	ldrb	r2, [r2, #0]
 80034c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	86da      	strh	r2, [r3, #54]	@ 0x36
 80034e0:	e018      	b.n	8003514 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034e2:	f7fe f9af 	bl	8001844 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d803      	bhi.n	80034fa <HAL_SPI_Transmit+0x20a>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f8:	d102      	bne.n	8003500 <HAL_SPI_Transmit+0x210>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d109      	bne.n	8003514 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e02d      	b.n	8003570 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1c6      	bne.n	80034ac <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	6839      	ldr	r1, [r7, #0]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fbc4 	bl	8003cb0 <SPI_EndRxTxTransaction>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800356e:	2300      	movs	r3, #0
  }
}
 8003570:	4618      	mov	r0, r3
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	d001      	beq.n	8003598 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003594:	2302      	movs	r3, #2
 8003596:	e104      	b.n	80037a2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035a0:	d112      	bne.n	80035c8 <HAL_SPI_Receive+0x50>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10e      	bne.n	80035c8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2204      	movs	r2, #4
 80035ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80035b2:	88fa      	ldrh	r2, [r7, #6]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	4613      	mov	r3, r2
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f8f3 	bl	80037aa <HAL_SPI_TransmitReceive>
 80035c4:	4603      	mov	r3, r0
 80035c6:	e0ec      	b.n	80037a2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035c8:	f7fe f93c 	bl	8001844 <HAL_GetTick>
 80035cc:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_SPI_Receive+0x62>
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0e1      	b.n	80037a2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_SPI_Receive+0x74>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e0da      	b.n	80037a2 <HAL_SPI_Receive+0x22a>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2204      	movs	r2, #4
 80035f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	88fa      	ldrh	r2, [r7, #6]
 800360c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	88fa      	ldrh	r2, [r7, #6]
 8003612:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800363a:	d10f      	bne.n	800365c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800364a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800365a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003666:	2b40      	cmp	r3, #64	@ 0x40
 8003668:	d007      	beq.n	800367a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003678:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d170      	bne.n	8003764 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003682:	e035      	b.n	80036f0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b01      	cmp	r3, #1
 8003690:	d115      	bne.n	80036be <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f103 020c 	add.w	r2, r3, #12
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369e:	7812      	ldrb	r2, [r2, #0]
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036bc:	e018      	b.n	80036f0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036be:	f7fe f8c1 	bl	8001844 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d803      	bhi.n	80036d6 <HAL_SPI_Receive+0x15e>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d102      	bne.n	80036dc <HAL_SPI_Receive+0x164>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e058      	b.n	80037a2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1c4      	bne.n	8003684 <HAL_SPI_Receive+0x10c>
 80036fa:	e038      	b.n	800376e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b01      	cmp	r3, #1
 8003708:	d113      	bne.n	8003732 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003714:	b292      	uxth	r2, r2
 8003716:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371c:	1c9a      	adds	r2, r3, #2
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003730:	e018      	b.n	8003764 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003732:	f7fe f887 	bl	8001844 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d803      	bhi.n	800374a <HAL_SPI_Receive+0x1d2>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d102      	bne.n	8003750 <HAL_SPI_Receive+0x1d8>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d109      	bne.n	8003764 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e01e      	b.n	80037a2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1c6      	bne.n	80036fc <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	6839      	ldr	r1, [r7, #0]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fa4a 	bl	8003c0c <SPI_EndRxTransaction>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80037a0:	2300      	movs	r3, #0
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b08a      	sub	sp, #40	@ 0x28
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037b8:	2301      	movs	r3, #1
 80037ba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037bc:	f7fe f842 	bl	8001844 <HAL_GetTick>
 80037c0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037c8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80037d0:	887b      	ldrh	r3, [r7, #2]
 80037d2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037d4:	7ffb      	ldrb	r3, [r7, #31]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d00c      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x4a>
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037e0:	d106      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d102      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x46>
 80037ea:	7ffb      	ldrb	r3, [r7, #31]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d001      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80037f0:	2302      	movs	r3, #2
 80037f2:	e17f      	b.n	8003af4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x5c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x5c>
 8003800:	887b      	ldrh	r3, [r7, #2]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e174      	b.n	8003af4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x6e>
 8003814:	2302      	movs	r3, #2
 8003816:	e16d      	b.n	8003af4 <HAL_SPI_TransmitReceive+0x34a>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b04      	cmp	r3, #4
 800382a:	d003      	beq.n	8003834 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2205      	movs	r2, #5
 8003830:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	887a      	ldrh	r2, [r7, #2]
 800384a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	887a      	ldrh	r2, [r7, #2]
 8003856:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	887a      	ldrh	r2, [r7, #2]
 800385c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003874:	2b40      	cmp	r3, #64	@ 0x40
 8003876:	d007      	beq.n	8003888 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003886:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003890:	d17e      	bne.n	8003990 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_SPI_TransmitReceive+0xf6>
 800389a:	8afb      	ldrh	r3, [r7, #22]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d16c      	bne.n	800397a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a4:	881a      	ldrh	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b0:	1c9a      	adds	r2, r3, #2
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038c4:	e059      	b.n	800397a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d11b      	bne.n	800390c <HAL_SPI_TransmitReceive+0x162>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d016      	beq.n	800390c <HAL_SPI_TransmitReceive+0x162>
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d113      	bne.n	800390c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e8:	881a      	ldrh	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	1c9a      	adds	r2, r3, #2
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b01      	cmp	r3, #1
 8003918:	d119      	bne.n	800394e <HAL_SPI_TransmitReceive+0x1a4>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d014      	beq.n	800394e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392e:	b292      	uxth	r2, r2
 8003930:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003936:	1c9a      	adds	r2, r3, #2
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800394a:	2301      	movs	r3, #1
 800394c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800394e:	f7fd ff79 	bl	8001844 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800395a:	429a      	cmp	r2, r3
 800395c:	d80d      	bhi.n	800397a <HAL_SPI_TransmitReceive+0x1d0>
 800395e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003964:	d009      	beq.n	800397a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e0bc      	b.n	8003af4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1a0      	bne.n	80038c6 <HAL_SPI_TransmitReceive+0x11c>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d19b      	bne.n	80038c6 <HAL_SPI_TransmitReceive+0x11c>
 800398e:	e082      	b.n	8003a96 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_SPI_TransmitReceive+0x1f4>
 8003998:	8afb      	ldrh	r3, [r7, #22]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d171      	bne.n	8003a82 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	7812      	ldrb	r2, [r2, #0]
 80039aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039c4:	e05d      	b.n	8003a82 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d11c      	bne.n	8003a0e <HAL_SPI_TransmitReceive+0x264>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d017      	beq.n	8003a0e <HAL_SPI_TransmitReceive+0x264>
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d114      	bne.n	8003a0e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	330c      	adds	r3, #12
 80039ee:	7812      	ldrb	r2, [r2, #0]
 80039f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d119      	bne.n	8003a50 <HAL_SPI_TransmitReceive+0x2a6>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d014      	beq.n	8003a50 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a50:	f7fd fef8 	bl	8001844 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d803      	bhi.n	8003a68 <HAL_SPI_TransmitReceive+0x2be>
 8003a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a66:	d102      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x2c4>
 8003a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e038      	b.n	8003af4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d19c      	bne.n	80039c6 <HAL_SPI_TransmitReceive+0x21c>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d197      	bne.n	80039c6 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a96:	6a3a      	ldr	r2, [r7, #32]
 8003a98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f908 	bl	8003cb0 <SPI_EndRxTxTransaction>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e01d      	b.n	8003af4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003af2:	2300      	movs	r3, #0
  }
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3728      	adds	r7, #40	@ 0x28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b0c:	f7fd fe9a 	bl	8001844 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	4413      	add	r3, r2
 8003b1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b1c:	f7fd fe92 	bl	8001844 <HAL_GetTick>
 8003b20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b22:	4b39      	ldr	r3, [pc, #228]	@ (8003c08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	015b      	lsls	r3, r3, #5
 8003b28:	0d1b      	lsrs	r3, r3, #20
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	fb02 f303 	mul.w	r3, r2, r3
 8003b30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b32:	e054      	b.n	8003bde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3a:	d050      	beq.n	8003bde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b3c:	f7fd fe82 	bl	8001844 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d902      	bls.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d13d      	bne.n	8003bce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b6a:	d111      	bne.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b74:	d004      	beq.n	8003b80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b7e:	d107      	bne.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b98:	d10f      	bne.n	8003bba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e017      	b.n	8003bfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4013      	ands	r3, r2
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	bf0c      	ite	eq
 8003bee:	2301      	moveq	r3, #1
 8003bf0:	2300      	movne	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d19b      	bne.n	8003b34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3720      	adds	r7, #32
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000000 	.word	0x20000000

08003c0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c20:	d111      	bne.n	8003c46 <SPI_EndRxTransaction+0x3a>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c2a:	d004      	beq.n	8003c36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c34:	d107      	bne.n	8003c46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c44:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c4e:	d117      	bne.n	8003c80 <SPI_EndRxTransaction+0x74>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c58:	d112      	bne.n	8003c80 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2200      	movs	r2, #0
 8003c62:	2101      	movs	r1, #1
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f7ff ff49 	bl	8003afc <SPI_WaitFlagStateUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01a      	beq.n	8003ca6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c74:	f043 0220 	orr.w	r2, r3, #32
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e013      	b.n	8003ca8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2200      	movs	r2, #0
 8003c88:	2180      	movs	r1, #128	@ 0x80
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f7ff ff36 	bl	8003afc <SPI_WaitFlagStateUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d007      	beq.n	8003ca6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9a:	f043 0220 	orr.w	r2, r3, #32
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e000      	b.n	8003ca8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	2102      	movs	r1, #2
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f7ff ff18 	bl	8003afc <SPI_WaitFlagStateUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d007      	beq.n	8003ce2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd6:	f043 0220 	orr.w	r2, r3, #32
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e013      	b.n	8003d0a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2180      	movs	r1, #128	@ 0x80
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f7ff ff05 	bl	8003afc <SPI_WaitFlagStateUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e000      	b.n	8003d0a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <memset>:
 8003d12:	4603      	mov	r3, r0
 8003d14:	4402      	add	r2, r0
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d100      	bne.n	8003d1c <memset+0xa>
 8003d1a:	4770      	bx	lr
 8003d1c:	f803 1b01 	strb.w	r1, [r3], #1
 8003d20:	e7f9      	b.n	8003d16 <memset+0x4>
	...

08003d24 <__errno>:
 8003d24:	4b01      	ldr	r3, [pc, #4]	@ (8003d2c <__errno+0x8>)
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	2000000c 	.word	0x2000000c

08003d30 <__libc_init_array>:
 8003d30:	b570      	push	{r4, r5, r6, lr}
 8003d32:	2600      	movs	r6, #0
 8003d34:	4d0c      	ldr	r5, [pc, #48]	@ (8003d68 <__libc_init_array+0x38>)
 8003d36:	4c0d      	ldr	r4, [pc, #52]	@ (8003d6c <__libc_init_array+0x3c>)
 8003d38:	1b64      	subs	r4, r4, r5
 8003d3a:	10a4      	asrs	r4, r4, #2
 8003d3c:	42a6      	cmp	r6, r4
 8003d3e:	d109      	bne.n	8003d54 <__libc_init_array+0x24>
 8003d40:	f000 ff4c 	bl	8004bdc <_init>
 8003d44:	2600      	movs	r6, #0
 8003d46:	4d0a      	ldr	r5, [pc, #40]	@ (8003d70 <__libc_init_array+0x40>)
 8003d48:	4c0a      	ldr	r4, [pc, #40]	@ (8003d74 <__libc_init_array+0x44>)
 8003d4a:	1b64      	subs	r4, r4, r5
 8003d4c:	10a4      	asrs	r4, r4, #2
 8003d4e:	42a6      	cmp	r6, r4
 8003d50:	d105      	bne.n	8003d5e <__libc_init_array+0x2e>
 8003d52:	bd70      	pop	{r4, r5, r6, pc}
 8003d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d58:	4798      	blx	r3
 8003d5a:	3601      	adds	r6, #1
 8003d5c:	e7ee      	b.n	8003d3c <__libc_init_array+0xc>
 8003d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d62:	4798      	blx	r3
 8003d64:	3601      	adds	r6, #1
 8003d66:	e7f2      	b.n	8003d4e <__libc_init_array+0x1e>
 8003d68:	08004c50 	.word	0x08004c50
 8003d6c:	08004c50 	.word	0x08004c50
 8003d70:	08004c50 	.word	0x08004c50
 8003d74:	08004c54 	.word	0x08004c54

08003d78 <pow>:
 8003d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d7c:	4614      	mov	r4, r2
 8003d7e:	461d      	mov	r5, r3
 8003d80:	4680      	mov	r8, r0
 8003d82:	4689      	mov	r9, r1
 8003d84:	f000 f960 	bl	8004048 <__ieee754_pow>
 8003d88:	4622      	mov	r2, r4
 8003d8a:	4606      	mov	r6, r0
 8003d8c:	460f      	mov	r7, r1
 8003d8e:	462b      	mov	r3, r5
 8003d90:	4620      	mov	r0, r4
 8003d92:	4629      	mov	r1, r5
 8003d94:	f7fc fee6 	bl	8000b64 <__aeabi_dcmpun>
 8003d98:	bbc8      	cbnz	r0, 8003e0e <pow+0x96>
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	4640      	mov	r0, r8
 8003da0:	4649      	mov	r1, r9
 8003da2:	f7fc fead 	bl	8000b00 <__aeabi_dcmpeq>
 8003da6:	b1b8      	cbz	r0, 8003dd8 <pow+0x60>
 8003da8:	2200      	movs	r2, #0
 8003daa:	2300      	movs	r3, #0
 8003dac:	4620      	mov	r0, r4
 8003dae:	4629      	mov	r1, r5
 8003db0:	f7fc fea6 	bl	8000b00 <__aeabi_dcmpeq>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d141      	bne.n	8003e3c <pow+0xc4>
 8003db8:	4620      	mov	r0, r4
 8003dba:	4629      	mov	r1, r5
 8003dbc:	f000 f868 	bl	8003e90 <finite>
 8003dc0:	b328      	cbz	r0, 8003e0e <pow+0x96>
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	4629      	mov	r1, r5
 8003dca:	f7fc fea3 	bl	8000b14 <__aeabi_dcmplt>
 8003dce:	b1f0      	cbz	r0, 8003e0e <pow+0x96>
 8003dd0:	f7ff ffa8 	bl	8003d24 <__errno>
 8003dd4:	2322      	movs	r3, #34	@ 0x22
 8003dd6:	e019      	b.n	8003e0c <pow+0x94>
 8003dd8:	4630      	mov	r0, r6
 8003dda:	4639      	mov	r1, r7
 8003ddc:	f000 f858 	bl	8003e90 <finite>
 8003de0:	b9c8      	cbnz	r0, 8003e16 <pow+0x9e>
 8003de2:	4640      	mov	r0, r8
 8003de4:	4649      	mov	r1, r9
 8003de6:	f000 f853 	bl	8003e90 <finite>
 8003dea:	b1a0      	cbz	r0, 8003e16 <pow+0x9e>
 8003dec:	4620      	mov	r0, r4
 8003dee:	4629      	mov	r1, r5
 8003df0:	f000 f84e 	bl	8003e90 <finite>
 8003df4:	b178      	cbz	r0, 8003e16 <pow+0x9e>
 8003df6:	4632      	mov	r2, r6
 8003df8:	463b      	mov	r3, r7
 8003dfa:	4630      	mov	r0, r6
 8003dfc:	4639      	mov	r1, r7
 8003dfe:	f7fc feb1 	bl	8000b64 <__aeabi_dcmpun>
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d0e4      	beq.n	8003dd0 <pow+0x58>
 8003e06:	f7ff ff8d 	bl	8003d24 <__errno>
 8003e0a:	2321      	movs	r3, #33	@ 0x21
 8003e0c:	6003      	str	r3, [r0, #0]
 8003e0e:	4630      	mov	r0, r6
 8003e10:	4639      	mov	r1, r7
 8003e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e16:	2200      	movs	r2, #0
 8003e18:	2300      	movs	r3, #0
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	4639      	mov	r1, r7
 8003e1e:	f7fc fe6f 	bl	8000b00 <__aeabi_dcmpeq>
 8003e22:	2800      	cmp	r0, #0
 8003e24:	d0f3      	beq.n	8003e0e <pow+0x96>
 8003e26:	4640      	mov	r0, r8
 8003e28:	4649      	mov	r1, r9
 8003e2a:	f000 f831 	bl	8003e90 <finite>
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	d0ed      	beq.n	8003e0e <pow+0x96>
 8003e32:	4620      	mov	r0, r4
 8003e34:	4629      	mov	r1, r5
 8003e36:	f000 f82b 	bl	8003e90 <finite>
 8003e3a:	e7c8      	b.n	8003dce <pow+0x56>
 8003e3c:	2600      	movs	r6, #0
 8003e3e:	4f01      	ldr	r7, [pc, #4]	@ (8003e44 <pow+0xcc>)
 8003e40:	e7e5      	b.n	8003e0e <pow+0x96>
 8003e42:	bf00      	nop
 8003e44:	3ff00000 	.word	0x3ff00000

08003e48 <sqrt>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	4606      	mov	r6, r0
 8003e4c:	460f      	mov	r7, r1
 8003e4e:	f000 f825 	bl	8003e9c <__ieee754_sqrt>
 8003e52:	4632      	mov	r2, r6
 8003e54:	4604      	mov	r4, r0
 8003e56:	460d      	mov	r5, r1
 8003e58:	463b      	mov	r3, r7
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	4639      	mov	r1, r7
 8003e5e:	f7fc fe81 	bl	8000b64 <__aeabi_dcmpun>
 8003e62:	b990      	cbnz	r0, 8003e8a <sqrt+0x42>
 8003e64:	2200      	movs	r2, #0
 8003e66:	2300      	movs	r3, #0
 8003e68:	4630      	mov	r0, r6
 8003e6a:	4639      	mov	r1, r7
 8003e6c:	f7fc fe52 	bl	8000b14 <__aeabi_dcmplt>
 8003e70:	b158      	cbz	r0, 8003e8a <sqrt+0x42>
 8003e72:	f7ff ff57 	bl	8003d24 <__errno>
 8003e76:	2321      	movs	r3, #33	@ 0x21
 8003e78:	2200      	movs	r2, #0
 8003e7a:	6003      	str	r3, [r0, #0]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	4610      	mov	r0, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	f7fc fcff 	bl	8000884 <__aeabi_ddiv>
 8003e86:	4604      	mov	r4, r0
 8003e88:	460d      	mov	r5, r1
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e90 <finite>:
 8003e90:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8003e94:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8003e98:	0fc0      	lsrs	r0, r0, #31
 8003e9a:	4770      	bx	lr

08003e9c <__ieee754_sqrt>:
 8003e9c:	4a67      	ldr	r2, [pc, #412]	@ (800403c <__ieee754_sqrt+0x1a0>)
 8003e9e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea2:	438a      	bics	r2, r1
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	460f      	mov	r7, r1
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4604      	mov	r4, r0
 8003eac:	d10e      	bne.n	8003ecc <__ieee754_sqrt+0x30>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	f7fc fbbe 	bl	8000630 <__aeabi_dmul>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4630      	mov	r0, r6
 8003eba:	4639      	mov	r1, r7
 8003ebc:	f7fc fa02 	bl	80002c4 <__adddf3>
 8003ec0:	4606      	mov	r6, r0
 8003ec2:	460f      	mov	r7, r1
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	4639      	mov	r1, r7
 8003ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ecc:	2900      	cmp	r1, #0
 8003ece:	dc0c      	bgt.n	8003eea <__ieee754_sqrt+0x4e>
 8003ed0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8003ed4:	4302      	orrs	r2, r0
 8003ed6:	d0f5      	beq.n	8003ec4 <__ieee754_sqrt+0x28>
 8003ed8:	b189      	cbz	r1, 8003efe <__ieee754_sqrt+0x62>
 8003eda:	4602      	mov	r2, r0
 8003edc:	f7fc f9f0 	bl	80002c0 <__aeabi_dsub>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	f7fc fcce 	bl	8000884 <__aeabi_ddiv>
 8003ee8:	e7ea      	b.n	8003ec0 <__ieee754_sqrt+0x24>
 8003eea:	150a      	asrs	r2, r1, #20
 8003eec:	d115      	bne.n	8003f1a <__ieee754_sqrt+0x7e>
 8003eee:	2100      	movs	r1, #0
 8003ef0:	e009      	b.n	8003f06 <__ieee754_sqrt+0x6a>
 8003ef2:	0ae3      	lsrs	r3, r4, #11
 8003ef4:	3a15      	subs	r2, #21
 8003ef6:	0564      	lsls	r4, r4, #21
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0fa      	beq.n	8003ef2 <__ieee754_sqrt+0x56>
 8003efc:	e7f7      	b.n	8003eee <__ieee754_sqrt+0x52>
 8003efe:	460a      	mov	r2, r1
 8003f00:	e7fa      	b.n	8003ef8 <__ieee754_sqrt+0x5c>
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	3101      	adds	r1, #1
 8003f06:	02d8      	lsls	r0, r3, #11
 8003f08:	d5fb      	bpl.n	8003f02 <__ieee754_sqrt+0x66>
 8003f0a:	1e48      	subs	r0, r1, #1
 8003f0c:	1a12      	subs	r2, r2, r0
 8003f0e:	f1c1 0020 	rsb	r0, r1, #32
 8003f12:	fa24 f000 	lsr.w	r0, r4, r0
 8003f16:	4303      	orrs	r3, r0
 8003f18:	408c      	lsls	r4, r1
 8003f1a:	2600      	movs	r6, #0
 8003f1c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8003f20:	2116      	movs	r1, #22
 8003f22:	07d2      	lsls	r2, r2, #31
 8003f24:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003f28:	4632      	mov	r2, r6
 8003f2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f32:	bf5c      	itt	pl
 8003f34:	005b      	lslpl	r3, r3, #1
 8003f36:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8003f3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f3e:	bf58      	it	pl
 8003f40:	0064      	lslpl	r4, r4, #1
 8003f42:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003f46:	107f      	asrs	r7, r7, #1
 8003f48:	0064      	lsls	r4, r4, #1
 8003f4a:	1815      	adds	r5, r2, r0
 8003f4c:	429d      	cmp	r5, r3
 8003f4e:	bfde      	ittt	le
 8003f50:	182a      	addle	r2, r5, r0
 8003f52:	1b5b      	suble	r3, r3, r5
 8003f54:	1836      	addle	r6, r6, r0
 8003f56:	0fe5      	lsrs	r5, r4, #31
 8003f58:	3901      	subs	r1, #1
 8003f5a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8003f5e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003f62:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8003f66:	d1f0      	bne.n	8003f4a <__ieee754_sqrt+0xae>
 8003f68:	460d      	mov	r5, r1
 8003f6a:	f04f 0a20 	mov.w	sl, #32
 8003f6e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8003f72:	429a      	cmp	r2, r3
 8003f74:	eb01 0c00 	add.w	ip, r1, r0
 8003f78:	db02      	blt.n	8003f80 <__ieee754_sqrt+0xe4>
 8003f7a:	d113      	bne.n	8003fa4 <__ieee754_sqrt+0x108>
 8003f7c:	45a4      	cmp	ip, r4
 8003f7e:	d811      	bhi.n	8003fa4 <__ieee754_sqrt+0x108>
 8003f80:	f1bc 0f00 	cmp.w	ip, #0
 8003f84:	eb0c 0100 	add.w	r1, ip, r0
 8003f88:	da42      	bge.n	8004010 <__ieee754_sqrt+0x174>
 8003f8a:	2900      	cmp	r1, #0
 8003f8c:	db40      	blt.n	8004010 <__ieee754_sqrt+0x174>
 8003f8e:	f102 0e01 	add.w	lr, r2, #1
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	4672      	mov	r2, lr
 8003f96:	45a4      	cmp	ip, r4
 8003f98:	bf88      	it	hi
 8003f9a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003f9e:	eba4 040c 	sub.w	r4, r4, ip
 8003fa2:	4405      	add	r5, r0
 8003fa4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8003fa8:	f1ba 0a01 	subs.w	sl, sl, #1
 8003fac:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8003fb0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003fb4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8003fb8:	d1db      	bne.n	8003f72 <__ieee754_sqrt+0xd6>
 8003fba:	431c      	orrs	r4, r3
 8003fbc:	d01a      	beq.n	8003ff4 <__ieee754_sqrt+0x158>
 8003fbe:	4c20      	ldr	r4, [pc, #128]	@ (8004040 <__ieee754_sqrt+0x1a4>)
 8003fc0:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8004044 <__ieee754_sqrt+0x1a8>
 8003fc4:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003fc8:	e9db 2300 	ldrd	r2, r3, [fp]
 8003fcc:	f7fc f978 	bl	80002c0 <__aeabi_dsub>
 8003fd0:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4640      	mov	r0, r8
 8003fda:	4649      	mov	r1, r9
 8003fdc:	f7fc fda4 	bl	8000b28 <__aeabi_dcmple>
 8003fe0:	b140      	cbz	r0, 8003ff4 <__ieee754_sqrt+0x158>
 8003fe2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003fe6:	e9db 2300 	ldrd	r2, r3, [fp]
 8003fea:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003fee:	d111      	bne.n	8004014 <__ieee754_sqrt+0x178>
 8003ff0:	4655      	mov	r5, sl
 8003ff2:	3601      	adds	r6, #1
 8003ff4:	1072      	asrs	r2, r6, #1
 8003ff6:	086b      	lsrs	r3, r5, #1
 8003ff8:	07f1      	lsls	r1, r6, #31
 8003ffa:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8003ffe:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8004002:	bf48      	it	mi
 8004004:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8004008:	4618      	mov	r0, r3
 800400a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800400e:	e757      	b.n	8003ec0 <__ieee754_sqrt+0x24>
 8004010:	4696      	mov	lr, r2
 8004012:	e7be      	b.n	8003f92 <__ieee754_sqrt+0xf6>
 8004014:	f7fc f956 	bl	80002c4 <__adddf3>
 8004018:	e9d4 8900 	ldrd	r8, r9, [r4]
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4640      	mov	r0, r8
 8004022:	4649      	mov	r1, r9
 8004024:	f7fc fd76 	bl	8000b14 <__aeabi_dcmplt>
 8004028:	b120      	cbz	r0, 8004034 <__ieee754_sqrt+0x198>
 800402a:	1ca8      	adds	r0, r5, #2
 800402c:	bf08      	it	eq
 800402e:	3601      	addeq	r6, #1
 8004030:	3502      	adds	r5, #2
 8004032:	e7df      	b.n	8003ff4 <__ieee754_sqrt+0x158>
 8004034:	1c6b      	adds	r3, r5, #1
 8004036:	f023 0501 	bic.w	r5, r3, #1
 800403a:	e7db      	b.n	8003ff4 <__ieee754_sqrt+0x158>
 800403c:	7ff00000 	.word	0x7ff00000
 8004040:	20000068 	.word	0x20000068
 8004044:	20000060 	.word	0x20000060

08004048 <__ieee754_pow>:
 8004048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800404c:	b091      	sub	sp, #68	@ 0x44
 800404e:	e9cd 2300 	strd	r2, r3, [sp]
 8004052:	468b      	mov	fp, r1
 8004054:	e9dd 1800 	ldrd	r1, r8, [sp]
 8004058:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800405c:	4682      	mov	sl, r0
 800405e:	ea57 0001 	orrs.w	r0, r7, r1
 8004062:	d112      	bne.n	800408a <__ieee754_pow+0x42>
 8004064:	4653      	mov	r3, sl
 8004066:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800406a:	18db      	adds	r3, r3, r3
 800406c:	4152      	adcs	r2, r2
 800406e:	4298      	cmp	r0, r3
 8004070:	4b91      	ldr	r3, [pc, #580]	@ (80042b8 <__ieee754_pow+0x270>)
 8004072:	4193      	sbcs	r3, r2
 8004074:	f080 84ce 	bcs.w	8004a14 <__ieee754_pow+0x9cc>
 8004078:	e9dd 2300 	ldrd	r2, r3, [sp]
 800407c:	4650      	mov	r0, sl
 800407e:	4659      	mov	r1, fp
 8004080:	f7fc f920 	bl	80002c4 <__adddf3>
 8004084:	b011      	add	sp, #68	@ 0x44
 8004086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408a:	4b8c      	ldr	r3, [pc, #560]	@ (80042bc <__ieee754_pow+0x274>)
 800408c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8004090:	429e      	cmp	r6, r3
 8004092:	465d      	mov	r5, fp
 8004094:	46d1      	mov	r9, sl
 8004096:	d807      	bhi.n	80040a8 <__ieee754_pow+0x60>
 8004098:	d102      	bne.n	80040a0 <__ieee754_pow+0x58>
 800409a:	f1ba 0f00 	cmp.w	sl, #0
 800409e:	d1eb      	bne.n	8004078 <__ieee754_pow+0x30>
 80040a0:	429f      	cmp	r7, r3
 80040a2:	d801      	bhi.n	80040a8 <__ieee754_pow+0x60>
 80040a4:	d10f      	bne.n	80040c6 <__ieee754_pow+0x7e>
 80040a6:	b171      	cbz	r1, 80040c6 <__ieee754_pow+0x7e>
 80040a8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80040ac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80040b0:	ea55 0509 	orrs.w	r5, r5, r9
 80040b4:	d1e0      	bne.n	8004078 <__ieee754_pow+0x30>
 80040b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80040ba:	18db      	adds	r3, r3, r3
 80040bc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80040c0:	4152      	adcs	r2, r2
 80040c2:	429d      	cmp	r5, r3
 80040c4:	e7d4      	b.n	8004070 <__ieee754_pow+0x28>
 80040c6:	2d00      	cmp	r5, #0
 80040c8:	4633      	mov	r3, r6
 80040ca:	da39      	bge.n	8004140 <__ieee754_pow+0xf8>
 80040cc:	4a7c      	ldr	r2, [pc, #496]	@ (80042c0 <__ieee754_pow+0x278>)
 80040ce:	4297      	cmp	r7, r2
 80040d0:	d84e      	bhi.n	8004170 <__ieee754_pow+0x128>
 80040d2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80040d6:	4297      	cmp	r7, r2
 80040d8:	f240 84ab 	bls.w	8004a32 <__ieee754_pow+0x9ea>
 80040dc:	153a      	asrs	r2, r7, #20
 80040de:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80040e2:	2a14      	cmp	r2, #20
 80040e4:	dd0f      	ble.n	8004106 <__ieee754_pow+0xbe>
 80040e6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80040ea:	fa21 f402 	lsr.w	r4, r1, r2
 80040ee:	fa04 f202 	lsl.w	r2, r4, r2
 80040f2:	428a      	cmp	r2, r1
 80040f4:	f040 849d 	bne.w	8004a32 <__ieee754_pow+0x9ea>
 80040f8:	f004 0401 	and.w	r4, r4, #1
 80040fc:	f1c4 0402 	rsb	r4, r4, #2
 8004100:	2900      	cmp	r1, #0
 8004102:	d15a      	bne.n	80041ba <__ieee754_pow+0x172>
 8004104:	e00e      	b.n	8004124 <__ieee754_pow+0xdc>
 8004106:	2900      	cmp	r1, #0
 8004108:	d156      	bne.n	80041b8 <__ieee754_pow+0x170>
 800410a:	f1c2 0214 	rsb	r2, r2, #20
 800410e:	fa47 f402 	asr.w	r4, r7, r2
 8004112:	fa04 f202 	lsl.w	r2, r4, r2
 8004116:	42ba      	cmp	r2, r7
 8004118:	f040 8488 	bne.w	8004a2c <__ieee754_pow+0x9e4>
 800411c:	f004 0401 	and.w	r4, r4, #1
 8004120:	f1c4 0402 	rsb	r4, r4, #2
 8004124:	4a67      	ldr	r2, [pc, #412]	@ (80042c4 <__ieee754_pow+0x27c>)
 8004126:	4297      	cmp	r7, r2
 8004128:	d130      	bne.n	800418c <__ieee754_pow+0x144>
 800412a:	f1b8 0f00 	cmp.w	r8, #0
 800412e:	f280 8479 	bge.w	8004a24 <__ieee754_pow+0x9dc>
 8004132:	4652      	mov	r2, sl
 8004134:	465b      	mov	r3, fp
 8004136:	2000      	movs	r0, #0
 8004138:	4962      	ldr	r1, [pc, #392]	@ (80042c4 <__ieee754_pow+0x27c>)
 800413a:	f7fc fba3 	bl	8000884 <__aeabi_ddiv>
 800413e:	e7a1      	b.n	8004084 <__ieee754_pow+0x3c>
 8004140:	2400      	movs	r4, #0
 8004142:	2900      	cmp	r1, #0
 8004144:	d139      	bne.n	80041ba <__ieee754_pow+0x172>
 8004146:	4a5d      	ldr	r2, [pc, #372]	@ (80042bc <__ieee754_pow+0x274>)
 8004148:	4297      	cmp	r7, r2
 800414a:	d1eb      	bne.n	8004124 <__ieee754_pow+0xdc>
 800414c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8004150:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8004154:	ea53 0309 	orrs.w	r3, r3, r9
 8004158:	f000 845c 	beq.w	8004a14 <__ieee754_pow+0x9cc>
 800415c:	4b5a      	ldr	r3, [pc, #360]	@ (80042c8 <__ieee754_pow+0x280>)
 800415e:	429e      	cmp	r6, r3
 8004160:	d908      	bls.n	8004174 <__ieee754_pow+0x12c>
 8004162:	f1b8 0f00 	cmp.w	r8, #0
 8004166:	f2c0 8459 	blt.w	8004a1c <__ieee754_pow+0x9d4>
 800416a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800416e:	e789      	b.n	8004084 <__ieee754_pow+0x3c>
 8004170:	2402      	movs	r4, #2
 8004172:	e7e6      	b.n	8004142 <__ieee754_pow+0xfa>
 8004174:	f1b8 0f00 	cmp.w	r8, #0
 8004178:	f04f 0000 	mov.w	r0, #0
 800417c:	f04f 0100 	mov.w	r1, #0
 8004180:	da80      	bge.n	8004084 <__ieee754_pow+0x3c>
 8004182:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004186:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800418a:	e77b      	b.n	8004084 <__ieee754_pow+0x3c>
 800418c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8004190:	d106      	bne.n	80041a0 <__ieee754_pow+0x158>
 8004192:	4652      	mov	r2, sl
 8004194:	465b      	mov	r3, fp
 8004196:	4650      	mov	r0, sl
 8004198:	4659      	mov	r1, fp
 800419a:	f7fc fa49 	bl	8000630 <__aeabi_dmul>
 800419e:	e771      	b.n	8004084 <__ieee754_pow+0x3c>
 80041a0:	4a4a      	ldr	r2, [pc, #296]	@ (80042cc <__ieee754_pow+0x284>)
 80041a2:	4590      	cmp	r8, r2
 80041a4:	d109      	bne.n	80041ba <__ieee754_pow+0x172>
 80041a6:	2d00      	cmp	r5, #0
 80041a8:	db07      	blt.n	80041ba <__ieee754_pow+0x172>
 80041aa:	4650      	mov	r0, sl
 80041ac:	4659      	mov	r1, fp
 80041ae:	b011      	add	sp, #68	@ 0x44
 80041b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b4:	f7ff be72 	b.w	8003e9c <__ieee754_sqrt>
 80041b8:	2400      	movs	r4, #0
 80041ba:	4650      	mov	r0, sl
 80041bc:	4659      	mov	r1, fp
 80041be:	9302      	str	r3, [sp, #8]
 80041c0:	f000 fc6a 	bl	8004a98 <fabs>
 80041c4:	9b02      	ldr	r3, [sp, #8]
 80041c6:	f1b9 0f00 	cmp.w	r9, #0
 80041ca:	d127      	bne.n	800421c <__ieee754_pow+0x1d4>
 80041cc:	4a3d      	ldr	r2, [pc, #244]	@ (80042c4 <__ieee754_pow+0x27c>)
 80041ce:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 80041d2:	4594      	cmp	ip, r2
 80041d4:	d000      	beq.n	80041d8 <__ieee754_pow+0x190>
 80041d6:	bb0e      	cbnz	r6, 800421c <__ieee754_pow+0x1d4>
 80041d8:	f1b8 0f00 	cmp.w	r8, #0
 80041dc:	da05      	bge.n	80041ea <__ieee754_pow+0x1a2>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	2000      	movs	r0, #0
 80041e4:	4937      	ldr	r1, [pc, #220]	@ (80042c4 <__ieee754_pow+0x27c>)
 80041e6:	f7fc fb4d 	bl	8000884 <__aeabi_ddiv>
 80041ea:	2d00      	cmp	r5, #0
 80041ec:	f6bf af4a 	bge.w	8004084 <__ieee754_pow+0x3c>
 80041f0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80041f4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80041f8:	4326      	orrs	r6, r4
 80041fa:	d108      	bne.n	800420e <__ieee754_pow+0x1c6>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	f7fc f85c 	bl	80002c0 <__aeabi_dsub>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	e795      	b.n	800413a <__ieee754_pow+0xf2>
 800420e:	2c01      	cmp	r4, #1
 8004210:	f47f af38 	bne.w	8004084 <__ieee754_pow+0x3c>
 8004214:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004218:	4619      	mov	r1, r3
 800421a:	e733      	b.n	8004084 <__ieee754_pow+0x3c>
 800421c:	0fea      	lsrs	r2, r5, #31
 800421e:	3a01      	subs	r2, #1
 8004220:	ea52 0c04 	orrs.w	ip, r2, r4
 8004224:	d102      	bne.n	800422c <__ieee754_pow+0x1e4>
 8004226:	4652      	mov	r2, sl
 8004228:	465b      	mov	r3, fp
 800422a:	e7e9      	b.n	8004200 <__ieee754_pow+0x1b8>
 800422c:	f04f 0900 	mov.w	r9, #0
 8004230:	3c01      	subs	r4, #1
 8004232:	4314      	orrs	r4, r2
 8004234:	bf14      	ite	ne
 8004236:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 80042c4 <__ieee754_pow+0x27c>
 800423a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80042d0 <__ieee754_pow+0x288>
 800423e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8004242:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8004246:	f240 8107 	bls.w	8004458 <__ieee754_pow+0x410>
 800424a:	4b22      	ldr	r3, [pc, #136]	@ (80042d4 <__ieee754_pow+0x28c>)
 800424c:	429f      	cmp	r7, r3
 800424e:	4b1e      	ldr	r3, [pc, #120]	@ (80042c8 <__ieee754_pow+0x280>)
 8004250:	d913      	bls.n	800427a <__ieee754_pow+0x232>
 8004252:	429e      	cmp	r6, r3
 8004254:	d808      	bhi.n	8004268 <__ieee754_pow+0x220>
 8004256:	f1b8 0f00 	cmp.w	r8, #0
 800425a:	da08      	bge.n	800426e <__ieee754_pow+0x226>
 800425c:	2000      	movs	r0, #0
 800425e:	b011      	add	sp, #68	@ 0x44
 8004260:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004264:	f000 bcb4 	b.w	8004bd0 <__math_oflow>
 8004268:	f1b8 0f00 	cmp.w	r8, #0
 800426c:	dcf6      	bgt.n	800425c <__ieee754_pow+0x214>
 800426e:	2000      	movs	r0, #0
 8004270:	b011      	add	sp, #68	@ 0x44
 8004272:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004276:	f000 bca6 	b.w	8004bc6 <__math_uflow>
 800427a:	429e      	cmp	r6, r3
 800427c:	d20c      	bcs.n	8004298 <__ieee754_pow+0x250>
 800427e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004282:	2200      	movs	r2, #0
 8004284:	2300      	movs	r3, #0
 8004286:	f7fc fc45 	bl	8000b14 <__aeabi_dcmplt>
 800428a:	3800      	subs	r0, #0
 800428c:	bf18      	it	ne
 800428e:	2001      	movne	r0, #1
 8004290:	f1b8 0f00 	cmp.w	r8, #0
 8004294:	daec      	bge.n	8004270 <__ieee754_pow+0x228>
 8004296:	e7e2      	b.n	800425e <__ieee754_pow+0x216>
 8004298:	4b0a      	ldr	r3, [pc, #40]	@ (80042c4 <__ieee754_pow+0x27c>)
 800429a:	2200      	movs	r2, #0
 800429c:	429e      	cmp	r6, r3
 800429e:	d91b      	bls.n	80042d8 <__ieee754_pow+0x290>
 80042a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042a4:	2300      	movs	r3, #0
 80042a6:	f7fc fc35 	bl	8000b14 <__aeabi_dcmplt>
 80042aa:	3800      	subs	r0, #0
 80042ac:	bf18      	it	ne
 80042ae:	2001      	movne	r0, #1
 80042b0:	f1b8 0f00 	cmp.w	r8, #0
 80042b4:	dcd3      	bgt.n	800425e <__ieee754_pow+0x216>
 80042b6:	e7db      	b.n	8004270 <__ieee754_pow+0x228>
 80042b8:	fff00000 	.word	0xfff00000
 80042bc:	7ff00000 	.word	0x7ff00000
 80042c0:	433fffff 	.word	0x433fffff
 80042c4:	3ff00000 	.word	0x3ff00000
 80042c8:	3fefffff 	.word	0x3fefffff
 80042cc:	3fe00000 	.word	0x3fe00000
 80042d0:	bff00000 	.word	0xbff00000
 80042d4:	43f00000 	.word	0x43f00000
 80042d8:	4b5b      	ldr	r3, [pc, #364]	@ (8004448 <__ieee754_pow+0x400>)
 80042da:	f7fb fff1 	bl	80002c0 <__aeabi_dsub>
 80042de:	a352      	add	r3, pc, #328	@ (adr r3, 8004428 <__ieee754_pow+0x3e0>)
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	4604      	mov	r4, r0
 80042e6:	460d      	mov	r5, r1
 80042e8:	f7fc f9a2 	bl	8000630 <__aeabi_dmul>
 80042ec:	a350      	add	r3, pc, #320	@ (adr r3, 8004430 <__ieee754_pow+0x3e8>)
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	4606      	mov	r6, r0
 80042f4:	460f      	mov	r7, r1
 80042f6:	4620      	mov	r0, r4
 80042f8:	4629      	mov	r1, r5
 80042fa:	f7fc f999 	bl	8000630 <__aeabi_dmul>
 80042fe:	2200      	movs	r2, #0
 8004300:	4682      	mov	sl, r0
 8004302:	468b      	mov	fp, r1
 8004304:	4620      	mov	r0, r4
 8004306:	4629      	mov	r1, r5
 8004308:	4b50      	ldr	r3, [pc, #320]	@ (800444c <__ieee754_pow+0x404>)
 800430a:	f7fc f991 	bl	8000630 <__aeabi_dmul>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	a149      	add	r1, pc, #292	@ (adr r1, 8004438 <__ieee754_pow+0x3f0>)
 8004314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004318:	f7fb ffd2 	bl	80002c0 <__aeabi_dsub>
 800431c:	4622      	mov	r2, r4
 800431e:	462b      	mov	r3, r5
 8004320:	f7fc f986 	bl	8000630 <__aeabi_dmul>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	2000      	movs	r0, #0
 800432a:	4949      	ldr	r1, [pc, #292]	@ (8004450 <__ieee754_pow+0x408>)
 800432c:	f7fb ffc8 	bl	80002c0 <__aeabi_dsub>
 8004330:	4622      	mov	r2, r4
 8004332:	4680      	mov	r8, r0
 8004334:	4689      	mov	r9, r1
 8004336:	462b      	mov	r3, r5
 8004338:	4620      	mov	r0, r4
 800433a:	4629      	mov	r1, r5
 800433c:	f7fc f978 	bl	8000630 <__aeabi_dmul>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4640      	mov	r0, r8
 8004346:	4649      	mov	r1, r9
 8004348:	f7fc f972 	bl	8000630 <__aeabi_dmul>
 800434c:	a33c      	add	r3, pc, #240	@ (adr r3, 8004440 <__ieee754_pow+0x3f8>)
 800434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004352:	f7fc f96d 	bl	8000630 <__aeabi_dmul>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4650      	mov	r0, sl
 800435c:	4659      	mov	r1, fp
 800435e:	f7fb ffaf 	bl	80002c0 <__aeabi_dsub>
 8004362:	2400      	movs	r4, #0
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4680      	mov	r8, r0
 800436a:	4689      	mov	r9, r1
 800436c:	4630      	mov	r0, r6
 800436e:	4639      	mov	r1, r7
 8004370:	f7fb ffa8 	bl	80002c4 <__adddf3>
 8004374:	4632      	mov	r2, r6
 8004376:	463b      	mov	r3, r7
 8004378:	4620      	mov	r0, r4
 800437a:	460d      	mov	r5, r1
 800437c:	f7fb ffa0 	bl	80002c0 <__aeabi_dsub>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4640      	mov	r0, r8
 8004386:	4649      	mov	r1, r9
 8004388:	f7fb ff9a 	bl	80002c0 <__aeabi_dsub>
 800438c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004390:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004394:	2300      	movs	r3, #0
 8004396:	9304      	str	r3, [sp, #16]
 8004398:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800439c:	4606      	mov	r6, r0
 800439e:	460f      	mov	r7, r1
 80043a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043a4:	4652      	mov	r2, sl
 80043a6:	465b      	mov	r3, fp
 80043a8:	f7fb ff8a 	bl	80002c0 <__aeabi_dsub>
 80043ac:	4622      	mov	r2, r4
 80043ae:	462b      	mov	r3, r5
 80043b0:	f7fc f93e 	bl	8000630 <__aeabi_dmul>
 80043b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043b8:	4680      	mov	r8, r0
 80043ba:	4689      	mov	r9, r1
 80043bc:	4630      	mov	r0, r6
 80043be:	4639      	mov	r1, r7
 80043c0:	f7fc f936 	bl	8000630 <__aeabi_dmul>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4640      	mov	r0, r8
 80043ca:	4649      	mov	r1, r9
 80043cc:	f7fb ff7a 	bl	80002c4 <__adddf3>
 80043d0:	4652      	mov	r2, sl
 80043d2:	465b      	mov	r3, fp
 80043d4:	4606      	mov	r6, r0
 80043d6:	460f      	mov	r7, r1
 80043d8:	4620      	mov	r0, r4
 80043da:	4629      	mov	r1, r5
 80043dc:	f7fc f928 	bl	8000630 <__aeabi_dmul>
 80043e0:	460b      	mov	r3, r1
 80043e2:	4602      	mov	r2, r0
 80043e4:	4680      	mov	r8, r0
 80043e6:	4689      	mov	r9, r1
 80043e8:	4630      	mov	r0, r6
 80043ea:	4639      	mov	r1, r7
 80043ec:	f7fb ff6a 	bl	80002c4 <__adddf3>
 80043f0:	4b18      	ldr	r3, [pc, #96]	@ (8004454 <__ieee754_pow+0x40c>)
 80043f2:	4604      	mov	r4, r0
 80043f4:	4299      	cmp	r1, r3
 80043f6:	460d      	mov	r5, r1
 80043f8:	468a      	mov	sl, r1
 80043fa:	468b      	mov	fp, r1
 80043fc:	f340 82e0 	ble.w	80049c0 <__ieee754_pow+0x978>
 8004400:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8004404:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8004408:	4303      	orrs	r3, r0
 800440a:	f000 81df 	beq.w	80047cc <__ieee754_pow+0x784>
 800440e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004412:	2200      	movs	r2, #0
 8004414:	2300      	movs	r3, #0
 8004416:	f7fc fb7d 	bl	8000b14 <__aeabi_dcmplt>
 800441a:	3800      	subs	r0, #0
 800441c:	bf18      	it	ne
 800441e:	2001      	movne	r0, #1
 8004420:	e71d      	b.n	800425e <__ieee754_pow+0x216>
 8004422:	bf00      	nop
 8004424:	f3af 8000 	nop.w
 8004428:	60000000 	.word	0x60000000
 800442c:	3ff71547 	.word	0x3ff71547
 8004430:	f85ddf44 	.word	0xf85ddf44
 8004434:	3e54ae0b 	.word	0x3e54ae0b
 8004438:	55555555 	.word	0x55555555
 800443c:	3fd55555 	.word	0x3fd55555
 8004440:	652b82fe 	.word	0x652b82fe
 8004444:	3ff71547 	.word	0x3ff71547
 8004448:	3ff00000 	.word	0x3ff00000
 800444c:	3fd00000 	.word	0x3fd00000
 8004450:	3fe00000 	.word	0x3fe00000
 8004454:	408fffff 	.word	0x408fffff
 8004458:	4ad3      	ldr	r2, [pc, #844]	@ (80047a8 <__ieee754_pow+0x760>)
 800445a:	402a      	ands	r2, r5
 800445c:	2a00      	cmp	r2, #0
 800445e:	f040 817a 	bne.w	8004756 <__ieee754_pow+0x70e>
 8004462:	4bd2      	ldr	r3, [pc, #840]	@ (80047ac <__ieee754_pow+0x764>)
 8004464:	2200      	movs	r2, #0
 8004466:	f7fc f8e3 	bl	8000630 <__aeabi_dmul>
 800446a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800446e:	460b      	mov	r3, r1
 8004470:	151a      	asrs	r2, r3, #20
 8004472:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8004476:	4422      	add	r2, r4
 8004478:	920a      	str	r2, [sp, #40]	@ 0x28
 800447a:	4acd      	ldr	r2, [pc, #820]	@ (80047b0 <__ieee754_pow+0x768>)
 800447c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004480:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8004484:	4293      	cmp	r3, r2
 8004486:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800448a:	dd08      	ble.n	800449e <__ieee754_pow+0x456>
 800448c:	4ac9      	ldr	r2, [pc, #804]	@ (80047b4 <__ieee754_pow+0x76c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	f340 8163 	ble.w	800475a <__ieee754_pow+0x712>
 8004494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004496:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800449a:	3301      	adds	r3, #1
 800449c:	930a      	str	r3, [sp, #40]	@ 0x28
 800449e:	2600      	movs	r6, #0
 80044a0:	00f3      	lsls	r3, r6, #3
 80044a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044a4:	4bc4      	ldr	r3, [pc, #784]	@ (80047b8 <__ieee754_pow+0x770>)
 80044a6:	4629      	mov	r1, r5
 80044a8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80044ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044b0:	461a      	mov	r2, r3
 80044b2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80044b6:	4623      	mov	r3, r4
 80044b8:	4682      	mov	sl, r0
 80044ba:	f7fb ff01 	bl	80002c0 <__aeabi_dsub>
 80044be:	4652      	mov	r2, sl
 80044c0:	462b      	mov	r3, r5
 80044c2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80044c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80044ca:	f7fb fefb 	bl	80002c4 <__adddf3>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	2000      	movs	r0, #0
 80044d4:	49b9      	ldr	r1, [pc, #740]	@ (80047bc <__ieee754_pow+0x774>)
 80044d6:	f7fc f9d5 	bl	8000884 <__aeabi_ddiv>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80044e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80044e6:	f7fc f8a3 	bl	8000630 <__aeabi_dmul>
 80044ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80044ee:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80044f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80044f6:	2300      	movs	r3, #0
 80044f8:	2200      	movs	r2, #0
 80044fa:	46ab      	mov	fp, r5
 80044fc:	106d      	asrs	r5, r5, #1
 80044fe:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8004502:	9304      	str	r3, [sp, #16]
 8004504:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8004508:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800450c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004510:	4640      	mov	r0, r8
 8004512:	4649      	mov	r1, r9
 8004514:	4614      	mov	r4, r2
 8004516:	461d      	mov	r5, r3
 8004518:	f7fc f88a 	bl	8000630 <__aeabi_dmul>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004524:	f7fb fecc 	bl	80002c0 <__aeabi_dsub>
 8004528:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800452c:	4606      	mov	r6, r0
 800452e:	460f      	mov	r7, r1
 8004530:	4620      	mov	r0, r4
 8004532:	4629      	mov	r1, r5
 8004534:	f7fb fec4 	bl	80002c0 <__aeabi_dsub>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4650      	mov	r0, sl
 800453e:	4659      	mov	r1, fp
 8004540:	f7fb febe 	bl	80002c0 <__aeabi_dsub>
 8004544:	4642      	mov	r2, r8
 8004546:	464b      	mov	r3, r9
 8004548:	f7fc f872 	bl	8000630 <__aeabi_dmul>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4630      	mov	r0, r6
 8004552:	4639      	mov	r1, r7
 8004554:	f7fb feb4 	bl	80002c0 <__aeabi_dsub>
 8004558:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800455c:	f7fc f868 	bl	8000630 <__aeabi_dmul>
 8004560:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004564:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004568:	4610      	mov	r0, r2
 800456a:	4619      	mov	r1, r3
 800456c:	f7fc f860 	bl	8000630 <__aeabi_dmul>
 8004570:	a37b      	add	r3, pc, #492	@ (adr r3, 8004760 <__ieee754_pow+0x718>)
 8004572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004576:	4604      	mov	r4, r0
 8004578:	460d      	mov	r5, r1
 800457a:	f7fc f859 	bl	8000630 <__aeabi_dmul>
 800457e:	a37a      	add	r3, pc, #488	@ (adr r3, 8004768 <__ieee754_pow+0x720>)
 8004580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004584:	f7fb fe9e 	bl	80002c4 <__adddf3>
 8004588:	4622      	mov	r2, r4
 800458a:	462b      	mov	r3, r5
 800458c:	f7fc f850 	bl	8000630 <__aeabi_dmul>
 8004590:	a377      	add	r3, pc, #476	@ (adr r3, 8004770 <__ieee754_pow+0x728>)
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	f7fb fe95 	bl	80002c4 <__adddf3>
 800459a:	4622      	mov	r2, r4
 800459c:	462b      	mov	r3, r5
 800459e:	f7fc f847 	bl	8000630 <__aeabi_dmul>
 80045a2:	a375      	add	r3, pc, #468	@ (adr r3, 8004778 <__ieee754_pow+0x730>)
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	f7fb fe8c 	bl	80002c4 <__adddf3>
 80045ac:	4622      	mov	r2, r4
 80045ae:	462b      	mov	r3, r5
 80045b0:	f7fc f83e 	bl	8000630 <__aeabi_dmul>
 80045b4:	a372      	add	r3, pc, #456	@ (adr r3, 8004780 <__ieee754_pow+0x738>)
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f7fb fe83 	bl	80002c4 <__adddf3>
 80045be:	4622      	mov	r2, r4
 80045c0:	462b      	mov	r3, r5
 80045c2:	f7fc f835 	bl	8000630 <__aeabi_dmul>
 80045c6:	a370      	add	r3, pc, #448	@ (adr r3, 8004788 <__ieee754_pow+0x740>)
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	f7fb fe7a 	bl	80002c4 <__adddf3>
 80045d0:	4622      	mov	r2, r4
 80045d2:	4606      	mov	r6, r0
 80045d4:	460f      	mov	r7, r1
 80045d6:	462b      	mov	r3, r5
 80045d8:	4620      	mov	r0, r4
 80045da:	4629      	mov	r1, r5
 80045dc:	f7fc f828 	bl	8000630 <__aeabi_dmul>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4630      	mov	r0, r6
 80045e6:	4639      	mov	r1, r7
 80045e8:	f7fc f822 	bl	8000630 <__aeabi_dmul>
 80045ec:	4604      	mov	r4, r0
 80045ee:	460d      	mov	r5, r1
 80045f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	f7fb fe64 	bl	80002c4 <__adddf3>
 80045fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004600:	f7fc f816 	bl	8000630 <__aeabi_dmul>
 8004604:	4622      	mov	r2, r4
 8004606:	462b      	mov	r3, r5
 8004608:	f7fb fe5c 	bl	80002c4 <__adddf3>
 800460c:	4642      	mov	r2, r8
 800460e:	4682      	mov	sl, r0
 8004610:	468b      	mov	fp, r1
 8004612:	464b      	mov	r3, r9
 8004614:	4640      	mov	r0, r8
 8004616:	4649      	mov	r1, r9
 8004618:	f7fc f80a 	bl	8000630 <__aeabi_dmul>
 800461c:	2200      	movs	r2, #0
 800461e:	4b68      	ldr	r3, [pc, #416]	@ (80047c0 <__ieee754_pow+0x778>)
 8004620:	4606      	mov	r6, r0
 8004622:	460f      	mov	r7, r1
 8004624:	f7fb fe4e 	bl	80002c4 <__adddf3>
 8004628:	4652      	mov	r2, sl
 800462a:	465b      	mov	r3, fp
 800462c:	f7fb fe4a 	bl	80002c4 <__adddf3>
 8004630:	2400      	movs	r4, #0
 8004632:	460d      	mov	r5, r1
 8004634:	4622      	mov	r2, r4
 8004636:	460b      	mov	r3, r1
 8004638:	4640      	mov	r0, r8
 800463a:	4649      	mov	r1, r9
 800463c:	f7fb fff8 	bl	8000630 <__aeabi_dmul>
 8004640:	2200      	movs	r2, #0
 8004642:	4680      	mov	r8, r0
 8004644:	4689      	mov	r9, r1
 8004646:	4620      	mov	r0, r4
 8004648:	4629      	mov	r1, r5
 800464a:	4b5d      	ldr	r3, [pc, #372]	@ (80047c0 <__ieee754_pow+0x778>)
 800464c:	f7fb fe38 	bl	80002c0 <__aeabi_dsub>
 8004650:	4632      	mov	r2, r6
 8004652:	463b      	mov	r3, r7
 8004654:	f7fb fe34 	bl	80002c0 <__aeabi_dsub>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4650      	mov	r0, sl
 800465e:	4659      	mov	r1, fp
 8004660:	f7fb fe2e 	bl	80002c0 <__aeabi_dsub>
 8004664:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004668:	f7fb ffe2 	bl	8000630 <__aeabi_dmul>
 800466c:	4622      	mov	r2, r4
 800466e:	4606      	mov	r6, r0
 8004670:	460f      	mov	r7, r1
 8004672:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004676:	462b      	mov	r3, r5
 8004678:	f7fb ffda 	bl	8000630 <__aeabi_dmul>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4630      	mov	r0, r6
 8004682:	4639      	mov	r1, r7
 8004684:	f7fb fe1e 	bl	80002c4 <__adddf3>
 8004688:	2400      	movs	r4, #0
 800468a:	4606      	mov	r6, r0
 800468c:	460f      	mov	r7, r1
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4640      	mov	r0, r8
 8004694:	4649      	mov	r1, r9
 8004696:	f7fb fe15 	bl	80002c4 <__adddf3>
 800469a:	a33d      	add	r3, pc, #244	@ (adr r3, 8004790 <__ieee754_pow+0x748>)
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	4620      	mov	r0, r4
 80046a2:	460d      	mov	r5, r1
 80046a4:	f7fb ffc4 	bl	8000630 <__aeabi_dmul>
 80046a8:	4642      	mov	r2, r8
 80046aa:	464b      	mov	r3, r9
 80046ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80046b0:	4620      	mov	r0, r4
 80046b2:	4629      	mov	r1, r5
 80046b4:	f7fb fe04 	bl	80002c0 <__aeabi_dsub>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4630      	mov	r0, r6
 80046be:	4639      	mov	r1, r7
 80046c0:	f7fb fdfe 	bl	80002c0 <__aeabi_dsub>
 80046c4:	a334      	add	r3, pc, #208	@ (adr r3, 8004798 <__ieee754_pow+0x750>)
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	f7fb ffb1 	bl	8000630 <__aeabi_dmul>
 80046ce:	a334      	add	r3, pc, #208	@ (adr r3, 80047a0 <__ieee754_pow+0x758>)
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	4606      	mov	r6, r0
 80046d6:	460f      	mov	r7, r1
 80046d8:	4620      	mov	r0, r4
 80046da:	4629      	mov	r1, r5
 80046dc:	f7fb ffa8 	bl	8000630 <__aeabi_dmul>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4630      	mov	r0, r6
 80046e6:	4639      	mov	r1, r7
 80046e8:	f7fb fdec 	bl	80002c4 <__adddf3>
 80046ec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80046ee:	4b35      	ldr	r3, [pc, #212]	@ (80047c4 <__ieee754_pow+0x77c>)
 80046f0:	2400      	movs	r4, #0
 80046f2:	4413      	add	r3, r2
 80046f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f8:	f7fb fde4 	bl	80002c4 <__adddf3>
 80046fc:	4682      	mov	sl, r0
 80046fe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004700:	468b      	mov	fp, r1
 8004702:	f7fb ff2b 	bl	800055c <__aeabi_i2d>
 8004706:	4606      	mov	r6, r0
 8004708:	460f      	mov	r7, r1
 800470a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800470c:	4b2e      	ldr	r3, [pc, #184]	@ (80047c8 <__ieee754_pow+0x780>)
 800470e:	4413      	add	r3, r2
 8004710:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004714:	4652      	mov	r2, sl
 8004716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800471a:	465b      	mov	r3, fp
 800471c:	f7fb fdd2 	bl	80002c4 <__adddf3>
 8004720:	4642      	mov	r2, r8
 8004722:	464b      	mov	r3, r9
 8004724:	f7fb fdce 	bl	80002c4 <__adddf3>
 8004728:	4632      	mov	r2, r6
 800472a:	463b      	mov	r3, r7
 800472c:	f7fb fdca 	bl	80002c4 <__adddf3>
 8004730:	4632      	mov	r2, r6
 8004732:	463b      	mov	r3, r7
 8004734:	4620      	mov	r0, r4
 8004736:	460d      	mov	r5, r1
 8004738:	f7fb fdc2 	bl	80002c0 <__aeabi_dsub>
 800473c:	4642      	mov	r2, r8
 800473e:	464b      	mov	r3, r9
 8004740:	f7fb fdbe 	bl	80002c0 <__aeabi_dsub>
 8004744:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004748:	f7fb fdba 	bl	80002c0 <__aeabi_dsub>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4650      	mov	r0, sl
 8004752:	4659      	mov	r1, fp
 8004754:	e618      	b.n	8004388 <__ieee754_pow+0x340>
 8004756:	2400      	movs	r4, #0
 8004758:	e68a      	b.n	8004470 <__ieee754_pow+0x428>
 800475a:	2601      	movs	r6, #1
 800475c:	e6a0      	b.n	80044a0 <__ieee754_pow+0x458>
 800475e:	bf00      	nop
 8004760:	4a454eef 	.word	0x4a454eef
 8004764:	3fca7e28 	.word	0x3fca7e28
 8004768:	93c9db65 	.word	0x93c9db65
 800476c:	3fcd864a 	.word	0x3fcd864a
 8004770:	a91d4101 	.word	0xa91d4101
 8004774:	3fd17460 	.word	0x3fd17460
 8004778:	518f264d 	.word	0x518f264d
 800477c:	3fd55555 	.word	0x3fd55555
 8004780:	db6fabff 	.word	0xdb6fabff
 8004784:	3fdb6db6 	.word	0x3fdb6db6
 8004788:	33333303 	.word	0x33333303
 800478c:	3fe33333 	.word	0x3fe33333
 8004790:	e0000000 	.word	0xe0000000
 8004794:	3feec709 	.word	0x3feec709
 8004798:	dc3a03fd 	.word	0xdc3a03fd
 800479c:	3feec709 	.word	0x3feec709
 80047a0:	145b01f5 	.word	0x145b01f5
 80047a4:	be3e2fe0 	.word	0xbe3e2fe0
 80047a8:	7ff00000 	.word	0x7ff00000
 80047ac:	43400000 	.word	0x43400000
 80047b0:	0003988e 	.word	0x0003988e
 80047b4:	000bb679 	.word	0x000bb679
 80047b8:	08004c40 	.word	0x08004c40
 80047bc:	3ff00000 	.word	0x3ff00000
 80047c0:	40080000 	.word	0x40080000
 80047c4:	08004c20 	.word	0x08004c20
 80047c8:	08004c30 	.word	0x08004c30
 80047cc:	a39a      	add	r3, pc, #616	@ (adr r3, 8004a38 <__ieee754_pow+0x9f0>)
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	4630      	mov	r0, r6
 80047d4:	4639      	mov	r1, r7
 80047d6:	f7fb fd75 	bl	80002c4 <__adddf3>
 80047da:	4642      	mov	r2, r8
 80047dc:	e9cd 0100 	strd	r0, r1, [sp]
 80047e0:	464b      	mov	r3, r9
 80047e2:	4620      	mov	r0, r4
 80047e4:	4629      	mov	r1, r5
 80047e6:	f7fb fd6b 	bl	80002c0 <__aeabi_dsub>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047f2:	f7fc f9ad 	bl	8000b50 <__aeabi_dcmpgt>
 80047f6:	2800      	cmp	r0, #0
 80047f8:	f47f ae09 	bne.w	800440e <__ieee754_pow+0x3c6>
 80047fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004800:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8004804:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8004808:	fa43 fa0a 	asr.w	sl, r3, sl
 800480c:	44da      	add	sl, fp
 800480e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004812:	489b      	ldr	r0, [pc, #620]	@ (8004a80 <__ieee754_pow+0xa38>)
 8004814:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8004818:	4108      	asrs	r0, r1
 800481a:	ea00 030a 	and.w	r3, r0, sl
 800481e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004822:	f1c1 0114 	rsb	r1, r1, #20
 8004826:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800482a:	4640      	mov	r0, r8
 800482c:	fa4a fa01 	asr.w	sl, sl, r1
 8004830:	f1bb 0f00 	cmp.w	fp, #0
 8004834:	4649      	mov	r1, r9
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	bfb8      	it	lt
 800483c:	f1ca 0a00 	rsblt	sl, sl, #0
 8004840:	f7fb fd3e 	bl	80002c0 <__aeabi_dsub>
 8004844:	4680      	mov	r8, r0
 8004846:	4689      	mov	r9, r1
 8004848:	2400      	movs	r4, #0
 800484a:	4632      	mov	r2, r6
 800484c:	463b      	mov	r3, r7
 800484e:	4640      	mov	r0, r8
 8004850:	4649      	mov	r1, r9
 8004852:	f7fb fd37 	bl	80002c4 <__adddf3>
 8004856:	a37a      	add	r3, pc, #488	@ (adr r3, 8004a40 <__ieee754_pow+0x9f8>)
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	4620      	mov	r0, r4
 800485e:	460d      	mov	r5, r1
 8004860:	f7fb fee6 	bl	8000630 <__aeabi_dmul>
 8004864:	4642      	mov	r2, r8
 8004866:	464b      	mov	r3, r9
 8004868:	e9cd 0100 	strd	r0, r1, [sp]
 800486c:	4620      	mov	r0, r4
 800486e:	4629      	mov	r1, r5
 8004870:	f7fb fd26 	bl	80002c0 <__aeabi_dsub>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4630      	mov	r0, r6
 800487a:	4639      	mov	r1, r7
 800487c:	f7fb fd20 	bl	80002c0 <__aeabi_dsub>
 8004880:	a371      	add	r3, pc, #452	@ (adr r3, 8004a48 <__ieee754_pow+0xa00>)
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	f7fb fed3 	bl	8000630 <__aeabi_dmul>
 800488a:	a371      	add	r3, pc, #452	@ (adr r3, 8004a50 <__ieee754_pow+0xa08>)
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	4680      	mov	r8, r0
 8004892:	4689      	mov	r9, r1
 8004894:	4620      	mov	r0, r4
 8004896:	4629      	mov	r1, r5
 8004898:	f7fb feca 	bl	8000630 <__aeabi_dmul>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4640      	mov	r0, r8
 80048a2:	4649      	mov	r1, r9
 80048a4:	f7fb fd0e 	bl	80002c4 <__adddf3>
 80048a8:	4604      	mov	r4, r0
 80048aa:	460d      	mov	r5, r1
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048b4:	f7fb fd06 	bl	80002c4 <__adddf3>
 80048b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048bc:	4680      	mov	r8, r0
 80048be:	4689      	mov	r9, r1
 80048c0:	f7fb fcfe 	bl	80002c0 <__aeabi_dsub>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4620      	mov	r0, r4
 80048ca:	4629      	mov	r1, r5
 80048cc:	f7fb fcf8 	bl	80002c0 <__aeabi_dsub>
 80048d0:	4642      	mov	r2, r8
 80048d2:	4606      	mov	r6, r0
 80048d4:	460f      	mov	r7, r1
 80048d6:	464b      	mov	r3, r9
 80048d8:	4640      	mov	r0, r8
 80048da:	4649      	mov	r1, r9
 80048dc:	f7fb fea8 	bl	8000630 <__aeabi_dmul>
 80048e0:	a35d      	add	r3, pc, #372	@ (adr r3, 8004a58 <__ieee754_pow+0xa10>)
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	4604      	mov	r4, r0
 80048e8:	460d      	mov	r5, r1
 80048ea:	f7fb fea1 	bl	8000630 <__aeabi_dmul>
 80048ee:	a35c      	add	r3, pc, #368	@ (adr r3, 8004a60 <__ieee754_pow+0xa18>)
 80048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f4:	f7fb fce4 	bl	80002c0 <__aeabi_dsub>
 80048f8:	4622      	mov	r2, r4
 80048fa:	462b      	mov	r3, r5
 80048fc:	f7fb fe98 	bl	8000630 <__aeabi_dmul>
 8004900:	a359      	add	r3, pc, #356	@ (adr r3, 8004a68 <__ieee754_pow+0xa20>)
 8004902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004906:	f7fb fcdd 	bl	80002c4 <__adddf3>
 800490a:	4622      	mov	r2, r4
 800490c:	462b      	mov	r3, r5
 800490e:	f7fb fe8f 	bl	8000630 <__aeabi_dmul>
 8004912:	a357      	add	r3, pc, #348	@ (adr r3, 8004a70 <__ieee754_pow+0xa28>)
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f7fb fcd2 	bl	80002c0 <__aeabi_dsub>
 800491c:	4622      	mov	r2, r4
 800491e:	462b      	mov	r3, r5
 8004920:	f7fb fe86 	bl	8000630 <__aeabi_dmul>
 8004924:	a354      	add	r3, pc, #336	@ (adr r3, 8004a78 <__ieee754_pow+0xa30>)
 8004926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492a:	f7fb fccb 	bl	80002c4 <__adddf3>
 800492e:	4622      	mov	r2, r4
 8004930:	462b      	mov	r3, r5
 8004932:	f7fb fe7d 	bl	8000630 <__aeabi_dmul>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4640      	mov	r0, r8
 800493c:	4649      	mov	r1, r9
 800493e:	f7fb fcbf 	bl	80002c0 <__aeabi_dsub>
 8004942:	4604      	mov	r4, r0
 8004944:	460d      	mov	r5, r1
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4640      	mov	r0, r8
 800494c:	4649      	mov	r1, r9
 800494e:	f7fb fe6f 	bl	8000630 <__aeabi_dmul>
 8004952:	2200      	movs	r2, #0
 8004954:	e9cd 0100 	strd	r0, r1, [sp]
 8004958:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800495c:	4620      	mov	r0, r4
 800495e:	4629      	mov	r1, r5
 8004960:	f7fb fcae 	bl	80002c0 <__aeabi_dsub>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	e9dd 0100 	ldrd	r0, r1, [sp]
 800496c:	f7fb ff8a 	bl	8000884 <__aeabi_ddiv>
 8004970:	4632      	mov	r2, r6
 8004972:	4604      	mov	r4, r0
 8004974:	460d      	mov	r5, r1
 8004976:	463b      	mov	r3, r7
 8004978:	4640      	mov	r0, r8
 800497a:	4649      	mov	r1, r9
 800497c:	f7fb fe58 	bl	8000630 <__aeabi_dmul>
 8004980:	4632      	mov	r2, r6
 8004982:	463b      	mov	r3, r7
 8004984:	f7fb fc9e 	bl	80002c4 <__adddf3>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4620      	mov	r0, r4
 800498e:	4629      	mov	r1, r5
 8004990:	f7fb fc96 	bl	80002c0 <__aeabi_dsub>
 8004994:	4642      	mov	r2, r8
 8004996:	464b      	mov	r3, r9
 8004998:	f7fb fc92 	bl	80002c0 <__aeabi_dsub>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	2000      	movs	r0, #0
 80049a2:	4938      	ldr	r1, [pc, #224]	@ (8004a84 <__ieee754_pow+0xa3c>)
 80049a4:	f7fb fc8c 	bl	80002c0 <__aeabi_dsub>
 80049a8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80049ac:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80049b0:	da2e      	bge.n	8004a10 <__ieee754_pow+0x9c8>
 80049b2:	4652      	mov	r2, sl
 80049b4:	f000 f874 	bl	8004aa0 <scalbn>
 80049b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049bc:	f7ff bbed 	b.w	800419a <__ieee754_pow+0x152>
 80049c0:	4c31      	ldr	r4, [pc, #196]	@ (8004a88 <__ieee754_pow+0xa40>)
 80049c2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80049c6:	42a3      	cmp	r3, r4
 80049c8:	d91a      	bls.n	8004a00 <__ieee754_pow+0x9b8>
 80049ca:	4b30      	ldr	r3, [pc, #192]	@ (8004a8c <__ieee754_pow+0xa44>)
 80049cc:	440b      	add	r3, r1
 80049ce:	4303      	orrs	r3, r0
 80049d0:	d009      	beq.n	80049e6 <__ieee754_pow+0x99e>
 80049d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049d6:	2200      	movs	r2, #0
 80049d8:	2300      	movs	r3, #0
 80049da:	f7fc f89b 	bl	8000b14 <__aeabi_dcmplt>
 80049de:	3800      	subs	r0, #0
 80049e0:	bf18      	it	ne
 80049e2:	2001      	movne	r0, #1
 80049e4:	e444      	b.n	8004270 <__ieee754_pow+0x228>
 80049e6:	4642      	mov	r2, r8
 80049e8:	464b      	mov	r3, r9
 80049ea:	f7fb fc69 	bl	80002c0 <__aeabi_dsub>
 80049ee:	4632      	mov	r2, r6
 80049f0:	463b      	mov	r3, r7
 80049f2:	f7fc f8a3 	bl	8000b3c <__aeabi_dcmpge>
 80049f6:	2800      	cmp	r0, #0
 80049f8:	d1eb      	bne.n	80049d2 <__ieee754_pow+0x98a>
 80049fa:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8004a90 <__ieee754_pow+0xa48>
 80049fe:	e6fd      	b.n	80047fc <__ieee754_pow+0x7b4>
 8004a00:	469a      	mov	sl, r3
 8004a02:	4b24      	ldr	r3, [pc, #144]	@ (8004a94 <__ieee754_pow+0xa4c>)
 8004a04:	459a      	cmp	sl, r3
 8004a06:	f63f aef9 	bhi.w	80047fc <__ieee754_pow+0x7b4>
 8004a0a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004a0e:	e71b      	b.n	8004848 <__ieee754_pow+0x800>
 8004a10:	4621      	mov	r1, r4
 8004a12:	e7d1      	b.n	80049b8 <__ieee754_pow+0x970>
 8004a14:	2000      	movs	r0, #0
 8004a16:	491b      	ldr	r1, [pc, #108]	@ (8004a84 <__ieee754_pow+0xa3c>)
 8004a18:	f7ff bb34 	b.w	8004084 <__ieee754_pow+0x3c>
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	2100      	movs	r1, #0
 8004a20:	f7ff bb30 	b.w	8004084 <__ieee754_pow+0x3c>
 8004a24:	4650      	mov	r0, sl
 8004a26:	4659      	mov	r1, fp
 8004a28:	f7ff bb2c 	b.w	8004084 <__ieee754_pow+0x3c>
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	f7ff bb79 	b.w	8004124 <__ieee754_pow+0xdc>
 8004a32:	2400      	movs	r4, #0
 8004a34:	f7ff bb64 	b.w	8004100 <__ieee754_pow+0xb8>
 8004a38:	652b82fe 	.word	0x652b82fe
 8004a3c:	3c971547 	.word	0x3c971547
 8004a40:	00000000 	.word	0x00000000
 8004a44:	3fe62e43 	.word	0x3fe62e43
 8004a48:	fefa39ef 	.word	0xfefa39ef
 8004a4c:	3fe62e42 	.word	0x3fe62e42
 8004a50:	0ca86c39 	.word	0x0ca86c39
 8004a54:	be205c61 	.word	0xbe205c61
 8004a58:	72bea4d0 	.word	0x72bea4d0
 8004a5c:	3e663769 	.word	0x3e663769
 8004a60:	c5d26bf1 	.word	0xc5d26bf1
 8004a64:	3ebbbd41 	.word	0x3ebbbd41
 8004a68:	af25de2c 	.word	0xaf25de2c
 8004a6c:	3f11566a 	.word	0x3f11566a
 8004a70:	16bebd93 	.word	0x16bebd93
 8004a74:	3f66c16c 	.word	0x3f66c16c
 8004a78:	5555553e 	.word	0x5555553e
 8004a7c:	3fc55555 	.word	0x3fc55555
 8004a80:	fff00000 	.word	0xfff00000
 8004a84:	3ff00000 	.word	0x3ff00000
 8004a88:	4090cbff 	.word	0x4090cbff
 8004a8c:	3f6f3400 	.word	0x3f6f3400
 8004a90:	4090cc00 	.word	0x4090cc00
 8004a94:	3fe00000 	.word	0x3fe00000

08004a98 <fabs>:
 8004a98:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4770      	bx	lr

08004aa0 <scalbn>:
 8004aa0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8004aa4:	4616      	mov	r6, r2
 8004aa6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004aaa:	4683      	mov	fp, r0
 8004aac:	468c      	mov	ip, r1
 8004aae:	460b      	mov	r3, r1
 8004ab0:	b982      	cbnz	r2, 8004ad4 <scalbn+0x34>
 8004ab2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004ab6:	4303      	orrs	r3, r0
 8004ab8:	d039      	beq.n	8004b2e <scalbn+0x8e>
 8004aba:	4b2f      	ldr	r3, [pc, #188]	@ (8004b78 <scalbn+0xd8>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	f7fb fdb7 	bl	8000630 <__aeabi_dmul>
 8004ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8004b7c <scalbn+0xdc>)
 8004ac4:	4683      	mov	fp, r0
 8004ac6:	429e      	cmp	r6, r3
 8004ac8:	468c      	mov	ip, r1
 8004aca:	da0d      	bge.n	8004ae8 <scalbn+0x48>
 8004acc:	a326      	add	r3, pc, #152	@ (adr r3, 8004b68 <scalbn+0xc8>)
 8004ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad2:	e01b      	b.n	8004b0c <scalbn+0x6c>
 8004ad4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8004ad8:	42ba      	cmp	r2, r7
 8004ada:	d109      	bne.n	8004af0 <scalbn+0x50>
 8004adc:	4602      	mov	r2, r0
 8004ade:	f7fb fbf1 	bl	80002c4 <__adddf3>
 8004ae2:	4683      	mov	fp, r0
 8004ae4:	468c      	mov	ip, r1
 8004ae6:	e022      	b.n	8004b2e <scalbn+0x8e>
 8004ae8:	460b      	mov	r3, r1
 8004aea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004aee:	3a36      	subs	r2, #54	@ 0x36
 8004af0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004af4:	428e      	cmp	r6, r1
 8004af6:	dd0c      	ble.n	8004b12 <scalbn+0x72>
 8004af8:	a31d      	add	r3, pc, #116	@ (adr r3, 8004b70 <scalbn+0xd0>)
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	461c      	mov	r4, r3
 8004b00:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8004b04:	f361 74df 	bfi	r4, r1, #31, #1
 8004b08:	4621      	mov	r1, r4
 8004b0a:	481d      	ldr	r0, [pc, #116]	@ (8004b80 <scalbn+0xe0>)
 8004b0c:	f7fb fd90 	bl	8000630 <__aeabi_dmul>
 8004b10:	e7e7      	b.n	8004ae2 <scalbn+0x42>
 8004b12:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004b16:	4432      	add	r2, r6
 8004b18:	428a      	cmp	r2, r1
 8004b1a:	dced      	bgt.n	8004af8 <scalbn+0x58>
 8004b1c:	2a00      	cmp	r2, #0
 8004b1e:	dd0a      	ble.n	8004b36 <scalbn+0x96>
 8004b20:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004b24:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004b28:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004b2c:	46ac      	mov	ip, r5
 8004b2e:	4658      	mov	r0, fp
 8004b30:	4661      	mov	r1, ip
 8004b32:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8004b36:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004b3a:	da09      	bge.n	8004b50 <scalbn+0xb0>
 8004b3c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8004b40:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8004b44:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8004b48:	480e      	ldr	r0, [pc, #56]	@ (8004b84 <scalbn+0xe4>)
 8004b4a:	f041 011f 	orr.w	r1, r1, #31
 8004b4e:	e7bd      	b.n	8004acc <scalbn+0x2c>
 8004b50:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004b54:	3236      	adds	r2, #54	@ 0x36
 8004b56:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004b5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004b5e:	4658      	mov	r0, fp
 8004b60:	4629      	mov	r1, r5
 8004b62:	2200      	movs	r2, #0
 8004b64:	4b08      	ldr	r3, [pc, #32]	@ (8004b88 <scalbn+0xe8>)
 8004b66:	e7d1      	b.n	8004b0c <scalbn+0x6c>
 8004b68:	c2f8f359 	.word	0xc2f8f359
 8004b6c:	01a56e1f 	.word	0x01a56e1f
 8004b70:	8800759c 	.word	0x8800759c
 8004b74:	7e37e43c 	.word	0x7e37e43c
 8004b78:	43500000 	.word	0x43500000
 8004b7c:	ffff3cb0 	.word	0xffff3cb0
 8004b80:	8800759c 	.word	0x8800759c
 8004b84:	c2f8f359 	.word	0xc2f8f359
 8004b88:	3c900000 	.word	0x3c900000

08004b8c <with_errno>:
 8004b8c:	b570      	push	{r4, r5, r6, lr}
 8004b8e:	4604      	mov	r4, r0
 8004b90:	460d      	mov	r5, r1
 8004b92:	4616      	mov	r6, r2
 8004b94:	f7ff f8c6 	bl	8003d24 <__errno>
 8004b98:	4629      	mov	r1, r5
 8004b9a:	6006      	str	r6, [r0, #0]
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}

08004ba0 <xflow>:
 8004ba0:	b513      	push	{r0, r1, r4, lr}
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	b10c      	cbz	r4, 8004bae <xflow+0xe>
 8004baa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004bae:	e9cd 2300 	strd	r2, r3, [sp]
 8004bb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bb6:	f7fb fd3b 	bl	8000630 <__aeabi_dmul>
 8004bba:	2222      	movs	r2, #34	@ 0x22
 8004bbc:	b002      	add	sp, #8
 8004bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc2:	f7ff bfe3 	b.w	8004b8c <with_errno>

08004bc6 <__math_uflow>:
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004bcc:	f7ff bfe8 	b.w	8004ba0 <xflow>

08004bd0 <__math_oflow>:
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8004bd6:	f7ff bfe3 	b.w	8004ba0 <xflow>
	...

08004bdc <_init>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	bf00      	nop
 8004be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be2:	bc08      	pop	{r3}
 8004be4:	469e      	mov	lr, r3
 8004be6:	4770      	bx	lr

08004be8 <_fini>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	bf00      	nop
 8004bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bee:	bc08      	pop	{r3}
 8004bf0:	469e      	mov	lr, r3
 8004bf2:	4770      	bx	lr
